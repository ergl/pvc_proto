syntax = "proto3";

// Emtpy message for requesting a connection
// A connection requested to only one node in the cluster
message ConnectRequest {}

message ConnectResponse {
    uint32 num_partitions = 1;
    // Ring structure is sent using raw erlang encoding
    bytes ring_payload = 2;
    // The replica identifier of this cluster
    bytes replica_id = 3;
}

message UniformBarrier {
    bytes client_vc = 1;
    bytes partition = 2;
}

message UniformResp {}

message StartReq {
    bytes client_vc = 1;
    bytes partition = 2;
}

message StartReturn {
    bytes snapshot_vc = 1;
}

// Keys are opaque byte blobs
// The vector clock is a serialized erlang term
// todo(borja): When adding CRDTs, do we send our effects?
// todo(borja): Aggregate per node like prep/dec?
message GetKeyVersion {
    // Partition number is too long for PB
    // (128 bit number)
    bytes partition = 1;
    bytes key = 2;
    bytes snapshot_vc = 3;
}

// Repeat a read
message GetKeyVersionAgain {
    // Partition number is too long for PB
    // (128 bit number)
    bytes partition = 1;
    bytes key = 2;
    bytes snapshot_vc = 3;
}

// Values are opaque byte blobs
// todo(borja): Add effects?
message KeyVersion {
    bytes value = 1;
}

message PrepareBlueNode {
    message PrepareBlueSingle {
        bytes partition = 1;
        bytes writeset = 2;
    }

    // todo(borja): No need to encode from erlang term if we use opaque blob
    bytes transaction_id = 1;
    bytes snapshot_vc = 2;
    repeated PrepareBlueSingle prepares = 3;
}

message BlueVoteBatch {
    message BlueVote {
        bytes partition = 1;
        uint64 prepare_time = 2;
    }

    repeated BlueVote votes = 1;
}

message DecideBlueNode {
    bytes transaction_id = 1;
    repeated bytes partitions = 2;
    bytes commit_vc = 3;
}

message CommitRed {
    bytes transaction_id = 1;
    bytes snapshot_vc = 2;
    repeated bytes prepares = 3;
    bytes partition = 4;
}

message CommitRedReturn {
    oneof resp {
        bytes commit_vc = 1;
        uint32 abort_reason = 2;
    }
}
