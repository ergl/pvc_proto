syntax = "proto3";

// Complex types are encoded as Erlang terms,
// using term_to_binary/binary_to_term
// If using these definitions from some other
// language, we should change most of the "bytes"
// fields.

// TODO: Add connection/partition info

// Emtpy message for requesting a connection
// A connection requested to only one node in the cluster
message ConnectRequest {}

message ConnectResponse {
    uint32 num_partitions = 1;
    // Ring structure is sent using raw erlang encoding
    bytes ring_payload = 2;
}

// Request a read for the given key
// Key must be "owned" by the given partition
//
// All fields are byte-serialized erlang terms
message ReadRequest {
    // Partition number is too long for PB
    // (128 bit number)
    bytes partition = 1;
    bytes key = 2;
    bytes vc_aggr = 3;
    bytes has_read = 4;
}

// Read Request response, might be an abort
// or a payload containing the value of
// the key, its version time, and the maximum
// VC calculated for the owner partition
message ReadReturn {
    message ReadPayload {
        bytes value = 1;
        bytes version_vc = 2;
        bytes max_vc = 3;
    }

    oneof resp {
        // Encoded error number
        uint32 abort = 1;
        ReadPayload payload = 2;
    }
}

// Aggregation of prepare messages
message PrepareNode {
    message PrepareSingle {
        bytes partition = 1;
        bytes keydata = 2;
        uint64 version = 3;
    }

    // Don't repeat transaction id, redundant
    bytes transaction_id = 1;
    uint32 protocol = 2;
    repeated PrepareSingle prepares = 3;
}

// Vote msg aggregation by all the partitions of a node
message VoteBatch {
    message VoteSingle {
        bytes partition = 1;
        oneof payload {
            // Encoded error number
            uint32 abort = 2;
            // Partition proposed sequence number
            uint64 seq_number = 3;
        }
    }

    repeated VoteSingle votes = 1;
}

// Aggregation of decide messages
message DecideNode {
    // Don't repeat transaction id or commit vc
    // the commit VC is always the same for all partitions
    bytes transaction_id = 1;
    repeated bytes partitions = 2;
    oneof maybe_payload {
        bytes commit_vc = 3;
    }
}

message DecideAck {}
