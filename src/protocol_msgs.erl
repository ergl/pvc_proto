%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.3.3
-module(protocol_msgs).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'ConnectRequest'() ::
      #{
       }.

-type 'ConnectResponse'() ::
      #{num_partitions          => non_neg_integer(), % = 1, 32 bits
        ring_payload            => iodata()         % = 2
       }.

-type 'ReadRequest'() ::
      #{partition               => iodata(),        % = 1
        key                     => iodata(),        % = 2
        vc_aggr                 => iodata(),        % = 3
        has_read                => iodata()         % = 4
       }.

-type 'ReadReturn.ReadPayload'() ::
      #{value                   => iodata(),        % = 1
        version_vc              => iodata(),        % = 2
        max_vc                  => iodata()         % = 3
       }.

-type 'ReadReturn'() ::
      #{resp                    => {abort, non_neg_integer()} | {payload, 'ReadReturn.ReadPayload'()} % oneof
       }.

-type 'Prepare'() ::
      #{partition               => iodata(),        % = 1
        transaction_id          => iodata(),        % = 2
        writeset                => iodata(),        % = 3
        partition_version       => non_neg_integer() % = 4, 32 bits
       }.

-type 'PrepareNode.PrepareSingle'() ::
      #{partition               => iodata(),        % = 1
        writeset                => iodata(),        % = 2
        version                 => non_neg_integer() % = 3, 32 bits
       }.

-type 'PrepareNode'() ::
      #{transaction_id          => iodata(),        % = 1
        prepares                => ['PrepareNode.PrepareSingle'()] % = 2
       }.

-type 'Vote'() ::
      #{partition               => iodata(),        % = 1
        payload                 => {abort, non_neg_integer()} | {seq_number, non_neg_integer()} % oneof
       }.

-type 'VoteBatch'() ::
      #{votes                   => ['Vote'()]       % = 1
       }.

-type 'Decide.DecideAbort'() ::
      #{
       }.

-type 'Decide.DecideCommit'() ::
      #{commit_vc               => iodata()         % = 1
       }.

-type 'Decide'() ::
      #{partition               => iodata(),        % = 1
        transaction_id          => iodata(),        % = 2
        payload                 => {abort, 'Decide.DecideAbort'()} | {commit, 'Decide.DecideCommit'()} % oneof
       }.

-export_type(['ConnectRequest'/0, 'ConnectResponse'/0, 'ReadRequest'/0, 'ReadReturn.ReadPayload'/0, 'ReadReturn'/0, 'Prepare'/0, 'PrepareNode.PrepareSingle'/0, 'PrepareNode'/0, 'Vote'/0, 'VoteBatch'/0, 'Decide.DecideAbort'/0, 'Decide.DecideCommit'/0, 'Decide'/0]).

-spec encode_msg('ConnectRequest'() | 'ConnectResponse'() | 'ReadRequest'() | 'ReadReturn.ReadPayload'() | 'ReadReturn'() | 'Prepare'() | 'PrepareNode.PrepareSingle'() | 'PrepareNode'() | 'Vote'() | 'VoteBatch'() | 'Decide.DecideAbort'() | 'Decide.DecideCommit'() | 'Decide'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('ConnectRequest'() | 'ConnectResponse'() | 'ReadRequest'() | 'ReadReturn.ReadPayload'() | 'ReadReturn'() | 'Prepare'() | 'PrepareNode.PrepareSingle'() | 'PrepareNode'() | 'Vote'() | 'VoteBatch'() | 'Decide.DecideAbort'() | 'Decide.DecideCommit'() | 'Decide'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ConnectRequest' ->
	  e_msg_ConnectRequest(id(Msg, TrUserData), TrUserData);
      'ConnectResponse' ->
	  e_msg_ConnectResponse(id(Msg, TrUserData), TrUserData);
      'ReadRequest' ->
	  e_msg_ReadRequest(id(Msg, TrUserData), TrUserData);
      'ReadReturn.ReadPayload' ->
	  'e_msg_ReadReturn.ReadPayload'(id(Msg, TrUserData),
					 TrUserData);
      'ReadReturn' ->
	  e_msg_ReadReturn(id(Msg, TrUserData), TrUserData);
      'Prepare' ->
	  e_msg_Prepare(id(Msg, TrUserData), TrUserData);
      'PrepareNode.PrepareSingle' ->
	  'e_msg_PrepareNode.PrepareSingle'(id(Msg, TrUserData),
					    TrUserData);
      'PrepareNode' ->
	  e_msg_PrepareNode(id(Msg, TrUserData), TrUserData);
      'Vote' -> e_msg_Vote(id(Msg, TrUserData), TrUserData);
      'VoteBatch' ->
	  e_msg_VoteBatch(id(Msg, TrUserData), TrUserData);
      'Decide.DecideAbort' ->
	  'e_msg_Decide.DecideAbort'(id(Msg, TrUserData),
				     TrUserData);
      'Decide.DecideCommit' ->
	  'e_msg_Decide.DecideCommit'(id(Msg, TrUserData),
				      TrUserData);
      'Decide' ->
	  e_msg_Decide(id(Msg, TrUserData), TrUserData)
    end.


e_msg_ConnectRequest(_Msg, _TrUserData) -> <<>>.

e_msg_ConnectResponse(Msg, TrUserData) ->
    e_msg_ConnectResponse(Msg, <<>>, TrUserData).


e_msg_ConnectResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{num_partitions := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{ring_payload := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case iolist_size(TrF2) of
	      0 -> B1;
	      _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_msg_ReadRequest(Msg, TrUserData) ->
    e_msg_ReadRequest(Msg, <<>>, TrUserData).


e_msg_ReadRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{partition := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{key := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{vc_aggr := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case iolist_size(TrF3) of
		   0 -> B2;
		   _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{has_read := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    case iolist_size(TrF4) of
	      0 -> B3;
	      _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

'e_msg_ReadReturn.ReadPayload'(Msg, TrUserData) ->
    'e_msg_ReadReturn.ReadPayload'(Msg, <<>>, TrUserData).


'e_msg_ReadReturn.ReadPayload'(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{value := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{version_vc := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{max_vc := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    case iolist_size(TrF3) of
	      0 -> B2;
	      _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

e_msg_ReadReturn(Msg, TrUserData) ->
    e_msg_ReadReturn(Msg, <<>>, TrUserData).


e_msg_ReadReturn(#{} = M, Bin, TrUserData) ->
    case M of
      #{resp := F1} ->
	  case id(F1, TrUserData) of
	    {abort, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData)
		end;
	    {payload, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_ReadReturn_payload(TrTF1, <<Bin/binary, 18>>,
					      TrUserData)
		end
	  end;
      _ -> Bin
    end.

e_msg_Prepare(Msg, TrUserData) ->
    e_msg_Prepare(Msg, <<>>, TrUserData).


e_msg_Prepare(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{partition := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{transaction_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{writeset := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case iolist_size(TrF3) of
		   0 -> B2;
		   _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{partition_version := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= 0 -> B3;
	       true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

'e_msg_PrepareNode.PrepareSingle'(Msg, TrUserData) ->
    'e_msg_PrepareNode.PrepareSingle'(Msg, <<>>,
				      TrUserData).


'e_msg_PrepareNode.PrepareSingle'(#{} = M, Bin,
				  TrUserData) ->
    B1 = case M of
	   #{partition := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{writeset := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{version := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0 -> B2;
	       true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

e_msg_PrepareNode(Msg, TrUserData) ->
    e_msg_PrepareNode(Msg, <<>>, TrUserData).


e_msg_PrepareNode(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{transaction_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{prepares := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_PrepareNode_prepares(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

e_msg_Vote(Msg, TrUserData) ->
    e_msg_Vote(Msg, <<>>, TrUserData).


e_msg_Vote(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{partition := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{payload := F2} ->
	  case id(F2, TrUserData) of
	    {abort, TF2} ->
		begin
		  TrTF2 = id(TF2, TrUserData),
		  e_varint(TrTF2, <<B1/binary, 16>>, TrUserData)
		end;
	    {seq_number, TF2} ->
		begin
		  TrTF2 = id(TF2, TrUserData),
		  e_varint(TrTF2, <<B1/binary, 24>>, TrUserData)
		end
	  end;
      _ -> B1
    end.

e_msg_VoteBatch(Msg, TrUserData) ->
    e_msg_VoteBatch(Msg, <<>>, TrUserData).


e_msg_VoteBatch(#{} = M, Bin, TrUserData) ->
    case M of
      #{votes := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_VoteBatch_votes(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

'e_msg_Decide.DecideAbort'(_Msg, _TrUserData) -> <<>>.

'e_msg_Decide.DecideCommit'(Msg, TrUserData) ->
    'e_msg_Decide.DecideCommit'(Msg, <<>>, TrUserData).


'e_msg_Decide.DecideCommit'(#{} = M, Bin, TrUserData) ->
    case M of
      #{commit_vc := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case iolist_size(TrF1) of
	      0 -> Bin;
	      _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

e_msg_Decide(Msg, TrUserData) ->
    e_msg_Decide(Msg, <<>>, TrUserData).


e_msg_Decide(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{partition := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{transaction_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{payload := F3} ->
	  case id(F3, TrUserData) of
	    {abort, TF3} ->
		begin
		  TrTF3 = id(TF3, TrUserData),
		  e_mfield_Decide_abort(TrTF3, <<B2/binary, 26>>,
					TrUserData)
		end;
	    {commit, TF3} ->
		begin
		  TrTF3 = id(TF3, TrUserData),
		  e_mfield_Decide_commit(TrTF3, <<B2/binary, 34>>,
					 TrUserData)
		end
	  end;
      _ -> B2
    end.

e_mfield_ReadReturn_payload(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_ReadReturn.ReadPayload'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_PrepareNode_prepares(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_PrepareNode.PrepareSingle'(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_PrepareNode_prepares([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_PrepareNode_prepares(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_PrepareNode_prepares(Rest, Bin3, TrUserData);
e_field_PrepareNode_prepares([], Bin, _TrUserData) ->
    Bin.

e_mfield_VoteBatch_votes(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Vote(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_VoteBatch_votes([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_VoteBatch_votes(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_VoteBatch_votes(Rest, Bin3, TrUserData);
e_field_VoteBatch_votes([], Bin, _TrUserData) -> Bin.

e_mfield_Decide_abort(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_Decide_commit(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_Decide.DecideCommit'(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_PATTERN_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit('ConnectRequest', Bin, TrUserData) ->
    id(d_msg_ConnectRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ConnectResponse', Bin, TrUserData) ->
    id(d_msg_ConnectResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ReadRequest', Bin, TrUserData) ->
    id(d_msg_ReadRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ReadReturn.ReadPayload', Bin,
		  TrUserData) ->
    id('d_msg_ReadReturn.ReadPayload'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ReadReturn', Bin, TrUserData) ->
    id(d_msg_ReadReturn(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Prepare', Bin, TrUserData) ->
    id(d_msg_Prepare(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PrepareNode.PrepareSingle', Bin,
		  TrUserData) ->
    id('d_msg_PrepareNode.PrepareSingle'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PrepareNode', Bin, TrUserData) ->
    id(d_msg_PrepareNode(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Vote', Bin, TrUserData) ->
    id(d_msg_Vote(Bin, TrUserData), TrUserData);
decode_msg_2_doit('VoteBatch', Bin, TrUserData) ->
    id(d_msg_VoteBatch(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Decide.DecideAbort', Bin,
		  TrUserData) ->
    id('d_msg_Decide.DecideAbort'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Decide.DecideCommit', Bin,
		  TrUserData) ->
    id('d_msg_Decide.DecideCommit'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Decide', Bin, TrUserData) ->
    id(d_msg_Decide(Bin, TrUserData), TrUserData).



d_msg_ConnectRequest(Bin, TrUserData) ->
    dfp_read_field_def_ConnectRequest(Bin, 0, 0,
				      TrUserData).

dfp_read_field_def_ConnectRequest(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_ConnectRequest(Other, Z1, Z2,
				  TrUserData) ->
    dg_read_field_def_ConnectRequest(Other, Z1, Z2,
				     TrUserData).

dg_read_field_def_ConnectRequest(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ConnectRequest(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
dg_read_field_def_ConnectRequest(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_ConnectRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_ConnectRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ConnectRequest(Rest, 0, 0,
					       TrUserData);
      3 ->
	  skip_group_ConnectRequest(Rest, Key bsr 3, 0,
				    TrUserData);
      5 -> skip_32_ConnectRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ConnectRequest(<<>>, 0, 0, _) -> #{}.

skip_varint_ConnectRequest(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    skip_varint_ConnectRequest(Rest, Z1, Z2, TrUserData);
skip_varint_ConnectRequest(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    dfp_read_field_def_ConnectRequest(Rest, Z1, Z2,
				      TrUserData).

skip_length_delimited_ConnectRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ConnectRequest(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
skip_length_delimited_ConnectRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConnectRequest(Rest2, 0, 0,
				      TrUserData).

skip_group_ConnectRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ConnectRequest(Rest, 0, Z2,
				      TrUserData).

skip_32_ConnectRequest(<<_:32, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_ConnectRequest(Rest, Z1, Z2,
				      TrUserData).

skip_64_ConnectRequest(<<_:64, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_ConnectRequest(Rest, Z1, Z2,
				      TrUserData).

d_msg_ConnectResponse(Bin, TrUserData) ->
    dfp_read_field_def_ConnectResponse(Bin, 0, 0,
				       id(0, TrUserData), id(<<>>, TrUserData),
				       TrUserData).

dfp_read_field_def_ConnectResponse(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ConnectResponse_num_partitions(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_ConnectResponse(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ConnectResponse_ring_payload(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_ConnectResponse(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #{num_partitions => F@_1, ring_payload => F@_2};
dfp_read_field_def_ConnectResponse(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_ConnectResponse(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_ConnectResponse(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ConnectResponse(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_ConnectResponse(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ConnectResponse_num_partitions(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      18 ->
	  d_field_ConnectResponse_ring_payload(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ConnectResponse(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_ConnectResponse(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_ConnectResponse(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_ConnectResponse(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_ConnectResponse(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_ConnectResponse(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #{num_partitions => F@_1, ring_payload => F@_2}.

d_field_ConnectResponse_num_partitions(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ConnectResponse_num_partitions(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_ConnectResponse_num_partitions(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ConnectResponse(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_ConnectResponse_ring_payload(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ConnectResponse_ring_payload(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_ConnectResponse_ring_payload(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ConnectResponse(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_ConnectResponse(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ConnectResponse(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_ConnectResponse(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ConnectResponse(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_ConnectResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ConnectResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_ConnectResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConnectResponse(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_ConnectResponse(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ConnectResponse(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_ConnectResponse(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ConnectResponse(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_ConnectResponse(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ConnectResponse(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

d_msg_ReadRequest(Bin, TrUserData) ->
    dfp_read_field_def_ReadRequest(Bin, 0, 0,
				   id(<<>>, TrUserData), id(<<>>, TrUserData),
				   id(<<>>, TrUserData), id(<<>>, TrUserData),
				   TrUserData).

dfp_read_field_def_ReadRequest(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ReadRequest_partition(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_ReadRequest(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ReadRequest_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_ReadRequest(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ReadRequest_vc_aggr(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_ReadRequest(<<34, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ReadRequest_has_read(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_ReadRequest(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, _) ->
    #{partition => F@_1, key => F@_2, vc_aggr => F@_3,
      has_read => F@_4};
dfp_read_field_def_ReadRequest(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_ReadRequest(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

dg_read_field_def_ReadRequest(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReadRequest(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
dg_read_field_def_ReadRequest(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReadRequest_partition(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      18 ->
	  d_field_ReadRequest_key(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      26 ->
	  d_field_ReadRequest_vc_aggr(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      34 ->
	  d_field_ReadRequest_has_read(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReadRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    1 ->
		skip_64_ReadRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    2 ->
		skip_length_delimited_ReadRequest(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_ReadRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_ReadRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData)
	  end
    end;
dg_read_field_def_ReadRequest(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    #{partition => F@_1, key => F@_2, vc_aggr => F@_3,
      has_read => F@_4}.

d_field_ReadRequest_partition(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ReadRequest_partition(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_ReadRequest_partition(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ReadRequest(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, TrUserData).

d_field_ReadRequest_key(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ReadRequest_key(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ReadRequest_key(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ReadRequest(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, TrUserData).

d_field_ReadRequest_vc_aggr(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ReadRequest_vc_aggr(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ReadRequest_vc_aggr(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ReadRequest(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, TrUserData).

d_field_ReadRequest_has_read(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ReadRequest_has_read(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ReadRequest_has_read(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ReadRequest(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, TrUserData).

skip_varint_ReadRequest(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_ReadRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
skip_varint_ReadRequest(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ReadRequest(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_length_delimited_ReadRequest(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReadRequest(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
skip_length_delimited_ReadRequest(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadRequest(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_group_ReadRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadRequest(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_32_ReadRequest(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ReadRequest(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_64_ReadRequest(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ReadRequest(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

'd_msg_ReadReturn.ReadPayload'(Bin, TrUserData) ->
    'dfp_read_field_def_ReadReturn.ReadPayload'(Bin, 0, 0,
						id(<<>>, TrUserData),
						id(<<>>, TrUserData),
						id(<<>>, TrUserData),
						TrUserData).

'dfp_read_field_def_ReadReturn.ReadPayload'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ReadReturn.ReadPayload_value'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ReadReturn.ReadPayload'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ReadReturn.ReadPayload_version_vc'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
'dfp_read_field_def_ReadReturn.ReadPayload'(<<26,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ReadReturn.ReadPayload_max_vc'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ReadReturn.ReadPayload'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #{value => F@_1, version_vc => F@_2, max_vc => F@_3};
'dfp_read_field_def_ReadReturn.ReadPayload'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ReadReturn.ReadPayload'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

'dg_read_field_def_ReadReturn.ReadPayload'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ReadReturn.ReadPayload'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'dg_read_field_def_ReadReturn.ReadPayload'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ReadReturn.ReadPayload_value'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      18 ->
	  'd_field_ReadReturn.ReadPayload_version_vc'(Rest, 0, 0,
						      F@_1, F@_2, F@_3,
						      TrUserData);
      26 ->
	  'd_field_ReadReturn.ReadPayload_max_vc'(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ReadReturn.ReadPayload'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_ReadReturn.ReadPayload'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_ReadReturn.ReadPayload'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		'skip_group_ReadReturn.ReadPayload'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		'skip_32_ReadReturn.ReadPayload'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_ReadReturn.ReadPayload'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #{value => F@_1, version_vc => F@_2, max_vc => F@_3}.

'd_field_ReadReturn.ReadPayload_value'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_ReadReturn.ReadPayload_value'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
'd_field_ReadReturn.ReadPayload_value'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_ReadReturn.ReadPayload'(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

'd_field_ReadReturn.ReadPayload_version_vc'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    'd_field_ReadReturn.ReadPayload_version_vc'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
'd_field_ReadReturn.ReadPayload_version_vc'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, _, F@_3,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_ReadReturn.ReadPayload'(RestF, 0, 0,
						F@_1, NewFValue, F@_3,
						TrUserData).

'd_field_ReadReturn.ReadPayload_max_vc'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_ReadReturn.ReadPayload_max_vc'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
'd_field_ReadReturn.ReadPayload_max_vc'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_ReadReturn.ReadPayload'(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

'skip_varint_ReadReturn.ReadPayload'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_ReadReturn.ReadPayload'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
'skip_varint_ReadReturn.ReadPayload'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ReadReturn.ReadPayload'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_length_delimited_ReadReturn.ReadPayload'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ReadReturn.ReadPayload'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'skip_length_delimited_ReadReturn.ReadPayload'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ReadReturn.ReadPayload'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

'skip_group_ReadReturn.ReadPayload'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ReadReturn.ReadPayload'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

'skip_32_ReadReturn.ReadPayload'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ReadReturn.ReadPayload'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_64_ReadReturn.ReadPayload'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ReadReturn.ReadPayload'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

d_msg_ReadReturn(Bin, TrUserData) ->
    dfp_read_field_def_ReadReturn(Bin, 0, 0,
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ReadReturn(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_ReadReturn_abort(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_ReadReturn(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_ReadReturn_payload(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_ReadReturn(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_ReadReturn(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_ReadReturn(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_ReadReturn(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReadReturn(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_ReadReturn(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ReadReturn_abort(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_ReadReturn_payload(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReadReturn(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_ReadReturn(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ReadReturn(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_ReadReturn(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_ReadReturn(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ReadReturn(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_ReadReturn_abort(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ReadReturn_abort(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_ReadReturn_abort(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ReadReturn(RestF, 0, 0,
				  id({abort, NewFValue}, TrUserData),
				  TrUserData).

d_field_ReadReturn_payload(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ReadReturn_payload(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_ReadReturn_payload(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_ReadReturn.ReadPayload'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ReadReturn(RestF, 0, 0,
				  case Prev of
				    '$undef' ->
					id({payload, NewFValue}, TrUserData);
				    {payload, MVPrev} ->
					id({payload,
					    'merge_msg_ReadReturn.ReadPayload'(MVPrev,
									       NewFValue,
									       TrUserData)},
					   TrUserData);
				    _ -> id({payload, NewFValue}, TrUserData)
				  end,
				  TrUserData).

skip_varint_ReadReturn(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_ReadReturn(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ReadReturn(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ReadReturn(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_ReadReturn(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReadReturn(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ReadReturn(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadReturn(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_ReadReturn(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadReturn(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_ReadReturn(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_ReadReturn(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_ReadReturn(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_ReadReturn(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_msg_Prepare(Bin, TrUserData) ->
    dfp_read_field_def_Prepare(Bin, 0, 0,
			       id(<<>>, TrUserData), id(<<>>, TrUserData),
			       id(<<>>, TrUserData), id(0, TrUserData),
			       TrUserData).

dfp_read_field_def_Prepare(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Prepare_partition(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_Prepare(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Prepare_transaction_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_Prepare(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Prepare_writeset(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_Prepare(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Prepare_partition_version(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Prepare(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, _) ->
    #{partition => F@_1, transaction_id => F@_2,
      writeset => F@_3, partition_version => F@_4};
dfp_read_field_def_Prepare(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Prepare(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

dg_read_field_def_Prepare(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Prepare(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Prepare(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Prepare_partition(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      18 ->
	  d_field_Prepare_transaction_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      26 ->
	  d_field_Prepare_writeset(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      32 ->
	  d_field_Prepare_partition_version(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Prepare(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    1 ->
		skip_64_Prepare(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData);
	    2 ->
		skip_length_delimited_Prepare(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_Prepare(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
	    5 ->
		skip_32_Prepare(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData)
	  end
    end;
dg_read_field_def_Prepare(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, _) ->
    #{partition => F@_1, transaction_id => F@_2,
      writeset => F@_3, partition_version => F@_4}.

d_field_Prepare_partition(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Prepare_partition(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Prepare_partition(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Prepare(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, TrUserData).

d_field_Prepare_transaction_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Prepare_transaction_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
d_field_Prepare_transaction_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Prepare(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, TrUserData).

d_field_Prepare_writeset(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Prepare_writeset(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Prepare_writeset(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Prepare(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, TrUserData).

d_field_Prepare_partition_version(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Prepare_partition_version(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_Prepare_partition_version(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Prepare(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, TrUserData).

skip_varint_Prepare(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Prepare(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
skip_varint_Prepare(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Prepare(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_length_delimited_Prepare(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Prepare(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
skip_length_delimited_Prepare(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Prepare(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_group_Prepare(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Prepare(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_32_Prepare(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Prepare(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_64_Prepare(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Prepare(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

'd_msg_PrepareNode.PrepareSingle'(Bin, TrUserData) ->
    'dfp_read_field_def_PrepareNode.PrepareSingle'(Bin, 0,
						   0, id(<<>>, TrUserData),
						   id(<<>>, TrUserData),
						   id(0, TrUserData),
						   TrUserData).

'dfp_read_field_def_PrepareNode.PrepareSingle'(<<10,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    'd_field_PrepareNode.PrepareSingle_partition'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'dfp_read_field_def_PrepareNode.PrepareSingle'(<<18,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    'd_field_PrepareNode.PrepareSingle_writeset'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData);
'dfp_read_field_def_PrepareNode.PrepareSingle'(<<24,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    'd_field_PrepareNode.PrepareSingle_version'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
'dfp_read_field_def_PrepareNode.PrepareSingle'(<<>>, 0,
					       0, F@_1, F@_2, F@_3, _) ->
    #{partition => F@_1, writeset => F@_2, version => F@_3};
'dfp_read_field_def_PrepareNode.PrepareSingle'(Other,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    'dg_read_field_def_PrepareNode.PrepareSingle'(Other, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

'dg_read_field_def_PrepareNode.PrepareSingle'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_PrepareNode.PrepareSingle'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
'dg_read_field_def_PrepareNode.PrepareSingle'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_PrepareNode.PrepareSingle_partition'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							TrUserData);
      18 ->
	  'd_field_PrepareNode.PrepareSingle_writeset'(Rest, 0, 0,
						       F@_1, F@_2, F@_3,
						       TrUserData);
      24 ->
	  'd_field_PrepareNode.PrepareSingle_version'(Rest, 0, 0,
						      F@_1, F@_2, F@_3,
						      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_PrepareNode.PrepareSingle'(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    1 ->
		'skip_64_PrepareNode.PrepareSingle'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_PrepareNode.PrepareSingle'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  TrUserData);
	    3 ->
		'skip_group_PrepareNode.PrepareSingle'(Rest, Key bsr 3,
						       0, F@_1, F@_2, F@_3,
						       TrUserData);
	    5 ->
		'skip_32_PrepareNode.PrepareSingle'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_PrepareNode.PrepareSingle'(<<>>, 0,
					      0, F@_1, F@_2, F@_3, _) ->
    #{partition => F@_1, writeset => F@_2, version => F@_3}.

'd_field_PrepareNode.PrepareSingle_partition'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    'd_field_PrepareNode.PrepareSingle_partition'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
'd_field_PrepareNode.PrepareSingle_partition'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, F@_3,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_PrepareNode.PrepareSingle'(RestF, 0,
						   0, NewFValue, F@_2, F@_3,
						   TrUserData).

'd_field_PrepareNode.PrepareSingle_writeset'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    'd_field_PrepareNode.PrepareSingle_writeset'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
'd_field_PrepareNode.PrepareSingle_writeset'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, _, F@_3,
					     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_PrepareNode.PrepareSingle'(RestF, 0,
						   0, F@_1, NewFValue, F@_3,
						   TrUserData).

'd_field_PrepareNode.PrepareSingle_version'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    'd_field_PrepareNode.PrepareSingle_version'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
'd_field_PrepareNode.PrepareSingle_version'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, _,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_PrepareNode.PrepareSingle'(RestF, 0,
						   0, F@_1, F@_2, NewFValue,
						   TrUserData).

'skip_varint_PrepareNode.PrepareSingle'(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_PrepareNode.PrepareSingle'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
'skip_varint_PrepareNode.PrepareSingle'(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_PrepareNode.PrepareSingle'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

'skip_length_delimited_PrepareNode.PrepareSingle'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 57 ->
    'skip_length_delimited_PrepareNode.PrepareSingle'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
'skip_length_delimited_PrepareNode.PrepareSingle'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_PrepareNode.PrepareSingle'(Rest2, 0,
						   0, F@_1, F@_2, F@_3,
						   TrUserData).

'skip_group_PrepareNode.PrepareSingle'(Bin, FNum, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_PrepareNode.PrepareSingle'(Rest, 0,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

'skip_32_PrepareNode.PrepareSingle'(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_PrepareNode.PrepareSingle'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

'skip_64_PrepareNode.PrepareSingle'(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_PrepareNode.PrepareSingle'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

d_msg_PrepareNode(Bin, TrUserData) ->
    dfp_read_field_def_PrepareNode(Bin, 0, 0,
				   id(<<>>, TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_PrepareNode(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_PrepareNode_transaction_id(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_PrepareNode(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_PrepareNode_prepares(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_PrepareNode(<<>>, 0, 0, F@_1, R1,
			       TrUserData) ->
    S1 = #{transaction_id => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{prepares => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_PrepareNode(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_PrepareNode(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_PrepareNode(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PrepareNode(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_PrepareNode(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_PrepareNode_transaction_id(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      18 ->
	  d_field_PrepareNode_prepares(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PrepareNode(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_PrepareNode(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_PrepareNode(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_PrepareNode(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_PrepareNode(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_PrepareNode(<<>>, 0, 0, F@_1, R1,
			      TrUserData) ->
    S1 = #{transaction_id => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{prepares => lists_reverse(R1, TrUserData)}
    end.

d_field_PrepareNode_transaction_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PrepareNode_transaction_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_PrepareNode_transaction_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_PrepareNode(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_PrepareNode_prepares(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PrepareNode_prepares(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_PrepareNode_prepares(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_PrepareNode.PrepareSingle'(Bs,
								 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_PrepareNode(RestF, 0, 0, F@_1,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_PrepareNode(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_PrepareNode(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_PrepareNode(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PrepareNode(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_PrepareNode(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_PrepareNode(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_PrepareNode(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PrepareNode(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_PrepareNode(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PrepareNode(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_PrepareNode(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_PrepareNode(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_PrepareNode(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_PrepareNode(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_Vote(Bin, TrUserData) ->
    dfp_read_field_def_Vote(Bin, 0, 0, id(<<>>, TrUserData),
			    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Vote(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_Vote_partition(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_Vote(<<16, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_Vote_abort(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_Vote(<<24, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_Vote_seq_number(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_Vote(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{partition => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{payload => F@_2}
    end;
dfp_read_field_def_Vote(Other, Z1, Z2, F@_1, F@_2,
			TrUserData) ->
    dg_read_field_def_Vote(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData).

dg_read_field_def_Vote(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Vote(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
dg_read_field_def_Vote(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Vote_partition(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      16 ->
	  d_field_Vote_abort(Rest, 0, 0, F@_1, F@_2, TrUserData);
      24 ->
	  d_field_Vote_seq_number(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Vote(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Vote(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Vote(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    3 ->
		skip_group_Vote(Rest, Key bsr 3, 0, F@_1, F@_2,
				TrUserData);
	    5 -> skip_32_Vote(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Vote(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{partition => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{payload => F@_2}
    end.

d_field_Vote_partition(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Vote_partition(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_Vote_partition(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Vote(RestF, 0, 0, NewFValue, F@_2,
			    TrUserData).

d_field_Vote_abort(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Vote_abort(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_Vote_abort(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Vote(RestF, 0, 0, F@_1,
			    id({abort, NewFValue}, TrUserData), TrUserData).

d_field_Vote_seq_number(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Vote_seq_number(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_Vote_seq_number(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Vote(RestF, 0, 0, F@_1,
			    id({seq_number, NewFValue}, TrUserData),
			    TrUserData).

skip_varint_Vote(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    skip_varint_Vote(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Vote(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Vote(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_length_delimited_Vote(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Vote(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
skip_length_delimited_Vote(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Vote(Rest2, 0, 0, F@_1, F@_2,
			    TrUserData).

skip_group_Vote(Bin, FNum, Z2, F@_1, F@_2,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Vote(Rest, 0, Z2, F@_1, F@_2,
			    TrUserData).

skip_32_Vote(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_Vote(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_64_Vote(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_Vote(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

d_msg_VoteBatch(Bin, TrUserData) ->
    dfp_read_field_def_VoteBatch(Bin, 0, 0,
				 id([], TrUserData), TrUserData).

dfp_read_field_def_VoteBatch(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_VoteBatch_votes(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_VoteBatch(<<>>, 0, 0, R1,
			     TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{votes => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_VoteBatch(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_VoteBatch(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_VoteBatch(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VoteBatch(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_VoteBatch(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_VoteBatch_votes(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VoteBatch(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_VoteBatch(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_VoteBatch(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_VoteBatch(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_VoteBatch(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_VoteBatch(<<>>, 0, 0, R1,
			    TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{votes => lists_reverse(R1, TrUserData)}
    end.

d_field_VoteBatch_votes(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_VoteBatch_votes(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_VoteBatch_votes(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Vote(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_VoteBatch(RestF, 0, 0,
				 cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_VoteBatch(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_VoteBatch(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_VoteBatch(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_VoteBatch(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_VoteBatch(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_VoteBatch(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_VoteBatch(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VoteBatch(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_VoteBatch(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_VoteBatch(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_VoteBatch(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_VoteBatch(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_VoteBatch(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_VoteBatch(Rest, Z1, Z2, F@_1,
				 TrUserData).

'd_msg_Decide.DecideAbort'(Bin, TrUserData) ->
    'dfp_read_field_def_Decide.DecideAbort'(Bin, 0, 0,
					    TrUserData).

'dfp_read_field_def_Decide.DecideAbort'(<<>>, 0, 0,
					_) ->
    #{};
'dfp_read_field_def_Decide.DecideAbort'(Other, Z1, Z2,
					TrUserData) ->
    'dg_read_field_def_Decide.DecideAbort'(Other, Z1, Z2,
					   TrUserData).

'dg_read_field_def_Decide.DecideAbort'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Decide.DecideAbort'(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
'dg_read_field_def_Decide.DecideAbort'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  'skip_varint_Decide.DecideAbort'(Rest, 0, 0,
					   TrUserData);
      1 ->
	  'skip_64_Decide.DecideAbort'(Rest, 0, 0, TrUserData);
      2 ->
	  'skip_length_delimited_Decide.DecideAbort'(Rest, 0, 0,
						     TrUserData);
      3 ->
	  'skip_group_Decide.DecideAbort'(Rest, Key bsr 3, 0,
					  TrUserData);
      5 ->
	  'skip_32_Decide.DecideAbort'(Rest, 0, 0, TrUserData)
    end;
'dg_read_field_def_Decide.DecideAbort'(<<>>, 0, 0, _) ->
    #{}.

'skip_varint_Decide.DecideAbort'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    'skip_varint_Decide.DecideAbort'(Rest, Z1, Z2,
				     TrUserData);
'skip_varint_Decide.DecideAbort'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    'dfp_read_field_def_Decide.DecideAbort'(Rest, Z1, Z2,
					    TrUserData).

'skip_length_delimited_Decide.DecideAbort'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Decide.DecideAbort'(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
'skip_length_delimited_Decide.DecideAbort'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Decide.DecideAbort'(Rest2, 0, 0,
					    TrUserData).

'skip_group_Decide.DecideAbort'(Bin, FNum, Z2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Decide.DecideAbort'(Rest, 0, Z2,
					    TrUserData).

'skip_32_Decide.DecideAbort'(<<_:32, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    'dfp_read_field_def_Decide.DecideAbort'(Rest, Z1, Z2,
					    TrUserData).

'skip_64_Decide.DecideAbort'(<<_:64, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    'dfp_read_field_def_Decide.DecideAbort'(Rest, Z1, Z2,
					    TrUserData).

'd_msg_Decide.DecideCommit'(Bin, TrUserData) ->
    'dfp_read_field_def_Decide.DecideCommit'(Bin, 0, 0,
					     id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_Decide.DecideCommit'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    'd_field_Decide.DecideCommit_commit_vc'(Rest, Z1, Z2,
					    F@_1, TrUserData);
'dfp_read_field_def_Decide.DecideCommit'(<<>>, 0, 0,
					 F@_1, _) ->
    #{commit_vc => F@_1};
'dfp_read_field_def_Decide.DecideCommit'(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    'dg_read_field_def_Decide.DecideCommit'(Other, Z1, Z2,
					    F@_1, TrUserData).

'dg_read_field_def_Decide.DecideCommit'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_Decide.DecideCommit'(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
'dg_read_field_def_Decide.DecideCommit'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Decide.DecideCommit_commit_vc'(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Decide.DecideCommit'(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		'skip_64_Decide.DecideCommit'(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		'skip_length_delimited_Decide.DecideCommit'(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		'skip_group_Decide.DecideCommit'(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		'skip_32_Decide.DecideCommit'(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
'dg_read_field_def_Decide.DecideCommit'(<<>>, 0, 0,
					F@_1, _) ->
    #{commit_vc => F@_1}.

'd_field_Decide.DecideCommit_commit_vc'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_Decide.DecideCommit_commit_vc'(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
'd_field_Decide.DecideCommit_commit_vc'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_Decide.DecideCommit'(RestF, 0, 0,
					     NewFValue, TrUserData).

'skip_varint_Decide.DecideCommit'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_Decide.DecideCommit'(Rest, Z1, Z2, F@_1,
				      TrUserData);
'skip_varint_Decide.DecideCommit'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_Decide.DecideCommit'(Rest, Z1, Z2,
					     F@_1, TrUserData).

'skip_length_delimited_Decide.DecideCommit'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_Decide.DecideCommit'(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
'skip_length_delimited_Decide.DecideCommit'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Decide.DecideCommit'(Rest2, 0, 0,
					     F@_1, TrUserData).

'skip_group_Decide.DecideCommit'(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_Decide.DecideCommit'(Rest, 0, Z2,
					     F@_1, TrUserData).

'skip_32_Decide.DecideCommit'(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_Decide.DecideCommit'(Rest, Z1, Z2,
					     F@_1, TrUserData).

'skip_64_Decide.DecideCommit'(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_Decide.DecideCommit'(Rest, Z1, Z2,
					     F@_1, TrUserData).

d_msg_Decide(Bin, TrUserData) ->
    dfp_read_field_def_Decide(Bin, 0, 0,
			      id(<<>>, TrUserData), id(<<>>, TrUserData),
			      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Decide(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Decide_partition(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_Decide(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Decide_transaction_id(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_Decide(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Decide_abort(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_Decide(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Decide_commit(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_Decide(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    S1 = #{partition => F@_1, transaction_id => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{payload => F@_3}
    end;
dfp_read_field_def_Decide(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    dg_read_field_def_Decide(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData).

dg_read_field_def_Decide(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Decide(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Decide(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Decide_partition(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      18 ->
	  d_field_Decide_transaction_id(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      26 ->
	  d_field_Decide_abort(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      34 ->
	  d_field_Decide_commit(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Decide(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    1 ->
		skip_64_Decide(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    2 ->
		skip_length_delimited_Decide(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    3 ->
		skip_group_Decide(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    5 ->
		skip_32_Decide(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_Decide(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 _) ->
    S1 = #{partition => F@_1, transaction_id => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{payload => F@_3}
    end.

d_field_Decide_partition(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Decide_partition(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_Decide_partition(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Decide(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, TrUserData).

d_field_Decide_transaction_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Decide_transaction_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_Decide_transaction_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Decide(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, TrUserData).

d_field_Decide_abort(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Decide_abort(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_Decide_abort(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_Decide.DecideAbort'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Decide(RestF, 0, 0, F@_1, F@_2,
			      case Prev of
				'$undef' -> id({abort, NewFValue}, TrUserData);
				{abort, MVPrev} ->
				    id({abort,
					'merge_msg_Decide.DecideAbort'(MVPrev,
								       NewFValue,
								       TrUserData)},
				       TrUserData);
				_ -> id({abort, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Decide_commit(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Decide_commit(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_Decide_commit(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_Decide.DecideCommit'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Decide(RestF, 0, 0, F@_1, F@_2,
			      case Prev of
				'$undef' -> id({commit, NewFValue}, TrUserData);
				{commit, MVPrev} ->
				    id({commit,
					'merge_msg_Decide.DecideCommit'(MVPrev,
									NewFValue,
									TrUserData)},
				       TrUserData);
				_ -> id({commit, NewFValue}, TrUserData)
			      end,
			      TrUserData).

skip_varint_Decide(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Decide(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
skip_varint_Decide(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Decide(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_length_delimited_Decide(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Decide(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Decide(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Decide(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData).

skip_group_Decide(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Decide(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      TrUserData).

skip_32_Decide(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Decide(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_64_Decide(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Decide(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ConnectRequest' ->
	  merge_msg_ConnectRequest(Prev, New, TrUserData);
      'ConnectResponse' ->
	  merge_msg_ConnectResponse(Prev, New, TrUserData);
      'ReadRequest' ->
	  merge_msg_ReadRequest(Prev, New, TrUserData);
      'ReadReturn.ReadPayload' ->
	  'merge_msg_ReadReturn.ReadPayload'(Prev, New,
					     TrUserData);
      'ReadReturn' ->
	  merge_msg_ReadReturn(Prev, New, TrUserData);
      'Prepare' -> merge_msg_Prepare(Prev, New, TrUserData);
      'PrepareNode.PrepareSingle' ->
	  'merge_msg_PrepareNode.PrepareSingle'(Prev, New,
						TrUserData);
      'PrepareNode' ->
	  merge_msg_PrepareNode(Prev, New, TrUserData);
      'Vote' -> merge_msg_Vote(Prev, New, TrUserData);
      'VoteBatch' ->
	  merge_msg_VoteBatch(Prev, New, TrUserData);
      'Decide.DecideAbort' ->
	  'merge_msg_Decide.DecideAbort'(Prev, New, TrUserData);
      'Decide.DecideCommit' ->
	  'merge_msg_Decide.DecideCommit'(Prev, New, TrUserData);
      'Decide' -> merge_msg_Decide(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_ConnectRequest/3}).
merge_msg_ConnectRequest(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_ConnectResponse/3}).
merge_msg_ConnectResponse(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{num_partitions := NFnum_partitions}} ->
	       S1#{num_partitions => NFnum_partitions};
	   {#{num_partitions := PFnum_partitions}, _} ->
	       S1#{num_partitions => PFnum_partitions};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{ring_payload := NFring_payload}} ->
	  S2#{ring_payload => NFring_payload};
      {#{ring_payload := PFring_payload}, _} ->
	  S2#{ring_payload => PFring_payload};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_ReadRequest/3}).
merge_msg_ReadRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{partition := NFpartition}} ->
	       S1#{partition => NFpartition};
	   {#{partition := PFpartition}, _} ->
	       S1#{partition => PFpartition};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S2#{key => NFkey};
	   {#{key := PFkey}, _} -> S2#{key => PFkey};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{vc_aggr := NFvc_aggr}} ->
	       S3#{vc_aggr => NFvc_aggr};
	   {#{vc_aggr := PFvc_aggr}, _} ->
	       S3#{vc_aggr => PFvc_aggr};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{has_read := NFhas_read}} ->
	  S4#{has_read => NFhas_read};
      {#{has_read := PFhas_read}, _} ->
	  S4#{has_read => PFhas_read};
      _ -> S4
    end.

-compile({nowarn_unused_function,'merge_msg_ReadReturn.ReadPayload'/3}).
'merge_msg_ReadReturn.ReadPayload'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{value := NFvalue}} -> S1#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S1#{value => PFvalue};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{version_vc := NFversion_vc}} ->
	       S2#{version_vc => NFversion_vc};
	   {#{version_vc := PFversion_vc}, _} ->
	       S2#{version_vc => PFversion_vc};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{max_vc := NFmax_vc}} -> S3#{max_vc => NFmax_vc};
      {#{max_vc := PFmax_vc}, _} -> S3#{max_vc => PFmax_vc};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_ReadReturn/3}).
merge_msg_ReadReturn(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{resp := {payload, OPFresp}},
       #{resp := {payload, ONFresp}}} ->
	  S1#{resp =>
		  {payload,
		   'merge_msg_ReadReturn.ReadPayload'(OPFresp, ONFresp,
						      TrUserData)}};
      {_, #{resp := NFresp}} -> S1#{resp => NFresp};
      {#{resp := PFresp}, _} -> S1#{resp => PFresp};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Prepare/3}).
merge_msg_Prepare(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{partition := NFpartition}} ->
	       S1#{partition => NFpartition};
	   {#{partition := PFpartition}, _} ->
	       S1#{partition => PFpartition};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{transaction_id := NFtransaction_id}} ->
	       S2#{transaction_id => NFtransaction_id};
	   {#{transaction_id := PFtransaction_id}, _} ->
	       S2#{transaction_id => PFtransaction_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{writeset := NFwriteset}} ->
	       S3#{writeset => NFwriteset};
	   {#{writeset := PFwriteset}, _} ->
	       S3#{writeset => PFwriteset};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{partition_version := NFpartition_version}} ->
	  S4#{partition_version => NFpartition_version};
      {#{partition_version := PFpartition_version}, _} ->
	  S4#{partition_version => PFpartition_version};
      _ -> S4
    end.

-compile({nowarn_unused_function,'merge_msg_PrepareNode.PrepareSingle'/3}).
'merge_msg_PrepareNode.PrepareSingle'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{partition := NFpartition}} ->
	       S1#{partition => NFpartition};
	   {#{partition := PFpartition}, _} ->
	       S1#{partition => PFpartition};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{writeset := NFwriteset}} ->
	       S2#{writeset => NFwriteset};
	   {#{writeset := PFwriteset}, _} ->
	       S2#{writeset => PFwriteset};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{version := NFversion}} ->
	  S3#{version => NFversion};
      {#{version := PFversion}, _} ->
	  S3#{version => PFversion};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_PrepareNode/3}).
merge_msg_PrepareNode(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{transaction_id := NFtransaction_id}} ->
	       S1#{transaction_id => NFtransaction_id};
	   {#{transaction_id := PFtransaction_id}, _} ->
	       S1#{transaction_id => PFtransaction_id};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{prepares := PFprepares},
       #{prepares := NFprepares}} ->
	  S2#{prepares =>
		  'erlang_++'(PFprepares, NFprepares, TrUserData)};
      {_, #{prepares := NFprepares}} ->
	  S2#{prepares => NFprepares};
      {#{prepares := PFprepares}, _} ->
	  S2#{prepares => PFprepares};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_Vote/3}).
merge_msg_Vote(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{partition := NFpartition}} ->
	       S1#{partition => NFpartition};
	   {#{partition := PFpartition}, _} ->
	       S1#{partition => PFpartition};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{payload := NFpayload}} ->
	  S2#{payload => NFpayload};
      {#{payload := PFpayload}, _} ->
	  S2#{payload => PFpayload};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_VoteBatch/3}).
merge_msg_VoteBatch(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{votes := PFvotes}, #{votes := NFvotes}} ->
	  S1#{votes => 'erlang_++'(PFvotes, NFvotes, TrUserData)};
      {_, #{votes := NFvotes}} -> S1#{votes => NFvotes};
      {#{votes := PFvotes}, _} -> S1#{votes => PFvotes};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,'merge_msg_Decide.DecideAbort'/3}).
'merge_msg_Decide.DecideAbort'(_Prev, New,
			       _TrUserData) ->
    New.

-compile({nowarn_unused_function,'merge_msg_Decide.DecideCommit'/3}).
'merge_msg_Decide.DecideCommit'(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{commit_vc := NFcommit_vc}} ->
	  S1#{commit_vc => NFcommit_vc};
      {#{commit_vc := PFcommit_vc}, _} ->
	  S1#{commit_vc => PFcommit_vc};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Decide/3}).
merge_msg_Decide(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{partition := NFpartition}} ->
	       S1#{partition => NFpartition};
	   {#{partition := PFpartition}, _} ->
	       S1#{partition => PFpartition};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{transaction_id := NFtransaction_id}} ->
	       S2#{transaction_id => NFtransaction_id};
	   {#{transaction_id := PFtransaction_id}, _} ->
	       S2#{transaction_id => PFtransaction_id};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{payload := {abort, OPFpayload}},
       #{payload := {abort, ONFpayload}}} ->
	  S3#{payload =>
		  {abort,
		   'merge_msg_Decide.DecideAbort'(OPFpayload, ONFpayload,
						  TrUserData)}};
      {#{payload := {commit, OPFpayload}},
       #{payload := {commit, ONFpayload}}} ->
	  S3#{payload =>
		  {commit,
		   'merge_msg_Decide.DecideCommit'(OPFpayload, ONFpayload,
						   TrUserData)}};
      {_, #{payload := NFpayload}} ->
	  S3#{payload => NFpayload};
      {#{payload := PFpayload}, _} ->
	  S3#{payload => PFpayload};
      {_, _} -> S3
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ConnectRequest' ->
	  v_msg_ConnectRequest(Msg, [MsgName], TrUserData);
      'ConnectResponse' ->
	  v_msg_ConnectResponse(Msg, [MsgName], TrUserData);
      'ReadRequest' ->
	  v_msg_ReadRequest(Msg, [MsgName], TrUserData);
      'ReadReturn.ReadPayload' ->
	  'v_msg_ReadReturn.ReadPayload'(Msg, [MsgName],
					 TrUserData);
      'ReadReturn' ->
	  v_msg_ReadReturn(Msg, [MsgName], TrUserData);
      'Prepare' -> v_msg_Prepare(Msg, [MsgName], TrUserData);
      'PrepareNode.PrepareSingle' ->
	  'v_msg_PrepareNode.PrepareSingle'(Msg, [MsgName],
					    TrUserData);
      'PrepareNode' ->
	  v_msg_PrepareNode(Msg, [MsgName], TrUserData);
      'Vote' -> v_msg_Vote(Msg, [MsgName], TrUserData);
      'VoteBatch' ->
	  v_msg_VoteBatch(Msg, [MsgName], TrUserData);
      'Decide.DecideAbort' ->
	  'v_msg_Decide.DecideAbort'(Msg, [MsgName], TrUserData);
      'Decide.DecideCommit' ->
	  'v_msg_Decide.DecideCommit'(Msg, [MsgName], TrUserData);
      'Decide' -> v_msg_Decide(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_ConnectRequest/3}).
-dialyzer({nowarn_function,v_msg_ConnectRequest/3}).
v_msg_ConnectRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ConnectRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ConnectRequest'},
		  M, Path);
v_msg_ConnectRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ConnectRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ConnectResponse/3}).
-dialyzer({nowarn_function,v_msg_ConnectResponse/3}).
v_msg_ConnectResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{num_partitions := F1} ->
	  v_type_uint32(F1, [num_partitions | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{ring_payload := F2} ->
	  v_type_bytes(F2, [ring_payload | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (num_partitions) -> ok;
		      (ring_payload) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ConnectResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ConnectResponse'},
		  M, Path);
v_msg_ConnectResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ConnectResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ReadRequest/3}).
-dialyzer({nowarn_function,v_msg_ReadRequest/3}).
v_msg_ReadRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{partition := F1} ->
	  v_type_bytes(F1, [partition | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{key := F2} ->
	  v_type_bytes(F2, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{vc_aggr := F3} ->
	  v_type_bytes(F3, [vc_aggr | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{has_read := F4} ->
	  v_type_bytes(F4, [has_read | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
		      (key) -> ok;
		      (vc_aggr) -> ok;
		      (has_read) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ReadRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReadRequest'},
		  M, Path);
v_msg_ReadRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReadRequest'}, X, Path).

-compile({nowarn_unused_function,'v_msg_ReadReturn.ReadPayload'/3}).
-dialyzer({nowarn_function,'v_msg_ReadReturn.ReadPayload'/3}).
'v_msg_ReadReturn.ReadPayload'(#{} = M, Path,
			       TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_bytes(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{version_vc := F2} ->
	  v_type_bytes(F2, [version_vc | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{max_vc := F3} ->
	  v_type_bytes(F3, [max_vc | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (version_vc) -> ok;
		      (max_vc) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_ReadReturn.ReadPayload'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReadReturn.ReadPayload'},
		  M, Path);
'v_msg_ReadReturn.ReadPayload'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReadReturn.ReadPayload'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ReadReturn/3}).
-dialyzer({nowarn_function,v_msg_ReadReturn/3}).
v_msg_ReadReturn(#{} = M, Path, TrUserData) ->
    case M of
      #{resp := {abort, OF1}} ->
	  v_type_uint32(OF1, [abort, resp | Path], TrUserData);
      #{resp := {payload, OF1}} ->
	  'v_msg_ReadReturn.ReadPayload'(OF1,
					 [payload, resp | Path], TrUserData);
      #{resp := F1} ->
	  mk_type_error(invalid_oneof, F1, [resp | Path]);
      _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ReadReturn(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReadReturn'},
		  M, Path);
v_msg_ReadReturn(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReadReturn'}, X, Path).

-compile({nowarn_unused_function,v_msg_Prepare/3}).
-dialyzer({nowarn_function,v_msg_Prepare/3}).
v_msg_Prepare(#{} = M, Path, TrUserData) ->
    case M of
      #{partition := F1} ->
	  v_type_bytes(F1, [partition | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{transaction_id := F2} ->
	  v_type_bytes(F2, [transaction_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{writeset := F3} ->
	  v_type_bytes(F3, [writeset | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{partition_version := F4} ->
	  v_type_uint64(F4, [partition_version | Path],
			TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
		      (transaction_id) -> ok;
		      (writeset) -> ok;
		      (partition_version) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Prepare(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Prepare'},
		  M, Path);
v_msg_Prepare(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Prepare'}, X, Path).

-compile({nowarn_unused_function,'v_msg_PrepareNode.PrepareSingle'/3}).
-dialyzer({nowarn_function,'v_msg_PrepareNode.PrepareSingle'/3}).
'v_msg_PrepareNode.PrepareSingle'(#{} = M, Path,
				  TrUserData) ->
    case M of
      #{partition := F1} ->
	  v_type_bytes(F1, [partition | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{writeset := F2} ->
	  v_type_bytes(F2, [writeset | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{version := F3} ->
	  v_type_uint64(F3, [version | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
		      (writeset) -> ok;
		      (version) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_PrepareNode.PrepareSingle'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'PrepareNode.PrepareSingle'},
		  M, Path);
'v_msg_PrepareNode.PrepareSingle'(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'PrepareNode.PrepareSingle'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_PrepareNode/3}).
-dialyzer({nowarn_function,v_msg_PrepareNode/3}).
v_msg_PrepareNode(#{} = M, Path, TrUserData) ->
    case M of
      #{transaction_id := F1} ->
	  v_type_bytes(F1, [transaction_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{prepares := F2} ->
	  if is_list(F2) ->
		 _ = ['v_msg_PrepareNode.PrepareSingle'(Elem,
							[prepares | Path],
							TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, 'PrepareNode.PrepareSingle'}},
			       F2, [prepares | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (transaction_id) -> ok;
		      (prepares) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_PrepareNode(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'PrepareNode'},
		  M, Path);
v_msg_PrepareNode(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PrepareNode'}, X, Path).

-compile({nowarn_unused_function,v_msg_Vote/3}).
-dialyzer({nowarn_function,v_msg_Vote/3}).
v_msg_Vote(#{} = M, Path, TrUserData) ->
    case M of
      #{partition := F1} ->
	  v_type_bytes(F1, [partition | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{payload := {abort, OF2}} ->
	  v_type_uint32(OF2, [abort, payload | Path], TrUserData);
      #{payload := {seq_number, OF2}} ->
	  v_type_uint64(OF2, [seq_number, payload | Path],
			TrUserData);
      #{payload := F2} ->
	  mk_type_error(invalid_oneof, F2, [payload | Path]);
      _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
		      (payload) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Vote(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Vote'},
		  M, Path);
v_msg_Vote(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Vote'}, X, Path).

-compile({nowarn_unused_function,v_msg_VoteBatch/3}).
-dialyzer({nowarn_function,v_msg_VoteBatch/3}).
v_msg_VoteBatch(#{} = M, Path, TrUserData) ->
    case M of
      #{votes := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_Vote(Elem, [votes | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'Vote'}}, F1,
			       [votes | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (votes) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_VoteBatch(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'VoteBatch'},
		  M, Path);
v_msg_VoteBatch(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'VoteBatch'}, X, Path).

-compile({nowarn_unused_function,'v_msg_Decide.DecideAbort'/3}).
-dialyzer({nowarn_function,'v_msg_Decide.DecideAbort'/3}).
'v_msg_Decide.DecideAbort'(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_Decide.DecideAbort'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Decide.DecideAbort'},
		  M, Path);
'v_msg_Decide.DecideAbort'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Decide.DecideAbort'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_Decide.DecideCommit'/3}).
-dialyzer({nowarn_function,'v_msg_Decide.DecideCommit'/3}).
'v_msg_Decide.DecideCommit'(#{} = M, Path,
			    TrUserData) ->
    case M of
      #{commit_vc := F1} ->
	  v_type_bytes(F1, [commit_vc | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (commit_vc) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_Decide.DecideCommit'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Decide.DecideCommit'},
		  M, Path);
'v_msg_Decide.DecideCommit'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Decide.DecideCommit'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Decide/3}).
-dialyzer({nowarn_function,v_msg_Decide/3}).
v_msg_Decide(#{} = M, Path, TrUserData) ->
    case M of
      #{partition := F1} ->
	  v_type_bytes(F1, [partition | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{transaction_id := F2} ->
	  v_type_bytes(F2, [transaction_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{payload := {abort, OF3}} ->
	  'v_msg_Decide.DecideAbort'(OF3, [abort, payload | Path],
				     TrUserData);
      #{payload := {commit, OF3}} ->
	  'v_msg_Decide.DecideCommit'(OF3,
				      [commit, payload | Path], TrUserData);
      #{payload := F3} ->
	  mk_type_error(invalid_oneof, F3, [payload | Path]);
      _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
		      (transaction_id) -> ok;
		      (payload) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Decide(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Decide'},
		  M, Path);
v_msg_Decide(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Decide'}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'ConnectRequest'}, []},
     {{msg, 'ConnectResponse'},
      [#{name => num_partitions, fnum => 1, rnum => 2,
	 type => uint32, occurrence => optional, opts => []},
       #{name => ring_payload, fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'ReadRequest'},
      [#{name => partition, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => key, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => vc_aggr, fnum => 3, rnum => 4, type => bytes,
	 occurrence => optional, opts => []},
       #{name => has_read, fnum => 4, rnum => 5, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'ReadReturn.ReadPayload'},
      [#{name => value, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => version_vc, fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []},
       #{name => max_vc, fnum => 3, rnum => 4, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'ReadReturn'},
      [#{name => resp, rnum => 2,
	 fields =>
	     [#{name => abort, fnum => 1, rnum => 2, type => uint32,
		occurrence => optional, opts => []},
	      #{name => payload, fnum => 2, rnum => 2,
		type => {msg, 'ReadReturn.ReadPayload'},
		occurrence => optional, opts => []}]}]},
     {{msg, 'Prepare'},
      [#{name => partition, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => transaction_id, fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []},
       #{name => writeset, fnum => 3, rnum => 4, type => bytes,
	 occurrence => optional, opts => []},
       #{name => partition_version, fnum => 4, rnum => 5,
	 type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'PrepareNode.PrepareSingle'},
      [#{name => partition, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => writeset, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => version, fnum => 3, rnum => 4, type => uint64,
	 occurrence => optional, opts => []}]},
     {{msg, 'PrepareNode'},
      [#{name => transaction_id, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => prepares, fnum => 2, rnum => 3,
	 type => {msg, 'PrepareNode.PrepareSingle'},
	 occurrence => repeated, opts => []}]},
     {{msg, 'Vote'},
      [#{name => partition, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => payload, rnum => 3,
	 fields =>
	     [#{name => abort, fnum => 2, rnum => 3, type => uint32,
		occurrence => optional, opts => []},
	      #{name => seq_number, fnum => 3, rnum => 3,
		type => uint64, occurrence => optional, opts => []}]}]},
     {{msg, 'VoteBatch'},
      [#{name => votes, fnum => 1, rnum => 2,
	 type => {msg, 'Vote'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'Decide.DecideAbort'}, []},
     {{msg, 'Decide.DecideCommit'},
      [#{name => commit_vc, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'Decide'},
      [#{name => partition, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => transaction_id, fnum => 2, rnum => 3,
	 type => bytes, occurrence => optional, opts => []},
       #{name => payload, rnum => 4,
	 fields =>
	     [#{name => abort, fnum => 3, rnum => 4,
		type => {msg, 'Decide.DecideAbort'},
		occurrence => optional, opts => []},
	      #{name => commit, fnum => 4, rnum => 4,
		type => {msg, 'Decide.DecideCommit'},
		occurrence => optional, opts => []}]}]}].


get_msg_names() ->
    ['ConnectRequest', 'ConnectResponse', 'ReadRequest',
     'ReadReturn.ReadPayload', 'ReadReturn', 'Prepare',
     'PrepareNode.PrepareSingle', 'PrepareNode', 'Vote',
     'VoteBatch', 'Decide.DecideAbort',
     'Decide.DecideCommit', 'Decide'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ConnectRequest', 'ConnectResponse', 'ReadRequest',
     'ReadReturn.ReadPayload', 'ReadReturn', 'Prepare',
     'PrepareNode.PrepareSingle', 'PrepareNode', 'Vote',
     'VoteBatch', 'Decide.DecideAbort',
     'Decide.DecideCommit', 'Decide'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('ConnectRequest') -> [];
find_msg_def('ConnectResponse') ->
    [#{name => num_partitions, fnum => 1, rnum => 2,
       type => uint32, occurrence => optional, opts => []},
     #{name => ring_payload, fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []}];
find_msg_def('ReadRequest') ->
    [#{name => partition, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => key, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => vc_aggr, fnum => 3, rnum => 4, type => bytes,
       occurrence => optional, opts => []},
     #{name => has_read, fnum => 4, rnum => 5, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('ReadReturn.ReadPayload') ->
    [#{name => value, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => version_vc, fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []},
     #{name => max_vc, fnum => 3, rnum => 4, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('ReadReturn') ->
    [#{name => resp, rnum => 2,
       fields =>
	   [#{name => abort, fnum => 1, rnum => 2, type => uint32,
	      occurrence => optional, opts => []},
	    #{name => payload, fnum => 2, rnum => 2,
	      type => {msg, 'ReadReturn.ReadPayload'},
	      occurrence => optional, opts => []}]}];
find_msg_def('Prepare') ->
    [#{name => partition, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => transaction_id, fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []},
     #{name => writeset, fnum => 3, rnum => 4, type => bytes,
       occurrence => optional, opts => []},
     #{name => partition_version, fnum => 4, rnum => 5,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def('PrepareNode.PrepareSingle') ->
    [#{name => partition, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => writeset, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => version, fnum => 3, rnum => 4, type => uint64,
       occurrence => optional, opts => []}];
find_msg_def('PrepareNode') ->
    [#{name => transaction_id, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => prepares, fnum => 2, rnum => 3,
       type => {msg, 'PrepareNode.PrepareSingle'},
       occurrence => repeated, opts => []}];
find_msg_def('Vote') ->
    [#{name => partition, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => payload, rnum => 3,
       fields =>
	   [#{name => abort, fnum => 2, rnum => 3, type => uint32,
	      occurrence => optional, opts => []},
	    #{name => seq_number, fnum => 3, rnum => 3,
	      type => uint64, occurrence => optional, opts => []}]}];
find_msg_def('VoteBatch') ->
    [#{name => votes, fnum => 1, rnum => 2,
       type => {msg, 'Vote'}, occurrence => repeated,
       opts => []}];
find_msg_def('Decide.DecideAbort') -> [];
find_msg_def('Decide.DecideCommit') ->
    [#{name => commit_vc, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []}];
find_msg_def('Decide') ->
    [#{name => partition, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => transaction_id, fnum => 2, rnum => 3,
       type => bytes, occurrence => optional, opts => []},
     #{name => payload, rnum => 4,
       fields =>
	   [#{name => abort, fnum => 3, rnum => 4,
	      type => {msg, 'Decide.DecideAbort'},
	      occurrence => optional, opts => []},
	    #{name => commit, fnum => 4, rnum => 4,
	      type => {msg, 'Decide.DecideCommit'},
	      occurrence => optional, opts => []}]}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.3.3".

gpb_version_as_list() ->
    [4,3,3].
