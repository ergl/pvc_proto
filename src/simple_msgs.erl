%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.3
-module(simple_msgs).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'ReadOnlyTx'() ::
      #{keys                    => [binary()]       % = 1
       }.
-type 'CommitResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.
-type 'KeyOp'() ::
      #{key                     => binary(),        % = 1
        value                   => binary()         % = 2
       }.
-type 'ReadWriteTx'() ::
      #{ops                     => ['KeyOp'()]      % = 1
       }.
-export_type(['ReadOnlyTx'/0, 'CommitResp'/0, 'KeyOp'/0, 'ReadWriteTx'/0]).

-spec encode_msg('ReadOnlyTx'() | 'CommitResp'() | 'KeyOp'() | 'ReadWriteTx'(),'ReadOnlyTx' | 'CommitResp' | 'KeyOp' | 'ReadWriteTx') -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg('ReadOnlyTx'() | 'CommitResp'() | 'KeyOp'() | 'ReadWriteTx'(),'ReadOnlyTx' | 'CommitResp' | 'KeyOp' | 'ReadWriteTx', list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ReadOnlyTx' -> e_msg_ReadOnlyTx(Msg, TrUserData);
      'CommitResp' -> e_msg_CommitResp(Msg, TrUserData);
      'KeyOp' -> e_msg_KeyOp(Msg, TrUserData);
      'ReadWriteTx' -> e_msg_ReadWriteTx(Msg, TrUserData)
    end.



e_msg_ReadOnlyTx(Msg, TrUserData) ->
    e_msg_ReadOnlyTx(Msg, <<>>, TrUserData).


e_msg_ReadOnlyTx(#{} = M, Bin, TrUserData) ->
    case M of
      #{keys := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_ReadOnlyTx_keys(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

e_msg_CommitResp(Msg, TrUserData) ->
    e_msg_CommitResp(Msg, <<>>, TrUserData).


e_msg_CommitResp(#{} = M, Bin, TrUserData) ->
    case M of
      #{resp := {success, OF1}} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_varint(TrOF1, <<Bin/binary, 8>>)
	  end;
      #{resp := {error_reason, OF1}} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_varint(TrOF1, <<Bin/binary, 16>>)
	  end;
      _ -> Bin
    end.

e_msg_KeyOp(Msg, TrUserData) ->
    e_msg_KeyOp(Msg, <<>>, TrUserData).


e_msg_KeyOp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case iolist_size(TrF2) of
	      0 -> B1;
	      _ -> e_type_bytes(TrF2, <<B1/binary, 18>>)
	    end
	  end;
      _ -> B1
    end.

e_msg_ReadWriteTx(Msg, TrUserData) ->
    e_msg_ReadWriteTx(Msg, <<>>, TrUserData).


e_msg_ReadWriteTx(#{} = M, Bin, TrUserData) ->
    case M of
      #{ops := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_ReadWriteTx_ops(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

e_field_ReadOnlyTx_keys([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_ReadOnlyTx_keys(Rest, Bin3, TrUserData);
e_field_ReadOnlyTx_keys([], Bin, _TrUserData) -> Bin.

e_mfield_ReadWriteTx_ops(Msg, Bin, TrUserData) ->
    SubBin = e_msg_KeyOp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ReadWriteTx_ops([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ReadWriteTx_ops(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_ReadWriteTx_ops(Rest, Bin3, TrUserData);
e_field_ReadWriteTx_ops([], Bin, _TrUserData) -> Bin.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ReadOnlyTx' ->
	  try d_msg_ReadOnlyTx(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ReadOnlyTx', {Class, Reason, StackTrace}}}})
	  end;
      'CommitResp' ->
	  try d_msg_CommitResp(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'CommitResp', {Class, Reason, StackTrace}}}})
	  end;
      'KeyOp' ->
	  try d_msg_KeyOp(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'KeyOp', {Class, Reason, StackTrace}}}})
	  end;
      'ReadWriteTx' ->
	  try d_msg_ReadWriteTx(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ReadWriteTx', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_ReadOnlyTx(Bin, TrUserData) ->
    dfp_read_field_def_ReadOnlyTx(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

dfp_read_field_def_ReadOnlyTx(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_ReadOnlyTx_keys(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ReadOnlyTx(<<>>, 0, 0, R1,
			      TrUserData) ->
    #{keys => lists_reverse(R1, TrUserData)};
dfp_read_field_def_ReadOnlyTx(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_ReadOnlyTx(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_ReadOnlyTx(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReadOnlyTx(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_ReadOnlyTx(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReadOnlyTx_keys(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReadOnlyTx(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_ReadOnlyTx(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ReadOnlyTx(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_ReadOnlyTx(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_ReadOnlyTx(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ReadOnlyTx(<<>>, 0, 0, R1,
			     TrUserData) ->
    #{keys => lists_reverse(R1, TrUserData)}.

d_field_ReadOnlyTx_keys(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ReadOnlyTx_keys(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_ReadOnlyTx_keys(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_ReadOnlyTx(RestF, 0, 0,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_ReadOnlyTx(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_ReadOnlyTx(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ReadOnlyTx(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ReadOnlyTx(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_ReadOnlyTx(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReadOnlyTx(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ReadOnlyTx(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadOnlyTx(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_ReadOnlyTx(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadOnlyTx(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_ReadOnlyTx(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_ReadOnlyTx(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_ReadOnlyTx(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_ReadOnlyTx(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_msg_CommitResp(Bin, TrUserData) ->
    dfp_read_field_def_CommitResp(Bin, 0, 0,
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_CommitResp(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_CommitResp_success(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_CommitResp(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_CommitResp_error_reason(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_CommitResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_CommitResp(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_CommitResp(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_CommitResp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CommitResp(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_CommitResp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CommitResp_success(Rest, 0, 0, F@_1,
				     TrUserData);
      16 ->
	  d_field_CommitResp_error_reason(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommitResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_CommitResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_CommitResp(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_CommitResp(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_CommitResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_CommitResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_CommitResp_success(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CommitResp_success(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_CommitResp_success(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CommitResp(RestF, 0, 0,
				  {success, NewFValue}, TrUserData).

d_field_CommitResp_error_reason(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CommitResp_error_reason(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_CommitResp_error_reason(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CommitResp(RestF, 0, 0,
				  {error_reason, NewFValue}, TrUserData).

skip_varint_CommitResp(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_CommitResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_CommitResp(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_CommitResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_CommitResp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_CommitResp(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_CommitResp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommitResp(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_CommitResp(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CommitResp(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_CommitResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_CommitResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_CommitResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_CommitResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_msg_KeyOp(Bin, TrUserData) ->
    dfp_read_field_def_KeyOp(Bin, 0, 0,
			     id(<<>>, TrUserData), id(<<>>, TrUserData),
			     TrUserData).

dfp_read_field_def_KeyOp(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_KeyOp_key(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_KeyOp(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_KeyOp_value(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_KeyOp(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{key => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{value => F@_2}
    end;
dfp_read_field_def_KeyOp(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_KeyOp(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_KeyOp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_KeyOp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_KeyOp(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_KeyOp_key(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_KeyOp_value(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_KeyOp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_KeyOp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_KeyOp(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_KeyOp(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_KeyOp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_KeyOp(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{key => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{value => F@_2}
    end.

d_field_KeyOp_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_KeyOp_key(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_KeyOp_key(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_KeyOp(RestF, 0, 0, NewFValue, F@_2,
			     TrUserData).

d_field_KeyOp_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_KeyOp_value(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_KeyOp_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_KeyOp(RestF, 0, 0, F@_1, NewFValue,
			     TrUserData).

skip_varint_KeyOp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_KeyOp(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_KeyOp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_KeyOp(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_KeyOp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_KeyOp(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_KeyOp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_KeyOp(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_KeyOp(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_KeyOp(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_KeyOp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_KeyOp(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_KeyOp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_KeyOp(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

d_msg_ReadWriteTx(Bin, TrUserData) ->
    dfp_read_field_def_ReadWriteTx(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_ReadWriteTx(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_ReadWriteTx_ops(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ReadWriteTx(<<>>, 0, 0, R1,
			       TrUserData) ->
    #{ops => lists_reverse(R1, TrUserData)};
dfp_read_field_def_ReadWriteTx(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_ReadWriteTx(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_ReadWriteTx(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReadWriteTx(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ReadWriteTx(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReadWriteTx_ops(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReadWriteTx(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_ReadWriteTx(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ReadWriteTx(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_ReadWriteTx(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_ReadWriteTx(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ReadWriteTx(<<>>, 0, 0, R1,
			      TrUserData) ->
    #{ops => lists_reverse(R1, TrUserData)}.

d_field_ReadWriteTx_ops(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ReadWriteTx_ops(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_ReadWriteTx_ops(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_KeyOp(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ReadWriteTx(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_ReadWriteTx(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_ReadWriteTx(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ReadWriteTx(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ReadWriteTx(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_ReadWriteTx(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReadWriteTx(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ReadWriteTx(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadWriteTx(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_ReadWriteTx(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadWriteTx(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_ReadWriteTx(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_ReadWriteTx(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_ReadWriteTx(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_ReadWriteTx(Rest, Z1, Z2, F@_1,
				   TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ReadOnlyTx' ->
	  merge_msg_ReadOnlyTx(Prev, New, TrUserData);
      'CommitResp' ->
	  merge_msg_CommitResp(Prev, New, TrUserData);
      'KeyOp' -> merge_msg_KeyOp(Prev, New, TrUserData);
      'ReadWriteTx' ->
	  merge_msg_ReadWriteTx(Prev, New, TrUserData)
    end.

merge_msg_ReadOnlyTx(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{keys := PFkeys}, #{keys := NFkeys}} ->
	  S1#{keys => 'erlang_++'(PFkeys, NFkeys, TrUserData)};
      {_, #{keys := NFkeys}} -> S1#{keys => NFkeys};
      {#{keys := PFkeys}, _} -> S1#{keys => PFkeys};
      {_, _} -> S1
    end.

merge_msg_CommitResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{resp := NFresp}} -> S1#{resp => NFresp};
      {#{resp := PFresp}, _} -> S1#{resp => PFresp};
      _ -> S1
    end.

merge_msg_KeyOp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      _ -> S2
    end.

merge_msg_ReadWriteTx(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{ops := PFops}, #{ops := NFops}} ->
	  S1#{ops => 'erlang_++'(PFops, NFops, TrUserData)};
      {_, #{ops := NFops}} -> S1#{ops => NFops};
      {#{ops := PFops}, _} -> S1#{ops => PFops};
      {_, _} -> S1
    end.


verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ReadOnlyTx' ->
	  v_msg_ReadOnlyTx(Msg, ['ReadOnlyTx'], TrUserData);
      'CommitResp' ->
	  v_msg_CommitResp(Msg, ['CommitResp'], TrUserData);
      'KeyOp' -> v_msg_KeyOp(Msg, ['KeyOp'], TrUserData);
      'ReadWriteTx' ->
	  v_msg_ReadWriteTx(Msg, ['ReadWriteTx'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_ReadOnlyTx/3}).
v_msg_ReadOnlyTx(#{} = M, Path, _) ->
    case M of
      #{keys := F1} ->
	  if is_list(F1) ->
		 _ = [v_type_bytes(Elem, [keys | Path]) || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, bytes}, F1,
			       [keys | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (keys) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ReadOnlyTx(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReadOnlyTx'},
		  M, Path);
v_msg_ReadOnlyTx(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReadOnlyTx'}, X, Path).

-dialyzer({nowarn_function,v_msg_CommitResp/3}).
v_msg_CommitResp(#{} = M, Path, _) ->
    case M of
      #{resp := {success, OF1}} ->
	  v_type_uint32(OF1, [success, resp | Path]);
      #{resp := {error_reason, OF1}} ->
	  v_type_uint32(OF1, [error_reason, resp | Path]);
      #{resp := F1} ->
	  mk_type_error(invalid_oneof, F1, [resp | Path]);
      _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_CommitResp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'CommitResp'},
		  M, Path);
v_msg_CommitResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CommitResp'}, X, Path).

-dialyzer({nowarn_function,v_msg_KeyOp/3}).
v_msg_KeyOp(#{} = M, Path, _) ->
    case M of
      #{key := F1} -> v_type_bytes(F1, [key | Path]);
      _ -> ok
    end,
    case M of
      #{value := F2} -> v_type_bytes(F2, [value | Path]);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_KeyOp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'KeyOp'},
		  M, Path);
v_msg_KeyOp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'KeyOp'}, X, Path).

-dialyzer({nowarn_function,v_msg_ReadWriteTx/3}).
v_msg_ReadWriteTx(#{} = M, Path, TrUserData) ->
    case M of
      #{ops := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_KeyOp(Elem, [ops | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'KeyOp'}}, F1,
			       [ops | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (ops) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ReadWriteTx(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReadWriteTx'},
		  M, Path);
v_msg_ReadWriteTx(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReadWriteTx'}, X, Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'ReadOnlyTx'},
      [#{name => keys, fnum => 1, rnum => 2, type => bytes,
	 occurrence => repeated, opts => []}]},
     {{msg, 'CommitResp'},
      [#{name => resp, rnum => 2,
	 fields =>
	     [#{name => success, fnum => 1, rnum => 2,
		type => uint32, occurrence => optional, opts => []},
	      #{name => error_reason, fnum => 2, rnum => 2,
		type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'KeyOp'},
      [#{name => key, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'ReadWriteTx'},
      [#{name => ops, fnum => 1, rnum => 2,
	 type => {msg, 'KeyOp'}, occurrence => repeated,
	 opts => []}]}].


get_msg_names() ->
    ['ReadOnlyTx', 'CommitResp', 'KeyOp', 'ReadWriteTx'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ReadOnlyTx', 'CommitResp', 'KeyOp', 'ReadWriteTx'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('ReadOnlyTx') ->
    [#{name => keys, fnum => 1, rnum => 2, type => bytes,
       occurrence => repeated, opts => []}];
find_msg_def('CommitResp') ->
    [#{name => resp, rnum => 2,
       fields =>
	   [#{name => success, fnum => 1, rnum => 2,
	      type => uint32, occurrence => optional, opts => []},
	    #{name => error_reason, fnum => 2, rnum => 2,
	      type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('KeyOp') ->
    [#{name => key, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('ReadWriteTx') ->
    [#{name => ops, fnum => 1, rnum => 2,
       type => {msg, 'KeyOp'}, occurrence => repeated,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.1.3".

gpb_version_as_list() ->
    [4,1,3].
