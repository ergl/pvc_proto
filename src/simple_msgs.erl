%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.3.3
-module(simple_msgs).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_ByteTag/1, enum_value_by_symbol_ByteTag/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'ByteTag'() :: 'no_op' | 'ping' | 'ring'.
-export_type(['ByteTag'/0]).

%% message types
-type 'ByteReq'() ::
      #{tag                     => 'no_op' | 'ping' | 'ring' | integer() % = 1, enum ByteTag
       }.

-type 'ByteResp'() ::
      #{tag                     => 'no_op' | 'ping' | 'ring' | integer(), % = 1, enum ByteTag
        payload                 => iodata()         % = 2
       }.

-type 'TimedRead'() ::
      #{key                     => iodata()         % = 1
       }.

-type 'TimedReadResp'() ::
      #{resp                    => {error_reason, non_neg_integer()} | {payload, iodata()} % oneof
       }.

-type 'RemoteRead'() ::
      #{partition               => iodata(),        % = 1
        key                     => iodata(),        % = 2
        has_read                => iodata(),        % = 3
        vc_aggr                 => iodata()         % = 4
       }.

-type 'RemoteReadResp'() ::
      #{resp                    => {payload, iodata()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'Load'() ::
      #{num_keys                => non_neg_integer(), % = 1, 32 bits
        bin_size                => non_neg_integer() % = 2, 32 bits
       }.

-type 'ReadOnlyTx'() ::
      #{keys                    => [iodata()]       % = 1
       }.

-type 'KeyOp'() ::
      #{key                     => iodata(),        % = 1
        value                   => iodata()         % = 2
       }.

-type 'ReadWriteTx'() ::
      #{read_keys               => [iodata()],      % = 1
        ops                     => ['KeyOp'()]      % = 2
       }.

-type 'CommitResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.

-export_type(['ByteReq'/0, 'ByteResp'/0, 'TimedRead'/0, 'TimedReadResp'/0, 'RemoteRead'/0, 'RemoteReadResp'/0, 'Load'/0, 'ReadOnlyTx'/0, 'KeyOp'/0, 'ReadWriteTx'/0, 'CommitResp'/0]).

-spec encode_msg('ByteReq'() | 'ByteResp'() | 'TimedRead'() | 'TimedReadResp'() | 'RemoteRead'() | 'RemoteReadResp'() | 'Load'() | 'ReadOnlyTx'() | 'KeyOp'() | 'ReadWriteTx'() | 'CommitResp'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('ByteReq'() | 'ByteResp'() | 'TimedRead'() | 'TimedReadResp'() | 'RemoteRead'() | 'RemoteReadResp'() | 'Load'() | 'ReadOnlyTx'() | 'KeyOp'() | 'ReadWriteTx'() | 'CommitResp'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ByteReq' ->
	  e_msg_ByteReq(id(Msg, TrUserData), TrUserData);
      'ByteResp' ->
	  e_msg_ByteResp(id(Msg, TrUserData), TrUserData);
      'TimedRead' ->
	  e_msg_TimedRead(id(Msg, TrUserData), TrUserData);
      'TimedReadResp' ->
	  e_msg_TimedReadResp(id(Msg, TrUserData), TrUserData);
      'RemoteRead' ->
	  e_msg_RemoteRead(id(Msg, TrUserData), TrUserData);
      'RemoteReadResp' ->
	  e_msg_RemoteReadResp(id(Msg, TrUserData), TrUserData);
      'Load' -> e_msg_Load(id(Msg, TrUserData), TrUserData);
      'ReadOnlyTx' ->
	  e_msg_ReadOnlyTx(id(Msg, TrUserData), TrUserData);
      'KeyOp' -> e_msg_KeyOp(id(Msg, TrUserData), TrUserData);
      'ReadWriteTx' ->
	  e_msg_ReadWriteTx(id(Msg, TrUserData), TrUserData);
      'CommitResp' ->
	  e_msg_CommitResp(id(Msg, TrUserData), TrUserData)
    end.


e_msg_ByteReq(Msg, TrUserData) ->
    e_msg_ByteReq(Msg, <<>>, TrUserData).


e_msg_ByteReq(#{} = M, Bin, TrUserData) ->
    case M of
      #{tag := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= no_op; TrF1 =:= 0 -> Bin;
	       true ->
		   e_enum_ByteTag(TrF1, <<Bin/binary, 8>>,
				  'MaybeTrUserData')
	    end
	  end;
      _ -> Bin
    end.

e_msg_ByteResp(Msg, TrUserData) ->
    e_msg_ByteResp(Msg, <<>>, TrUserData).


e_msg_ByteResp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{tag := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= no_op; TrF1 =:= 0 -> Bin;
		    true ->
			e_enum_ByteTag(TrF1, <<Bin/binary, 8>>,
				       'MaybeTrUserData')
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{payload := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case iolist_size(TrF2) of
	      0 -> B1;
	      _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_msg_TimedRead(Msg, TrUserData) ->
    e_msg_TimedRead(Msg, <<>>, TrUserData).


e_msg_TimedRead(#{} = M, Bin, TrUserData) ->
    case M of
      #{key := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case iolist_size(TrF1) of
	      0 -> Bin;
	      _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

e_msg_TimedReadResp(Msg, TrUserData) ->
    e_msg_TimedReadResp(Msg, <<>>, TrUserData).


e_msg_TimedReadResp(#{} = M, Bin, TrUserData) ->
    case M of
      #{resp := F1} ->
	  case id(F1, TrUserData) of
	    {error_reason, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData)
		end;
	    {payload, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_bytes(TrTF1, <<Bin/binary, 18>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

e_msg_RemoteRead(Msg, TrUserData) ->
    e_msg_RemoteRead(Msg, <<>>, TrUserData).


e_msg_RemoteRead(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{partition := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{key := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{has_read := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case iolist_size(TrF3) of
		   0 -> B2;
		   _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{vc_aggr := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    case iolist_size(TrF4) of
	      0 -> B3;
	      _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

e_msg_RemoteReadResp(Msg, TrUserData) ->
    e_msg_RemoteReadResp(Msg, <<>>, TrUserData).


e_msg_RemoteReadResp(#{} = M, Bin, TrUserData) ->
    case M of
      #{resp := F1} ->
	  case id(F1, TrUserData) of
	    {payload, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData)
		end;
	    {error_reason, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

e_msg_Load(Msg, TrUserData) ->
    e_msg_Load(Msg, <<>>, TrUserData).


e_msg_Load(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{num_keys := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{bin_size := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_msg_ReadOnlyTx(Msg, TrUserData) ->
    e_msg_ReadOnlyTx(Msg, <<>>, TrUserData).


e_msg_ReadOnlyTx(#{} = M, Bin, TrUserData) ->
    case M of
      #{keys := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_ReadOnlyTx_keys(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

e_msg_KeyOp(Msg, TrUserData) ->
    e_msg_KeyOp(Msg, <<>>, TrUserData).


e_msg_KeyOp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case iolist_size(TrF2) of
	      0 -> B1;
	      _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_msg_ReadWriteTx(Msg, TrUserData) ->
    e_msg_ReadWriteTx(Msg, <<>>, TrUserData).


e_msg_ReadWriteTx(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{read_keys := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_ReadWriteTx_read_keys(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{ops := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true -> e_field_ReadWriteTx_ops(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

e_msg_CommitResp(Msg, TrUserData) ->
    e_msg_CommitResp(Msg, <<>>, TrUserData).


e_msg_CommitResp(#{} = M, Bin, TrUserData) ->
    case M of
      #{resp := F1} ->
	  case id(F1, TrUserData) of
	    {success, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData)
		end;
	    {error_reason, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

e_field_ReadOnlyTx_keys([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_ReadOnlyTx_keys(Rest, Bin3, TrUserData);
e_field_ReadOnlyTx_keys([], Bin, _TrUserData) -> Bin.

e_field_ReadWriteTx_read_keys([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_ReadWriteTx_read_keys(Rest, Bin3, TrUserData);
e_field_ReadWriteTx_read_keys([], Bin, _TrUserData) ->
    Bin.

e_mfield_ReadWriteTx_ops(Msg, Bin, TrUserData) ->
    SubBin = e_msg_KeyOp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ReadWriteTx_ops([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ReadWriteTx_ops(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_ReadWriteTx_ops(Rest, Bin3, TrUserData);
e_field_ReadWriteTx_ops([], Bin, _TrUserData) -> Bin.

e_enum_ByteTag(no_op, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_ByteTag(ping, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_ByteTag(ring, Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_ByteTag(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_PATTERN_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit('ByteReq', Bin, TrUserData) ->
    id(d_msg_ByteReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ByteResp', Bin, TrUserData) ->
    id(d_msg_ByteResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimedRead', Bin, TrUserData) ->
    id(d_msg_TimedRead(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimedReadResp', Bin, TrUserData) ->
    id(d_msg_TimedReadResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RemoteRead', Bin, TrUserData) ->
    id(d_msg_RemoteRead(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RemoteReadResp', Bin, TrUserData) ->
    id(d_msg_RemoteReadResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Load', Bin, TrUserData) ->
    id(d_msg_Load(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ReadOnlyTx', Bin, TrUserData) ->
    id(d_msg_ReadOnlyTx(Bin, TrUserData), TrUserData);
decode_msg_2_doit('KeyOp', Bin, TrUserData) ->
    id(d_msg_KeyOp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ReadWriteTx', Bin, TrUserData) ->
    id(d_msg_ReadWriteTx(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CommitResp', Bin, TrUserData) ->
    id(d_msg_CommitResp(Bin, TrUserData), TrUserData).



d_msg_ByteReq(Bin, TrUserData) ->
    dfp_read_field_def_ByteReq(Bin, 0, 0,
			       id(no_op, TrUserData), TrUserData).

dfp_read_field_def_ByteReq(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_ByteReq_tag(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ByteReq(<<>>, 0, 0, F@_1, _) ->
    #{tag => F@_1};
dfp_read_field_def_ByteReq(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_ByteReq(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_ByteReq(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ByteReq(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_ByteReq(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_ByteReq_tag(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ByteReq(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_ByteReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ByteReq(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_ByteReq(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_ByteReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ByteReq(<<>>, 0, 0, F@_1, _) ->
    #{tag => F@_1}.

d_field_ByteReq_tag(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, TrUserData)
    when N < 57 ->
    d_field_ByteReq_tag(Rest, N + 7, X bsl N + Acc, F@_1,
			TrUserData);
d_field_ByteReq_tag(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ByteTag(begin
					      <<Res:32/signed-native>> = <<(X
									      bsl
									      N
									      +
									      Acc):32/unsigned-native>>,
					      id(Res, TrUserData)
					    end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_ByteReq(RestF, 0, 0, NewFValue,
			       TrUserData).

skip_varint_ByteReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_ByteReq(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ByteReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_ByteReq(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_ByteReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ByteReq(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ByteReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ByteReq(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_ByteReq(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ByteReq(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_ByteReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_ByteReq(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_ByteReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_ByteReq(Rest, Z1, Z2, F@_1,
			       TrUserData).

d_msg_ByteResp(Bin, TrUserData) ->
    dfp_read_field_def_ByteResp(Bin, 0, 0,
				id(no_op, TrUserData), id(<<>>, TrUserData),
				TrUserData).

dfp_read_field_def_ByteResp(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_ByteResp_tag(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_ByteResp(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_ByteResp_payload(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_ByteResp(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{tag => F@_1, payload => F@_2};
dfp_read_field_def_ByteResp(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_ByteResp(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_ByteResp(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ByteResp(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_ByteResp(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ByteResp_tag(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      18 ->
	  d_field_ByteResp_payload(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ByteResp(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_ByteResp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ByteResp(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_ByteResp(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_ByteResp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ByteResp(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{tag => F@_1, payload => F@_2}.

d_field_ByteResp_tag(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ByteResp_tag(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_ByteResp_tag(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ByteTag(begin
					      <<Res:32/signed-native>> = <<(X
									      bsl
									      N
									      +
									      Acc):32/unsigned-native>>,
					      id(Res, TrUserData)
					    end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_ByteResp(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_ByteResp_payload(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ByteResp_payload(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_ByteResp_payload(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ByteResp(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_ByteResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_ByteResp(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_ByteResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ByteResp(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_ByteResp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ByteResp(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_ByteResp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ByteResp(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_ByteResp(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ByteResp(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_ByteResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_ByteResp(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_ByteResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_ByteResp(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_msg_TimedRead(Bin, TrUserData) ->
    dfp_read_field_def_TimedRead(Bin, 0, 0,
				 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_TimedRead(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_TimedRead_key(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_TimedRead(<<>>, 0, 0, F@_1, _) ->
    #{key => F@_1};
dfp_read_field_def_TimedRead(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_TimedRead(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_TimedRead(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TimedRead(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_TimedRead(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TimedRead_key(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TimedRead(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_TimedRead(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_TimedRead(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_TimedRead(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_TimedRead(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_TimedRead(<<>>, 0, 0, F@_1, _) ->
    #{key => F@_1}.

d_field_TimedRead_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_TimedRead_key(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_TimedRead_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_TimedRead(RestF, 0, 0, NewFValue,
				 TrUserData).

skip_varint_TimedRead(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_TimedRead(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_TimedRead(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_TimedRead(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_TimedRead(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_TimedRead(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_TimedRead(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimedRead(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_TimedRead(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimedRead(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_TimedRead(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_TimedRead(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_TimedRead(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_TimedRead(Rest, Z1, Z2, F@_1,
				 TrUserData).

d_msg_TimedReadResp(Bin, TrUserData) ->
    dfp_read_field_def_TimedReadResp(Bin, 0, 0,
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_TimedReadResp(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_TimedReadResp_error_reason(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_TimedReadResp(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_TimedReadResp_payload(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_TimedReadResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_TimedReadResp(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_TimedReadResp(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_TimedReadResp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TimedReadResp(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_TimedReadResp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TimedReadResp_error_reason(Rest, 0, 0, F@_1,
					     TrUserData);
      18 ->
	  d_field_TimedReadResp_payload(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TimedReadResp(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_TimedReadResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_TimedReadResp(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_TimedReadResp(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_TimedReadResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_TimedReadResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_TimedReadResp_error_reason(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_TimedReadResp_error_reason(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_TimedReadResp_error_reason(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_TimedReadResp(RestF, 0, 0,
				     id({error_reason, NewFValue}, TrUserData),
				     TrUserData).

d_field_TimedReadResp_payload(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_TimedReadResp_payload(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_TimedReadResp_payload(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_TimedReadResp(RestF, 0, 0,
				     id({payload, NewFValue}, TrUserData),
				     TrUserData).

skip_varint_TimedReadResp(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_TimedReadResp(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_TimedReadResp(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_TimedReadResp(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_TimedReadResp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_TimedReadResp(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_TimedReadResp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimedReadResp(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_TimedReadResp(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimedReadResp(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_TimedReadResp(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_TimedReadResp(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_TimedReadResp(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_TimedReadResp(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_msg_RemoteRead(Bin, TrUserData) ->
    dfp_read_field_def_RemoteRead(Bin, 0, 0,
				  id(<<>>, TrUserData), id(<<>>, TrUserData),
				  id(<<>>, TrUserData), id(<<>>, TrUserData),
				  TrUserData).

dfp_read_field_def_RemoteRead(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RemoteRead_partition(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_RemoteRead(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RemoteRead_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_RemoteRead(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RemoteRead_has_read(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_RemoteRead(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RemoteRead_vc_aggr(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_RemoteRead(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    #{partition => F@_1, key => F@_2, has_read => F@_3,
      vc_aggr => F@_4};
dfp_read_field_def_RemoteRead(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    dg_read_field_def_RemoteRead(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

dg_read_field_def_RemoteRead(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RemoteRead(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_RemoteRead(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RemoteRead_partition(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      18 ->
	  d_field_RemoteRead_key(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      26 ->
	  d_field_RemoteRead_has_read(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      34 ->
	  d_field_RemoteRead_vc_aggr(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RemoteRead(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    1 ->
		skip_64_RemoteRead(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    2 ->
		skip_length_delimited_RemoteRead(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_RemoteRead(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_RemoteRead(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData)
	  end
    end;
dg_read_field_def_RemoteRead(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, _) ->
    #{partition => F@_1, key => F@_2, has_read => F@_3,
      vc_aggr => F@_4}.

d_field_RemoteRead_partition(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RemoteRead_partition(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RemoteRead_partition(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_RemoteRead(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, TrUserData).

d_field_RemoteRead_key(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RemoteRead_key(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_RemoteRead_key(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_RemoteRead(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, TrUserData).

d_field_RemoteRead_has_read(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RemoteRead_has_read(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RemoteRead_has_read(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_RemoteRead(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, TrUserData).

d_field_RemoteRead_vc_aggr(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RemoteRead_vc_aggr(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RemoteRead_vc_aggr(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_RemoteRead(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, TrUserData).

skip_varint_RemoteRead(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_RemoteRead(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
skip_varint_RemoteRead(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_RemoteRead(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_length_delimited_RemoteRead(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_RemoteRead(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
skip_length_delimited_RemoteRead(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RemoteRead(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_group_RemoteRead(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RemoteRead(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_32_RemoteRead(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_RemoteRead(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_64_RemoteRead(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_RemoteRead(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

d_msg_RemoteReadResp(Bin, TrUserData) ->
    dfp_read_field_def_RemoteReadResp(Bin, 0, 0,
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_RemoteReadResp(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_RemoteReadResp_payload(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_RemoteReadResp(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_RemoteReadResp_error_reason(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_RemoteReadResp(<<>>, 0, 0, F@_1,
				  _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_RemoteReadResp(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_RemoteReadResp(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_RemoteReadResp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RemoteReadResp(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_RemoteReadResp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RemoteReadResp_payload(Rest, 0, 0, F@_1,
					 TrUserData);
      16 ->
	  d_field_RemoteReadResp_error_reason(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RemoteReadResp(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_RemoteReadResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_RemoteReadResp(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_RemoteReadResp(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_RemoteReadResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_RemoteReadResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_RemoteReadResp_payload(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_RemoteReadResp_payload(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_RemoteReadResp_payload(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_RemoteReadResp(RestF, 0, 0,
				      id({payload, NewFValue}, TrUserData),
				      TrUserData).

d_field_RemoteReadResp_error_reason(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_RemoteReadResp_error_reason(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_RemoteReadResp_error_reason(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RemoteReadResp(RestF, 0, 0,
				      id({error_reason, NewFValue}, TrUserData),
				      TrUserData).

skip_varint_RemoteReadResp(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_RemoteReadResp(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_RemoteReadResp(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_RemoteReadResp(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_RemoteReadResp(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RemoteReadResp(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_RemoteReadResp(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RemoteReadResp(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_RemoteReadResp(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RemoteReadResp(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_RemoteReadResp(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_RemoteReadResp(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_RemoteReadResp(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_RemoteReadResp(Rest, Z1, Z2, F@_1,
				      TrUserData).

d_msg_Load(Bin, TrUserData) ->
    dfp_read_field_def_Load(Bin, 0, 0, id(0, TrUserData),
			    id(0, TrUserData), TrUserData).

dfp_read_field_def_Load(<<8, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_Load_num_keys(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_Load(<<16, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_Load_bin_size(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_Load(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{num_keys => F@_1, bin_size => F@_2};
dfp_read_field_def_Load(Other, Z1, Z2, F@_1, F@_2,
			TrUserData) ->
    dg_read_field_def_Load(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData).

dg_read_field_def_Load(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Load(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
dg_read_field_def_Load(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Load_num_keys(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      16 ->
	  d_field_Load_bin_size(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Load(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Load(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Load(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    3 ->
		skip_group_Load(Rest, Key bsr 3, 0, F@_1, F@_2,
				TrUserData);
	    5 -> skip_32_Load(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Load(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{num_keys => F@_1, bin_size => F@_2}.

d_field_Load_num_keys(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Load_num_keys(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_Load_num_keys(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Load(RestF, 0, 0, NewFValue, F@_2,
			    TrUserData).

d_field_Load_bin_size(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Load_bin_size(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_Load_bin_size(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Load(RestF, 0, 0, F@_1, NewFValue,
			    TrUserData).

skip_varint_Load(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    skip_varint_Load(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Load(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Load(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_length_delimited_Load(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Load(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
skip_length_delimited_Load(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Load(Rest2, 0, 0, F@_1, F@_2,
			    TrUserData).

skip_group_Load(Bin, FNum, Z2, F@_1, F@_2,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Load(Rest, 0, Z2, F@_1, F@_2,
			    TrUserData).

skip_32_Load(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_Load(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_64_Load(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_Load(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

d_msg_ReadOnlyTx(Bin, TrUserData) ->
    dfp_read_field_def_ReadOnlyTx(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

dfp_read_field_def_ReadOnlyTx(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_ReadOnlyTx_keys(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ReadOnlyTx(<<>>, 0, 0, R1,
			      TrUserData) ->
    #{keys => lists_reverse(R1, TrUserData)};
dfp_read_field_def_ReadOnlyTx(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_ReadOnlyTx(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_ReadOnlyTx(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReadOnlyTx(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_ReadOnlyTx(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReadOnlyTx_keys(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReadOnlyTx(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_ReadOnlyTx(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ReadOnlyTx(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_ReadOnlyTx(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_ReadOnlyTx(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ReadOnlyTx(<<>>, 0, 0, R1,
			     TrUserData) ->
    #{keys => lists_reverse(R1, TrUserData)}.

d_field_ReadOnlyTx_keys(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ReadOnlyTx_keys(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_ReadOnlyTx_keys(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ReadOnlyTx(RestF, 0, 0,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_ReadOnlyTx(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_ReadOnlyTx(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ReadOnlyTx(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ReadOnlyTx(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_ReadOnlyTx(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReadOnlyTx(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ReadOnlyTx(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadOnlyTx(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_ReadOnlyTx(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadOnlyTx(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_ReadOnlyTx(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_ReadOnlyTx(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_ReadOnlyTx(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_ReadOnlyTx(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_msg_KeyOp(Bin, TrUserData) ->
    dfp_read_field_def_KeyOp(Bin, 0, 0,
			     id(<<>>, TrUserData), id(<<>>, TrUserData),
			     TrUserData).

dfp_read_field_def_KeyOp(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_KeyOp_key(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_KeyOp(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_KeyOp_value(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_KeyOp(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2};
dfp_read_field_def_KeyOp(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_KeyOp(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_KeyOp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_KeyOp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_KeyOp(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_KeyOp_key(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_KeyOp_value(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_KeyOp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_KeyOp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_KeyOp(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_KeyOp(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_KeyOp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_KeyOp(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2}.

d_field_KeyOp_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_KeyOp_key(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_KeyOp_key(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_KeyOp(RestF, 0, 0, NewFValue, F@_2,
			     TrUserData).

d_field_KeyOp_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_KeyOp_value(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_KeyOp_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_KeyOp(RestF, 0, 0, F@_1, NewFValue,
			     TrUserData).

skip_varint_KeyOp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_KeyOp(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_KeyOp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_KeyOp(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_KeyOp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_KeyOp(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_KeyOp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_KeyOp(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_KeyOp(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_KeyOp(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_KeyOp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_KeyOp(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_KeyOp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_KeyOp(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

d_msg_ReadWriteTx(Bin, TrUserData) ->
    dfp_read_field_def_ReadWriteTx(Bin, 0, 0,
				   id([], TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_ReadWriteTx(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_ReadWriteTx_read_keys(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_ReadWriteTx(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_ReadWriteTx_ops(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_ReadWriteTx(<<>>, 0, 0, R1, R2,
			       TrUserData) ->
    S1 = #{read_keys => lists_reverse(R1, TrUserData)},
    if R2 == '$undef' -> S1;
       true -> S1#{ops => lists_reverse(R2, TrUserData)}
    end;
dfp_read_field_def_ReadWriteTx(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_ReadWriteTx(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_ReadWriteTx(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReadWriteTx(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_ReadWriteTx(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReadWriteTx_read_keys(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  d_field_ReadWriteTx_ops(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReadWriteTx(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_ReadWriteTx(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ReadWriteTx(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_ReadWriteTx(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_ReadWriteTx(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ReadWriteTx(<<>>, 0, 0, R1, R2,
			      TrUserData) ->
    S1 = #{read_keys => lists_reverse(R1, TrUserData)},
    if R2 == '$undef' -> S1;
       true -> S1#{ops => lists_reverse(R2, TrUserData)}
    end.

d_field_ReadWriteTx_read_keys(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ReadWriteTx_read_keys(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_ReadWriteTx_read_keys(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ReadWriteTx(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData), F@_2,
				   TrUserData).

d_field_ReadWriteTx_ops(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ReadWriteTx_ops(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_ReadWriteTx_ops(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_KeyOp(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ReadWriteTx(RestF, 0, 0, F@_1,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_ReadWriteTx(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ReadWriteTx(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_ReadWriteTx(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ReadWriteTx(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_ReadWriteTx(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReadWriteTx(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_ReadWriteTx(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadWriteTx(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_ReadWriteTx(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadWriteTx(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_ReadWriteTx(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_ReadWriteTx(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_ReadWriteTx(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_ReadWriteTx(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_CommitResp(Bin, TrUserData) ->
    dfp_read_field_def_CommitResp(Bin, 0, 0,
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_CommitResp(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_CommitResp_success(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_CommitResp(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_CommitResp_error_reason(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_CommitResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_CommitResp(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_CommitResp(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_CommitResp(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CommitResp(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_CommitResp(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CommitResp_success(Rest, 0, 0, F@_1,
				     TrUserData);
      16 ->
	  d_field_CommitResp_error_reason(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommitResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_CommitResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_CommitResp(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_CommitResp(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_CommitResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_CommitResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_CommitResp_success(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CommitResp_success(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_CommitResp_success(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_CommitResp(RestF, 0, 0,
				  id({success, NewFValue}, TrUserData),
				  TrUserData).

d_field_CommitResp_error_reason(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CommitResp_error_reason(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_CommitResp_error_reason(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_CommitResp(RestF, 0, 0,
				  id({error_reason, NewFValue}, TrUserData),
				  TrUserData).

skip_varint_CommitResp(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_CommitResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_CommitResp(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_CommitResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_CommitResp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_CommitResp(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_CommitResp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommitResp(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_CommitResp(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CommitResp(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_CommitResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_CommitResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_CommitResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_CommitResp(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_enum_ByteTag(0) -> no_op;
d_enum_ByteTag(1) -> ping;
d_enum_ByteTag(2) -> ring;
d_enum_ByteTag(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ByteReq' -> merge_msg_ByteReq(Prev, New, TrUserData);
      'ByteResp' -> merge_msg_ByteResp(Prev, New, TrUserData);
      'TimedRead' ->
	  merge_msg_TimedRead(Prev, New, TrUserData);
      'TimedReadResp' ->
	  merge_msg_TimedReadResp(Prev, New, TrUserData);
      'RemoteRead' ->
	  merge_msg_RemoteRead(Prev, New, TrUserData);
      'RemoteReadResp' ->
	  merge_msg_RemoteReadResp(Prev, New, TrUserData);
      'Load' -> merge_msg_Load(Prev, New, TrUserData);
      'ReadOnlyTx' ->
	  merge_msg_ReadOnlyTx(Prev, New, TrUserData);
      'KeyOp' -> merge_msg_KeyOp(Prev, New, TrUserData);
      'ReadWriteTx' ->
	  merge_msg_ReadWriteTx(Prev, New, TrUserData);
      'CommitResp' ->
	  merge_msg_CommitResp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_ByteReq/3}).
merge_msg_ByteReq(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{tag := NFtag}} -> S1#{tag => NFtag};
      {#{tag := PFtag}, _} -> S1#{tag => PFtag};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ByteResp/3}).
merge_msg_ByteResp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{tag := NFtag}} -> S1#{tag => NFtag};
	   {#{tag := PFtag}, _} -> S1#{tag => PFtag};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{payload := NFpayload}} ->
	  S2#{payload => NFpayload};
      {#{payload := PFpayload}, _} ->
	  S2#{payload => PFpayload};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_TimedRead/3}).
merge_msg_TimedRead(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{key := NFkey}} -> S1#{key => NFkey};
      {#{key := PFkey}, _} -> S1#{key => PFkey};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_TimedReadResp/3}).
merge_msg_TimedReadResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{resp := NFresp}} -> S1#{resp => NFresp};
      {#{resp := PFresp}, _} -> S1#{resp => PFresp};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_RemoteRead/3}).
merge_msg_RemoteRead(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{partition := NFpartition}} ->
	       S1#{partition => NFpartition};
	   {#{partition := PFpartition}, _} ->
	       S1#{partition => PFpartition};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S2#{key => NFkey};
	   {#{key := PFkey}, _} -> S2#{key => PFkey};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{has_read := NFhas_read}} ->
	       S3#{has_read => NFhas_read};
	   {#{has_read := PFhas_read}, _} ->
	       S3#{has_read => PFhas_read};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{vc_aggr := NFvc_aggr}} ->
	  S4#{vc_aggr => NFvc_aggr};
      {#{vc_aggr := PFvc_aggr}, _} ->
	  S4#{vc_aggr => PFvc_aggr};
      _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_RemoteReadResp/3}).
merge_msg_RemoteReadResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{resp := NFresp}} -> S1#{resp => NFresp};
      {#{resp := PFresp}, _} -> S1#{resp => PFresp};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Load/3}).
merge_msg_Load(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{num_keys := NFnum_keys}} ->
	       S1#{num_keys => NFnum_keys};
	   {#{num_keys := PFnum_keys}, _} ->
	       S1#{num_keys => PFnum_keys};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{bin_size := NFbin_size}} ->
	  S2#{bin_size => NFbin_size};
      {#{bin_size := PFbin_size}, _} ->
	  S2#{bin_size => PFbin_size};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_ReadOnlyTx/3}).
merge_msg_ReadOnlyTx(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{keys := PFkeys}, #{keys := NFkeys}} ->
	  S1#{keys => 'erlang_++'(PFkeys, NFkeys, TrUserData)};
      {_, #{keys := NFkeys}} -> S1#{keys => NFkeys};
      {#{keys := PFkeys}, _} -> S1#{keys => PFkeys};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_KeyOp/3}).
merge_msg_KeyOp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_ReadWriteTx/3}).
merge_msg_ReadWriteTx(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{read_keys := PFread_keys},
	    #{read_keys := NFread_keys}} ->
	       S1#{read_keys =>
		       'erlang_++'(PFread_keys, NFread_keys, TrUserData)};
	   {_, #{read_keys := NFread_keys}} ->
	       S1#{read_keys => NFread_keys};
	   {#{read_keys := PFread_keys}, _} ->
	       S1#{read_keys => PFread_keys};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{ops := PFops}, #{ops := NFops}} ->
	  S2#{ops => 'erlang_++'(PFops, NFops, TrUserData)};
      {_, #{ops := NFops}} -> S2#{ops => NFops};
      {#{ops := PFops}, _} -> S2#{ops => PFops};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_CommitResp/3}).
merge_msg_CommitResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{resp := NFresp}} -> S1#{resp => NFresp};
      {#{resp := PFresp}, _} -> S1#{resp => PFresp};
      _ -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ByteReq' -> v_msg_ByteReq(Msg, [MsgName], TrUserData);
      'ByteResp' ->
	  v_msg_ByteResp(Msg, [MsgName], TrUserData);
      'TimedRead' ->
	  v_msg_TimedRead(Msg, [MsgName], TrUserData);
      'TimedReadResp' ->
	  v_msg_TimedReadResp(Msg, [MsgName], TrUserData);
      'RemoteRead' ->
	  v_msg_RemoteRead(Msg, [MsgName], TrUserData);
      'RemoteReadResp' ->
	  v_msg_RemoteReadResp(Msg, [MsgName], TrUserData);
      'Load' -> v_msg_Load(Msg, [MsgName], TrUserData);
      'ReadOnlyTx' ->
	  v_msg_ReadOnlyTx(Msg, [MsgName], TrUserData);
      'KeyOp' -> v_msg_KeyOp(Msg, [MsgName], TrUserData);
      'ReadWriteTx' ->
	  v_msg_ReadWriteTx(Msg, [MsgName], TrUserData);
      'CommitResp' ->
	  v_msg_CommitResp(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_ByteReq/3}).
-dialyzer({nowarn_function,v_msg_ByteReq/3}).
v_msg_ByteReq(#{} = M, Path, TrUserData) ->
    case M of
      #{tag := F1} ->
	  v_enum_ByteTag(F1, [tag | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (tag) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ByteReq(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ByteReq'},
		  M, Path);
v_msg_ByteReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ByteReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_ByteResp/3}).
-dialyzer({nowarn_function,v_msg_ByteResp/3}).
v_msg_ByteResp(#{} = M, Path, TrUserData) ->
    case M of
      #{tag := F1} ->
	  v_enum_ByteTag(F1, [tag | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{payload := F2} ->
	  v_type_bytes(F2, [payload | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (tag) -> ok;
		      (payload) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ByteResp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ByteResp'},
		  M, Path);
v_msg_ByteResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ByteResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimedRead/3}).
-dialyzer({nowarn_function,v_msg_TimedRead/3}).
v_msg_TimedRead(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_bytes(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_TimedRead(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'TimedRead'},
		  M, Path);
v_msg_TimedRead(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TimedRead'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimedReadResp/3}).
-dialyzer({nowarn_function,v_msg_TimedReadResp/3}).
v_msg_TimedReadResp(#{} = M, Path, TrUserData) ->
    case M of
      #{resp := {error_reason, OF1}} ->
	  v_type_uint32(OF1, [error_reason, resp | Path],
			TrUserData);
      #{resp := {payload, OF1}} ->
	  v_type_bytes(OF1, [payload, resp | Path], TrUserData);
      #{resp := F1} ->
	  mk_type_error(invalid_oneof, F1, [resp | Path]);
      _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_TimedReadResp(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'TimedReadResp'},
		  M, Path);
v_msg_TimedReadResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TimedReadResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_RemoteRead/3}).
-dialyzer({nowarn_function,v_msg_RemoteRead/3}).
v_msg_RemoteRead(#{} = M, Path, TrUserData) ->
    case M of
      #{partition := F1} ->
	  v_type_bytes(F1, [partition | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{key := F2} ->
	  v_type_bytes(F2, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{has_read := F3} ->
	  v_type_bytes(F3, [has_read | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{vc_aggr := F4} ->
	  v_type_bytes(F4, [vc_aggr | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
		      (key) -> ok;
		      (has_read) -> ok;
		      (vc_aggr) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RemoteRead(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RemoteRead'},
		  M, Path);
v_msg_RemoteRead(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RemoteRead'}, X, Path).

-compile({nowarn_unused_function,v_msg_RemoteReadResp/3}).
-dialyzer({nowarn_function,v_msg_RemoteReadResp/3}).
v_msg_RemoteReadResp(#{} = M, Path, TrUserData) ->
    case M of
      #{resp := {payload, OF1}} ->
	  v_type_bytes(OF1, [payload, resp | Path], TrUserData);
      #{resp := {error_reason, OF1}} ->
	  v_type_uint32(OF1, [error_reason, resp | Path],
			TrUserData);
      #{resp := F1} ->
	  mk_type_error(invalid_oneof, F1, [resp | Path]);
      _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RemoteReadResp(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RemoteReadResp'},
		  M, Path);
v_msg_RemoteReadResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RemoteReadResp'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Load/3}).
-dialyzer({nowarn_function,v_msg_Load/3}).
v_msg_Load(#{} = M, Path, TrUserData) ->
    case M of
      #{num_keys := F1} ->
	  v_type_uint32(F1, [num_keys | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{bin_size := F2} ->
	  v_type_uint32(F2, [bin_size | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (num_keys) -> ok;
		      (bin_size) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Load(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Load'},
		  M, Path);
v_msg_Load(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Load'}, X, Path).

-compile({nowarn_unused_function,v_msg_ReadOnlyTx/3}).
-dialyzer({nowarn_function,v_msg_ReadOnlyTx/3}).
v_msg_ReadOnlyTx(#{} = M, Path, TrUserData) ->
    case M of
      #{keys := F1} ->
	  if is_list(F1) ->
		 _ = [v_type_bytes(Elem, [keys | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, bytes}, F1,
			       [keys | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (keys) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ReadOnlyTx(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReadOnlyTx'},
		  M, Path);
v_msg_ReadOnlyTx(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReadOnlyTx'}, X, Path).

-compile({nowarn_unused_function,v_msg_KeyOp/3}).
-dialyzer({nowarn_function,v_msg_KeyOp/3}).
v_msg_KeyOp(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_bytes(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_type_bytes(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_KeyOp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'KeyOp'},
		  M, Path);
v_msg_KeyOp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'KeyOp'}, X, Path).

-compile({nowarn_unused_function,v_msg_ReadWriteTx/3}).
-dialyzer({nowarn_function,v_msg_ReadWriteTx/3}).
v_msg_ReadWriteTx(#{} = M, Path, TrUserData) ->
    case M of
      #{read_keys := F1} ->
	  if is_list(F1) ->
		 _ = [v_type_bytes(Elem, [read_keys | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, bytes}, F1,
			       [read_keys | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{ops := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_KeyOp(Elem, [ops | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'KeyOp'}}, F2,
			       [ops | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (read_keys) -> ok;
		      (ops) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ReadWriteTx(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ReadWriteTx'},
		  M, Path);
v_msg_ReadWriteTx(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReadWriteTx'}, X, Path).

-compile({nowarn_unused_function,v_msg_CommitResp/3}).
-dialyzer({nowarn_function,v_msg_CommitResp/3}).
v_msg_CommitResp(#{} = M, Path, TrUserData) ->
    case M of
      #{resp := {success, OF1}} ->
	  v_type_uint32(OF1, [success, resp | Path], TrUserData);
      #{resp := {error_reason, OF1}} ->
	  v_type_uint32(OF1, [error_reason, resp | Path],
			TrUserData);
      #{resp := F1} ->
	  mk_type_error(invalid_oneof, F1, [resp | Path]);
      _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_CommitResp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'CommitResp'},
		  M, Path);
v_msg_CommitResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CommitResp'}, X, Path).

-compile({nowarn_unused_function,v_enum_ByteTag/3}).
-dialyzer({nowarn_function,v_enum_ByteTag/3}).
v_enum_ByteTag(no_op, _Path, _TrUserData) -> ok;
v_enum_ByteTag(ping, _Path, _TrUserData) -> ok;
v_enum_ByteTag(ring, _Path, _TrUserData) -> ok;
v_enum_ByteTag(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_ByteTag(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ByteTag'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'ByteTag'},
      [{no_op, 0}, {ping, 1}, {ring, 2}]},
     {{msg, 'ByteReq'},
      [#{name => tag, fnum => 1, rnum => 2,
	 type => {enum, 'ByteTag'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'ByteResp'},
      [#{name => tag, fnum => 1, rnum => 2,
	 type => {enum, 'ByteTag'}, occurrence => optional,
	 opts => []},
       #{name => payload, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'TimedRead'},
      [#{name => key, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'TimedReadResp'},
      [#{name => resp, rnum => 2,
	 fields =>
	     [#{name => error_reason, fnum => 1, rnum => 2,
		type => uint32, occurrence => optional, opts => []},
	      #{name => payload, fnum => 2, rnum => 2, type => bytes,
		occurrence => optional, opts => []}]}]},
     {{msg, 'RemoteRead'},
      [#{name => partition, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => key, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => has_read, fnum => 3, rnum => 4, type => bytes,
	 occurrence => optional, opts => []},
       #{name => vc_aggr, fnum => 4, rnum => 5, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'RemoteReadResp'},
      [#{name => resp, rnum => 2,
	 fields =>
	     [#{name => payload, fnum => 1, rnum => 2, type => bytes,
		occurrence => optional, opts => []},
	      #{name => error_reason, fnum => 2, rnum => 2,
		type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'Load'},
      [#{name => num_keys, fnum => 1, rnum => 2,
	 type => uint32, occurrence => optional, opts => []},
       #{name => bin_size, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'ReadOnlyTx'},
      [#{name => keys, fnum => 1, rnum => 2, type => bytes,
	 occurrence => repeated, opts => []}]},
     {{msg, 'KeyOp'},
      [#{name => key, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'ReadWriteTx'},
      [#{name => read_keys, fnum => 1, rnum => 2,
	 type => bytes, occurrence => repeated, opts => []},
       #{name => ops, fnum => 2, rnum => 3,
	 type => {msg, 'KeyOp'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'CommitResp'},
      [#{name => resp, rnum => 2,
	 fields =>
	     [#{name => success, fnum => 1, rnum => 2,
		type => uint32, occurrence => optional, opts => []},
	      #{name => error_reason, fnum => 2, rnum => 2,
		type => uint32, occurrence => optional,
		opts => []}]}]}].


get_msg_names() ->
    ['ByteReq', 'ByteResp', 'TimedRead', 'TimedReadResp',
     'RemoteRead', 'RemoteReadResp', 'Load', 'ReadOnlyTx',
     'KeyOp', 'ReadWriteTx', 'CommitResp'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ByteReq', 'ByteResp', 'TimedRead', 'TimedReadResp',
     'RemoteRead', 'RemoteReadResp', 'Load', 'ReadOnlyTx',
     'KeyOp', 'ReadWriteTx', 'CommitResp'].


get_enum_names() -> ['ByteTag'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('ByteReq') ->
    [#{name => tag, fnum => 1, rnum => 2,
       type => {enum, 'ByteTag'}, occurrence => optional,
       opts => []}];
find_msg_def('ByteResp') ->
    [#{name => tag, fnum => 1, rnum => 2,
       type => {enum, 'ByteTag'}, occurrence => optional,
       opts => []},
     #{name => payload, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('TimedRead') ->
    [#{name => key, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('TimedReadResp') ->
    [#{name => resp, rnum => 2,
       fields =>
	   [#{name => error_reason, fnum => 1, rnum => 2,
	      type => uint32, occurrence => optional, opts => []},
	    #{name => payload, fnum => 2, rnum => 2, type => bytes,
	      occurrence => optional, opts => []}]}];
find_msg_def('RemoteRead') ->
    [#{name => partition, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => key, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => has_read, fnum => 3, rnum => 4, type => bytes,
       occurrence => optional, opts => []},
     #{name => vc_aggr, fnum => 4, rnum => 5, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('RemoteReadResp') ->
    [#{name => resp, rnum => 2,
       fields =>
	   [#{name => payload, fnum => 1, rnum => 2, type => bytes,
	      occurrence => optional, opts => []},
	    #{name => error_reason, fnum => 2, rnum => 2,
	      type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('Load') ->
    [#{name => num_keys, fnum => 1, rnum => 2,
       type => uint32, occurrence => optional, opts => []},
     #{name => bin_size, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('ReadOnlyTx') ->
    [#{name => keys, fnum => 1, rnum => 2, type => bytes,
       occurrence => repeated, opts => []}];
find_msg_def('KeyOp') ->
    [#{name => key, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('ReadWriteTx') ->
    [#{name => read_keys, fnum => 1, rnum => 2,
       type => bytes, occurrence => repeated, opts => []},
     #{name => ops, fnum => 2, rnum => 3,
       type => {msg, 'KeyOp'}, occurrence => repeated,
       opts => []}];
find_msg_def('CommitResp') ->
    [#{name => resp, rnum => 2,
       fields =>
	   [#{name => success, fnum => 1, rnum => 2,
	      type => uint32, occurrence => optional, opts => []},
	    #{name => error_reason, fnum => 2, rnum => 2,
	      type => uint32, occurrence => optional, opts => []}]}];
find_msg_def(_) -> error.


find_enum_def('ByteTag') ->
    [{no_op, 0}, {ping, 1}, {ring, 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('ByteTag', Value) ->
    enum_symbol_by_value_ByteTag(Value).


enum_value_by_symbol('ByteTag', Sym) ->
    enum_value_by_symbol_ByteTag(Sym).


enum_symbol_by_value_ByteTag(0) -> no_op;
enum_symbol_by_value_ByteTag(1) -> ping;
enum_symbol_by_value_ByteTag(2) -> ring.


enum_value_by_symbol_ByteTag(no_op) -> 0;
enum_value_by_symbol_ByteTag(ping) -> 1;
enum_value_by_symbol_ByteTag(ring) -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.3.3".

gpb_version_as_list() ->
    [4,3,3].
