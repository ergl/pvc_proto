%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.12.0
-module(rubis_msgs).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'PutRegion'() ::
      #{region_name             => iodata()         % = 1
       }.

-type 'PutRegionResp'() ::
      #{resp                    => {region_id, iodata()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'PutCategory'() ::
      #{category_name           => iodata()         % = 1
       }.

-type 'PutCategoryResp'() ::
      #{resp                    => {category_id, iodata()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'AuthUser'() ::
      #{username                => iodata(),        % = 1
        password                => iodata()         % = 2
       }.

-type 'AuthUserResp'() ::
      #{resp                    => {user_id, iodata()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'RegisterUser'() ::
      #{username                => iodata(),        % = 1
        password                => iodata(),        % = 2
        region_id               => iodata()         % = 3
       }.

-type 'RegisterUserResp'() ::
      #{resp                    => {user_id, iodata()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'BrowseCategories'() ::
      #{
       }.

-type 'BrowseCategoriesResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'BrowseRegions'() ::
      #{
       }.

-type 'BrowseRegionsResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'SearchByCategory'() ::
      #{category_id             => iodata()         % = 1
       }.

-type 'SearchByCategoryResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'SearchByRegion'() ::
      #{category_id             => iodata(),        % = 1
        region_id               => iodata()         % = 2
       }.

-type 'SearchByRegionResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'ViewItem'() ::
      #{item_id                 => iodata()         % = 1
       }.

-type 'ViewItemResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'ViewUser'() ::
      #{user_id                 => iodata()         % = 1
       }.

-type 'ViewUserResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'ViewItemBidHist'() ::
      #{item_id                 => iodata()         % = 1
       }.

-type 'ViewItemBidHistResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'StoreBuyNow'() ::
      #{on_item_id              => iodata(),        % = 1
        buyer_id                => iodata(),        % = 2
        quantity                => non_neg_integer() % = 3, 32 bits
       }.

-type 'StoreBuyNowResp'() ::
      #{resp                    => {buy_now_id, iodata()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'StoreBid'() ::
      #{on_item_id              => iodata(),        % = 1
        bidder_id               => iodata(),        % = 2
        value                   => non_neg_integer() % = 3, 32 bits
       }.

-type 'StoreBidResp'() ::
      #{resp                    => {bid_id, iodata()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'StoreComment'() ::
      #{on_item_id              => iodata(),        % = 1
        from_id                 => iodata(),        % = 2
        to_id                   => iodata(),        % = 3
        rating                  => integer(),       % = 4, 32 bits
        body                    => iodata()         % = 5
       }.

-type 'StoreCommentResp'() ::
      #{resp                    => {comment_id, iodata()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'StoreItem'() ::
      #{item_name               => iodata(),        % = 1
        description             => iodata(),        % = 2
        quantity                => non_neg_integer(), % = 3, 32 bits
        category_id             => iodata(),        % = 4
        seller_id               => iodata()         % = 5
       }.

-type 'StoreItemResp'() ::
      #{resp                    => {item_id, iodata()} | {error_reason, non_neg_integer()} % oneof
       }.

-type 'AboutMe'() ::
      #{user_id                 => iodata()         % = 1
       }.

-type 'AboutMeResp'() ::
      #{resp                    => {success, non_neg_integer()} | {error_reason, non_neg_integer()} % oneof
       }.

-export_type(['PutRegion'/0, 'PutRegionResp'/0, 'PutCategory'/0, 'PutCategoryResp'/0, 'AuthUser'/0, 'AuthUserResp'/0, 'RegisterUser'/0, 'RegisterUserResp'/0, 'BrowseCategories'/0, 'BrowseCategoriesResp'/0, 'BrowseRegions'/0, 'BrowseRegionsResp'/0, 'SearchByCategory'/0, 'SearchByCategoryResp'/0, 'SearchByRegion'/0, 'SearchByRegionResp'/0, 'ViewItem'/0, 'ViewItemResp'/0, 'ViewUser'/0, 'ViewUserResp'/0, 'ViewItemBidHist'/0, 'ViewItemBidHistResp'/0, 'StoreBuyNow'/0, 'StoreBuyNowResp'/0, 'StoreBid'/0, 'StoreBidResp'/0, 'StoreComment'/0, 'StoreCommentResp'/0, 'StoreItem'/0, 'StoreItemResp'/0, 'AboutMe'/0, 'AboutMeResp'/0]).

-spec encode_msg('PutRegion'() | 'PutRegionResp'() | 'PutCategory'() | 'PutCategoryResp'() | 'AuthUser'() | 'AuthUserResp'() | 'RegisterUser'() | 'RegisterUserResp'() | 'BrowseCategories'() | 'BrowseCategoriesResp'() | 'BrowseRegions'() | 'BrowseRegionsResp'() | 'SearchByCategory'() | 'SearchByCategoryResp'() | 'SearchByRegion'() | 'SearchByRegionResp'() | 'ViewItem'() | 'ViewItemResp'() | 'ViewUser'() | 'ViewUserResp'() | 'ViewItemBidHist'() | 'ViewItemBidHistResp'() | 'StoreBuyNow'() | 'StoreBuyNowResp'() | 'StoreBid'() | 'StoreBidResp'() | 'StoreComment'() | 'StoreCommentResp'() | 'StoreItem'() | 'StoreItemResp'() | 'AboutMe'() | 'AboutMeResp'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg('PutRegion'() | 'PutRegionResp'() | 'PutCategory'() | 'PutCategoryResp'() | 'AuthUser'() | 'AuthUserResp'() | 'RegisterUser'() | 'RegisterUserResp'() | 'BrowseCategories'() | 'BrowseCategoriesResp'() | 'BrowseRegions'() | 'BrowseRegionsResp'() | 'SearchByCategory'() | 'SearchByCategoryResp'() | 'SearchByRegion'() | 'SearchByRegionResp'() | 'ViewItem'() | 'ViewItemResp'() | 'ViewUser'() | 'ViewUserResp'() | 'ViewItemBidHist'() | 'ViewItemBidHistResp'() | 'StoreBuyNow'() | 'StoreBuyNowResp'() | 'StoreBid'() | 'StoreBidResp'() | 'StoreComment'() | 'StoreCommentResp'() | 'StoreItem'() | 'StoreItemResp'() | 'AboutMe'() | 'AboutMeResp'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'PutRegion' -> encode_msg_PutRegion(id(Msg, TrUserData), TrUserData);
        'PutRegionResp' -> encode_msg_PutRegionResp(id(Msg, TrUserData), TrUserData);
        'PutCategory' -> encode_msg_PutCategory(id(Msg, TrUserData), TrUserData);
        'PutCategoryResp' -> encode_msg_PutCategoryResp(id(Msg, TrUserData), TrUserData);
        'AuthUser' -> encode_msg_AuthUser(id(Msg, TrUserData), TrUserData);
        'AuthUserResp' -> encode_msg_AuthUserResp(id(Msg, TrUserData), TrUserData);
        'RegisterUser' -> encode_msg_RegisterUser(id(Msg, TrUserData), TrUserData);
        'RegisterUserResp' -> encode_msg_RegisterUserResp(id(Msg, TrUserData), TrUserData);
        'BrowseCategories' -> encode_msg_BrowseCategories(id(Msg, TrUserData), TrUserData);
        'BrowseCategoriesResp' -> encode_msg_BrowseCategoriesResp(id(Msg, TrUserData), TrUserData);
        'BrowseRegions' -> encode_msg_BrowseRegions(id(Msg, TrUserData), TrUserData);
        'BrowseRegionsResp' -> encode_msg_BrowseRegionsResp(id(Msg, TrUserData), TrUserData);
        'SearchByCategory' -> encode_msg_SearchByCategory(id(Msg, TrUserData), TrUserData);
        'SearchByCategoryResp' -> encode_msg_SearchByCategoryResp(id(Msg, TrUserData), TrUserData);
        'SearchByRegion' -> encode_msg_SearchByRegion(id(Msg, TrUserData), TrUserData);
        'SearchByRegionResp' -> encode_msg_SearchByRegionResp(id(Msg, TrUserData), TrUserData);
        'ViewItem' -> encode_msg_ViewItem(id(Msg, TrUserData), TrUserData);
        'ViewItemResp' -> encode_msg_ViewItemResp(id(Msg, TrUserData), TrUserData);
        'ViewUser' -> encode_msg_ViewUser(id(Msg, TrUserData), TrUserData);
        'ViewUserResp' -> encode_msg_ViewUserResp(id(Msg, TrUserData), TrUserData);
        'ViewItemBidHist' -> encode_msg_ViewItemBidHist(id(Msg, TrUserData), TrUserData);
        'ViewItemBidHistResp' -> encode_msg_ViewItemBidHistResp(id(Msg, TrUserData), TrUserData);
        'StoreBuyNow' -> encode_msg_StoreBuyNow(id(Msg, TrUserData), TrUserData);
        'StoreBuyNowResp' -> encode_msg_StoreBuyNowResp(id(Msg, TrUserData), TrUserData);
        'StoreBid' -> encode_msg_StoreBid(id(Msg, TrUserData), TrUserData);
        'StoreBidResp' -> encode_msg_StoreBidResp(id(Msg, TrUserData), TrUserData);
        'StoreComment' -> encode_msg_StoreComment(id(Msg, TrUserData), TrUserData);
        'StoreCommentResp' -> encode_msg_StoreCommentResp(id(Msg, TrUserData), TrUserData);
        'StoreItem' -> encode_msg_StoreItem(id(Msg, TrUserData), TrUserData);
        'StoreItemResp' -> encode_msg_StoreItemResp(id(Msg, TrUserData), TrUserData);
        'AboutMe' -> encode_msg_AboutMe(id(Msg, TrUserData), TrUserData);
        'AboutMeResp' -> encode_msg_AboutMeResp(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_PutRegion(Msg, TrUserData) -> encode_msg_PutRegion(Msg, <<>>, TrUserData).


encode_msg_PutRegion(#{} = M, Bin, TrUserData) ->
    case M of
        #{region_name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_PutRegionResp(Msg, TrUserData) -> encode_msg_PutRegionResp(Msg, <<>>, TrUserData).


encode_msg_PutRegionResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {region_id, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_PutCategory(Msg, TrUserData) -> encode_msg_PutCategory(Msg, <<>>, TrUserData).


encode_msg_PutCategory(#{} = M, Bin, TrUserData) ->
    case M of
        #{category_name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_PutCategoryResp(Msg, TrUserData) -> encode_msg_PutCategoryResp(Msg, <<>>, TrUserData).


encode_msg_PutCategoryResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {category_id, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_AuthUser(Msg, TrUserData) -> encode_msg_AuthUser(Msg, <<>>, TrUserData).


encode_msg_AuthUser(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{username := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{password := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_AuthUserResp(Msg, TrUserData) -> encode_msg_AuthUserResp(Msg, <<>>, TrUserData).


encode_msg_AuthUserResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {user_id, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_RegisterUser(Msg, TrUserData) -> encode_msg_RegisterUser(Msg, <<>>, TrUserData).


encode_msg_RegisterUser(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{username := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{password := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{region_id := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_RegisterUserResp(Msg, TrUserData) -> encode_msg_RegisterUserResp(Msg, <<>>, TrUserData).


encode_msg_RegisterUserResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {user_id, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_BrowseCategories(_Msg, _TrUserData) -> <<>>.

encode_msg_BrowseCategoriesResp(Msg, TrUserData) -> encode_msg_BrowseCategoriesResp(Msg, <<>>, TrUserData).


encode_msg_BrowseCategoriesResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {success, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_BrowseRegions(_Msg, _TrUserData) -> <<>>.

encode_msg_BrowseRegionsResp(Msg, TrUserData) -> encode_msg_BrowseRegionsResp(Msg, <<>>, TrUserData).


encode_msg_BrowseRegionsResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {success, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_SearchByCategory(Msg, TrUserData) -> encode_msg_SearchByCategory(Msg, <<>>, TrUserData).


encode_msg_SearchByCategory(#{} = M, Bin, TrUserData) ->
    case M of
        #{category_id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_SearchByCategoryResp(Msg, TrUserData) -> encode_msg_SearchByCategoryResp(Msg, <<>>, TrUserData).


encode_msg_SearchByCategoryResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {success, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_SearchByRegion(Msg, TrUserData) -> encode_msg_SearchByRegion(Msg, <<>>, TrUserData).


encode_msg_SearchByRegion(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{category_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{region_id := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_SearchByRegionResp(Msg, TrUserData) -> encode_msg_SearchByRegionResp(Msg, <<>>, TrUserData).


encode_msg_SearchByRegionResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {success, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_ViewItem(Msg, TrUserData) -> encode_msg_ViewItem(Msg, <<>>, TrUserData).


encode_msg_ViewItem(#{} = M, Bin, TrUserData) ->
    case M of
        #{item_id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_ViewItemResp(Msg, TrUserData) -> encode_msg_ViewItemResp(Msg, <<>>, TrUserData).


encode_msg_ViewItemResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {success, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_ViewUser(Msg, TrUserData) -> encode_msg_ViewUser(Msg, <<>>, TrUserData).


encode_msg_ViewUser(#{} = M, Bin, TrUserData) ->
    case M of
        #{user_id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_ViewUserResp(Msg, TrUserData) -> encode_msg_ViewUserResp(Msg, <<>>, TrUserData).


encode_msg_ViewUserResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {success, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_ViewItemBidHist(Msg, TrUserData) -> encode_msg_ViewItemBidHist(Msg, <<>>, TrUserData).


encode_msg_ViewItemBidHist(#{} = M, Bin, TrUserData) ->
    case M of
        #{item_id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_ViewItemBidHistResp(Msg, TrUserData) -> encode_msg_ViewItemBidHistResp(Msg, <<>>, TrUserData).


encode_msg_ViewItemBidHistResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {success, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_StoreBuyNow(Msg, TrUserData) -> encode_msg_StoreBuyNow(Msg, <<>>, TrUserData).


encode_msg_StoreBuyNow(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{on_item_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{buyer_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{quantity := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_StoreBuyNowResp(Msg, TrUserData) -> encode_msg_StoreBuyNowResp(Msg, <<>>, TrUserData).


encode_msg_StoreBuyNowResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {buy_now_id, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_StoreBid(Msg, TrUserData) -> encode_msg_StoreBid(Msg, <<>>, TrUserData).


encode_msg_StoreBid(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{on_item_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{bidder_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{value := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_StoreBidResp(Msg, TrUserData) -> encode_msg_StoreBidResp(Msg, <<>>, TrUserData).


encode_msg_StoreBidResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {bid_id, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_StoreComment(Msg, TrUserData) -> encode_msg_StoreComment(Msg, <<>>, TrUserData).


encode_msg_StoreComment(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{on_item_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{from_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{to_id := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case iolist_size(TrF3) of
                         0 -> B2;
                         _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{rating := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= 0 -> B3;
                        true -> e_type_sfixed32(TrF4, <<B3/binary, 37>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{body := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                case iolist_size(TrF5) of
                    0 -> B4;
                    _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_StoreCommentResp(Msg, TrUserData) -> encode_msg_StoreCommentResp(Msg, <<>>, TrUserData).


encode_msg_StoreCommentResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {comment_id, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_StoreItem(Msg, TrUserData) -> encode_msg_StoreItem(Msg, <<>>, TrUserData).


encode_msg_StoreItem(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{item_name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{description := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{quantity := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{category_id := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case iolist_size(TrF4) of
                         0 -> B3;
                         _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{seller_id := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                case iolist_size(TrF5) of
                    0 -> B4;
                    _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_StoreItemResp(Msg, TrUserData) -> encode_msg_StoreItemResp(Msg, <<>>, TrUserData).


encode_msg_StoreItemResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {item_id, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_AboutMe(Msg, TrUserData) -> encode_msg_AboutMe(Msg, <<>>, TrUserData).


encode_msg_AboutMe(#{} = M, Bin, TrUserData) ->
    case M of
        #{user_id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_AboutMeResp(Msg, TrUserData) -> encode_msg_AboutMeResp(Msg, <<>>, TrUserData).


encode_msg_AboutMeResp(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {success, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData) end;
                {error_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('PutRegion', Bin, TrUserData) -> id(decode_msg_PutRegion(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutRegionResp', Bin, TrUserData) -> id(decode_msg_PutRegionResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutCategory', Bin, TrUserData) -> id(decode_msg_PutCategory(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutCategoryResp', Bin, TrUserData) -> id(decode_msg_PutCategoryResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AuthUser', Bin, TrUserData) -> id(decode_msg_AuthUser(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AuthUserResp', Bin, TrUserData) -> id(decode_msg_AuthUserResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RegisterUser', Bin, TrUserData) -> id(decode_msg_RegisterUser(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RegisterUserResp', Bin, TrUserData) -> id(decode_msg_RegisterUserResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BrowseCategories', Bin, TrUserData) -> id(decode_msg_BrowseCategories(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BrowseCategoriesResp', Bin, TrUserData) -> id(decode_msg_BrowseCategoriesResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BrowseRegions', Bin, TrUserData) -> id(decode_msg_BrowseRegions(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BrowseRegionsResp', Bin, TrUserData) -> id(decode_msg_BrowseRegionsResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SearchByCategory', Bin, TrUserData) -> id(decode_msg_SearchByCategory(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SearchByCategoryResp', Bin, TrUserData) -> id(decode_msg_SearchByCategoryResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SearchByRegion', Bin, TrUserData) -> id(decode_msg_SearchByRegion(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SearchByRegionResp', Bin, TrUserData) -> id(decode_msg_SearchByRegionResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ViewItem', Bin, TrUserData) -> id(decode_msg_ViewItem(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ViewItemResp', Bin, TrUserData) -> id(decode_msg_ViewItemResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ViewUser', Bin, TrUserData) -> id(decode_msg_ViewUser(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ViewUserResp', Bin, TrUserData) -> id(decode_msg_ViewUserResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ViewItemBidHist', Bin, TrUserData) -> id(decode_msg_ViewItemBidHist(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ViewItemBidHistResp', Bin, TrUserData) -> id(decode_msg_ViewItemBidHistResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StoreBuyNow', Bin, TrUserData) -> id(decode_msg_StoreBuyNow(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StoreBuyNowResp', Bin, TrUserData) -> id(decode_msg_StoreBuyNowResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StoreBid', Bin, TrUserData) -> id(decode_msg_StoreBid(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StoreBidResp', Bin, TrUserData) -> id(decode_msg_StoreBidResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StoreComment', Bin, TrUserData) -> id(decode_msg_StoreComment(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StoreCommentResp', Bin, TrUserData) -> id(decode_msg_StoreCommentResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StoreItem', Bin, TrUserData) -> id(decode_msg_StoreItem(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StoreItemResp', Bin, TrUserData) -> id(decode_msg_StoreItemResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AboutMe', Bin, TrUserData) -> id(decode_msg_AboutMe(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AboutMeResp', Bin, TrUserData) -> id(decode_msg_AboutMeResp(Bin, TrUserData), TrUserData).



decode_msg_PutRegion(Bin, TrUserData) -> dfp_read_field_def_PutRegion(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_PutRegion(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_PutRegion_region_name(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PutRegion(<<>>, 0, 0, F@_1, _) -> #{region_name => F@_1};
dfp_read_field_def_PutRegion(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_PutRegion(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_PutRegion(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutRegion(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_PutRegion(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PutRegion_region_name(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PutRegion(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_PutRegion(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_PutRegion(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_PutRegion(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_PutRegion(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PutRegion(<<>>, 0, 0, F@_1, _) -> #{region_name => F@_1}.

d_field_PutRegion_region_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_PutRegion_region_name(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_PutRegion_region_name(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PutRegion(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_PutRegion(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_PutRegion(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_PutRegion(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutRegion(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_PutRegion(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_PutRegion(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_PutRegion(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutRegion(Rest2, 0, 0, F@_1, TrUserData).

skip_group_PutRegion(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutRegion(Rest, 0, Z2, F@_1, TrUserData).

skip_32_PutRegion(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutRegion(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_PutRegion(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutRegion(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_PutRegionResp(Bin, TrUserData) -> dfp_read_field_def_PutRegionResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_PutRegionResp(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_PutRegionResp_region_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PutRegionResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_PutRegionResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PutRegionResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_PutRegionResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_PutRegionResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_PutRegionResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutRegionResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_PutRegionResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PutRegionResp_region_id(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_PutRegionResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PutRegionResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_PutRegionResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_PutRegionResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_PutRegionResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_PutRegionResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PutRegionResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_PutRegionResp_region_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_PutRegionResp_region_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_PutRegionResp_region_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PutRegionResp(RestF, 0, 0, id({region_id, NewFValue}, TrUserData), TrUserData).

d_field_PutRegionResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_PutRegionResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_PutRegionResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_PutRegionResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_PutRegionResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_PutRegionResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_PutRegionResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutRegionResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_PutRegionResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_PutRegionResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_PutRegionResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutRegionResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_PutRegionResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutRegionResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_PutRegionResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutRegionResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_PutRegionResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutRegionResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_PutCategory(Bin, TrUserData) -> dfp_read_field_def_PutCategory(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_PutCategory(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_PutCategory_category_name(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PutCategory(<<>>, 0, 0, F@_1, _) -> #{category_name => F@_1};
dfp_read_field_def_PutCategory(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_PutCategory(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_PutCategory(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutCategory(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_PutCategory(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PutCategory_category_name(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PutCategory(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_PutCategory(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_PutCategory(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_PutCategory(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_PutCategory(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PutCategory(<<>>, 0, 0, F@_1, _) -> #{category_name => F@_1}.

d_field_PutCategory_category_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_PutCategory_category_name(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_PutCategory_category_name(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PutCategory(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_PutCategory(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_PutCategory(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_PutCategory(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutCategory(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_PutCategory(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_PutCategory(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_PutCategory(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutCategory(Rest2, 0, 0, F@_1, TrUserData).

skip_group_PutCategory(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutCategory(Rest, 0, Z2, F@_1, TrUserData).

skip_32_PutCategory(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutCategory(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_PutCategory(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutCategory(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_PutCategoryResp(Bin, TrUserData) -> dfp_read_field_def_PutCategoryResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_PutCategoryResp(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_PutCategoryResp_category_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PutCategoryResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_PutCategoryResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PutCategoryResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_PutCategoryResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_PutCategoryResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_PutCategoryResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutCategoryResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_PutCategoryResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PutCategoryResp_category_id(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_PutCategoryResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PutCategoryResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_PutCategoryResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_PutCategoryResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_PutCategoryResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_PutCategoryResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PutCategoryResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_PutCategoryResp_category_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_PutCategoryResp_category_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_PutCategoryResp_category_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PutCategoryResp(RestF, 0, 0, id({category_id, NewFValue}, TrUserData), TrUserData).

d_field_PutCategoryResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_PutCategoryResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_PutCategoryResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_PutCategoryResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_PutCategoryResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_PutCategoryResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_PutCategoryResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutCategoryResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_PutCategoryResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_PutCategoryResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_PutCategoryResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutCategoryResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_PutCategoryResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutCategoryResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_PutCategoryResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutCategoryResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_PutCategoryResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutCategoryResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_AuthUser(Bin, TrUserData) -> dfp_read_field_def_AuthUser(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_AuthUser(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_AuthUser_username(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthUser(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_AuthUser_password(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthUser(<<>>, 0, 0, F@_1, F@_2, _) -> #{username => F@_1, password => F@_2};
dfp_read_field_def_AuthUser(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_AuthUser(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_AuthUser(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_AuthUser(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_AuthUser(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_AuthUser_username(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_AuthUser_password(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_AuthUser(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_AuthUser(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_AuthUser(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_AuthUser(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_AuthUser(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_AuthUser(<<>>, 0, 0, F@_1, F@_2, _) -> #{username => F@_1, password => F@_2}.

d_field_AuthUser_username(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_AuthUser_username(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthUser_username(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_AuthUser(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_AuthUser_password(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_AuthUser_password(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthUser_password(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_AuthUser(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_AuthUser(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_AuthUser(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_AuthUser(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_AuthUser(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_AuthUser(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_AuthUser(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AuthUser(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUser(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_AuthUser(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUser(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_AuthUser(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_AuthUser(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_AuthUser(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_AuthUser(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_AuthUserResp(Bin, TrUserData) -> dfp_read_field_def_AuthUserResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_AuthUserResp(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_AuthUserResp_user_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_AuthUserResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_AuthUserResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_AuthUserResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_AuthUserResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_AuthUserResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_AuthUserResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_AuthUserResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AuthUserResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_AuthUserResp_user_id(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_AuthUserResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_AuthUserResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_AuthUserResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_AuthUserResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_AuthUserResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_AuthUserResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_AuthUserResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_AuthUserResp_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_AuthUserResp_user_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_AuthUserResp_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_AuthUserResp(RestF, 0, 0, id({user_id, NewFValue}, TrUserData), TrUserData).

d_field_AuthUserResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_AuthUserResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_AuthUserResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AuthUserResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_AuthUserResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_AuthUserResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_AuthUserResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_AuthUserResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_AuthUserResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_AuthUserResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AuthUserResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthUserResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_AuthUserResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthUserResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_AuthUserResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_AuthUserResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_AuthUserResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_AuthUserResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_RegisterUser(Bin, TrUserData) -> dfp_read_field_def_RegisterUser(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_RegisterUser(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_RegisterUser_username(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RegisterUser(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_RegisterUser_password(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RegisterUser(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_RegisterUser_region_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RegisterUser(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{username => F@_1, password => F@_2, region_id => F@_3};
dfp_read_field_def_RegisterUser(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_RegisterUser(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_RegisterUser(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_RegisterUser(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_RegisterUser(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_RegisterUser_username(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_RegisterUser_password(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_RegisterUser_region_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_RegisterUser(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_RegisterUser(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_RegisterUser(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_RegisterUser(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_RegisterUser(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_RegisterUser(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{username => F@_1, password => F@_2, region_id => F@_3}.

d_field_RegisterUser_username(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_RegisterUser_username(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_RegisterUser_username(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_RegisterUser(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_RegisterUser_password(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_RegisterUser_password(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_RegisterUser_password(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_RegisterUser(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_RegisterUser_region_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_RegisterUser_region_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_RegisterUser_region_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_RegisterUser(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_RegisterUser(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_RegisterUser(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_RegisterUser(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_RegisterUser(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_RegisterUser(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_RegisterUser(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_RegisterUser(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RegisterUser(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_RegisterUser(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RegisterUser(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_RegisterUser(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_RegisterUser(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_RegisterUser(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_RegisterUser(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_RegisterUserResp(Bin, TrUserData) -> dfp_read_field_def_RegisterUserResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_RegisterUserResp(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_RegisterUserResp_user_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_RegisterUserResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_RegisterUserResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_RegisterUserResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_RegisterUserResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_RegisterUserResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_RegisterUserResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_RegisterUserResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_RegisterUserResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_RegisterUserResp_user_id(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_RegisterUserResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_RegisterUserResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_RegisterUserResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_RegisterUserResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_RegisterUserResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_RegisterUserResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_RegisterUserResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_RegisterUserResp_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_RegisterUserResp_user_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_RegisterUserResp_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_RegisterUserResp(RestF, 0, 0, id({user_id, NewFValue}, TrUserData), TrUserData).

d_field_RegisterUserResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_RegisterUserResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_RegisterUserResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_RegisterUserResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_RegisterUserResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_RegisterUserResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_RegisterUserResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_RegisterUserResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_RegisterUserResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_RegisterUserResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_RegisterUserResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RegisterUserResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_RegisterUserResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RegisterUserResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_RegisterUserResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_RegisterUserResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_RegisterUserResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_RegisterUserResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_BrowseCategories(Bin, TrUserData) -> dfp_read_field_def_BrowseCategories(Bin, 0, 0, TrUserData).

dfp_read_field_def_BrowseCategories(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_BrowseCategories(Other, Z1, Z2, TrUserData) -> dg_read_field_def_BrowseCategories(Other, Z1, Z2, TrUserData).

dg_read_field_def_BrowseCategories(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_BrowseCategories(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_BrowseCategories(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_BrowseCategories(Rest, 0, 0, TrUserData);
        1 -> skip_64_BrowseCategories(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_BrowseCategories(Rest, 0, 0, TrUserData);
        3 -> skip_group_BrowseCategories(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_BrowseCategories(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_BrowseCategories(<<>>, 0, 0, _) -> #{}.

skip_varint_BrowseCategories(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_BrowseCategories(Rest, Z1, Z2, TrUserData);
skip_varint_BrowseCategories(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_BrowseCategories(Rest, Z1, Z2, TrUserData).

skip_length_delimited_BrowseCategories(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_BrowseCategories(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_BrowseCategories(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BrowseCategories(Rest2, 0, 0, TrUserData).

skip_group_BrowseCategories(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BrowseCategories(Rest, 0, Z2, TrUserData).

skip_32_BrowseCategories(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_BrowseCategories(Rest, Z1, Z2, TrUserData).

skip_64_BrowseCategories(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_BrowseCategories(Rest, Z1, Z2, TrUserData).

decode_msg_BrowseCategoriesResp(Bin, TrUserData) -> dfp_read_field_def_BrowseCategoriesResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_BrowseCategoriesResp(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_BrowseCategoriesResp_success(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_BrowseCategoriesResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_BrowseCategoriesResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_BrowseCategoriesResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_BrowseCategoriesResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_BrowseCategoriesResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_BrowseCategoriesResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_BrowseCategoriesResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_BrowseCategoriesResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_BrowseCategoriesResp_success(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_BrowseCategoriesResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_BrowseCategoriesResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_BrowseCategoriesResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_BrowseCategoriesResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_BrowseCategoriesResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_BrowseCategoriesResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_BrowseCategoriesResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_BrowseCategoriesResp_success(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_BrowseCategoriesResp_success(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_BrowseCategoriesResp_success(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_BrowseCategoriesResp(RestF, 0, 0, id({success, NewFValue}, TrUserData), TrUserData).

d_field_BrowseCategoriesResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_BrowseCategoriesResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_BrowseCategoriesResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_BrowseCategoriesResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_BrowseCategoriesResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_BrowseCategoriesResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_BrowseCategoriesResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_BrowseCategoriesResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_BrowseCategoriesResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_BrowseCategoriesResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_BrowseCategoriesResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BrowseCategoriesResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_BrowseCategoriesResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BrowseCategoriesResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_BrowseCategoriesResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_BrowseCategoriesResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_BrowseCategoriesResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_BrowseCategoriesResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_BrowseRegions(Bin, TrUserData) -> dfp_read_field_def_BrowseRegions(Bin, 0, 0, TrUserData).

dfp_read_field_def_BrowseRegions(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_BrowseRegions(Other, Z1, Z2, TrUserData) -> dg_read_field_def_BrowseRegions(Other, Z1, Z2, TrUserData).

dg_read_field_def_BrowseRegions(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_BrowseRegions(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_BrowseRegions(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_BrowseRegions(Rest, 0, 0, TrUserData);
        1 -> skip_64_BrowseRegions(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_BrowseRegions(Rest, 0, 0, TrUserData);
        3 -> skip_group_BrowseRegions(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_BrowseRegions(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_BrowseRegions(<<>>, 0, 0, _) -> #{}.

skip_varint_BrowseRegions(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_BrowseRegions(Rest, Z1, Z2, TrUserData);
skip_varint_BrowseRegions(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_BrowseRegions(Rest, Z1, Z2, TrUserData).

skip_length_delimited_BrowseRegions(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_BrowseRegions(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_BrowseRegions(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BrowseRegions(Rest2, 0, 0, TrUserData).

skip_group_BrowseRegions(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BrowseRegions(Rest, 0, Z2, TrUserData).

skip_32_BrowseRegions(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_BrowseRegions(Rest, Z1, Z2, TrUserData).

skip_64_BrowseRegions(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_BrowseRegions(Rest, Z1, Z2, TrUserData).

decode_msg_BrowseRegionsResp(Bin, TrUserData) -> dfp_read_field_def_BrowseRegionsResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_BrowseRegionsResp(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_BrowseRegionsResp_success(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_BrowseRegionsResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_BrowseRegionsResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_BrowseRegionsResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_BrowseRegionsResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_BrowseRegionsResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_BrowseRegionsResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_BrowseRegionsResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_BrowseRegionsResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_BrowseRegionsResp_success(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_BrowseRegionsResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_BrowseRegionsResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_BrowseRegionsResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_BrowseRegionsResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_BrowseRegionsResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_BrowseRegionsResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_BrowseRegionsResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_BrowseRegionsResp_success(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_BrowseRegionsResp_success(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_BrowseRegionsResp_success(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_BrowseRegionsResp(RestF, 0, 0, id({success, NewFValue}, TrUserData), TrUserData).

d_field_BrowseRegionsResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_BrowseRegionsResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_BrowseRegionsResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_BrowseRegionsResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_BrowseRegionsResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_BrowseRegionsResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_BrowseRegionsResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_BrowseRegionsResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_BrowseRegionsResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_BrowseRegionsResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_BrowseRegionsResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BrowseRegionsResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_BrowseRegionsResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BrowseRegionsResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_BrowseRegionsResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_BrowseRegionsResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_BrowseRegionsResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_BrowseRegionsResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_SearchByCategory(Bin, TrUserData) -> dfp_read_field_def_SearchByCategory(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_SearchByCategory(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_SearchByCategory_category_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_SearchByCategory(<<>>, 0, 0, F@_1, _) -> #{category_id => F@_1};
dfp_read_field_def_SearchByCategory(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_SearchByCategory(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_SearchByCategory(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_SearchByCategory(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_SearchByCategory(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_SearchByCategory_category_id(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_SearchByCategory(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_SearchByCategory(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_SearchByCategory(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_SearchByCategory(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_SearchByCategory(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_SearchByCategory(<<>>, 0, 0, F@_1, _) -> #{category_id => F@_1}.

d_field_SearchByCategory_category_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_SearchByCategory_category_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_SearchByCategory_category_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_SearchByCategory(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_SearchByCategory(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_SearchByCategory(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_SearchByCategory(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_SearchByCategory(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_SearchByCategory(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_SearchByCategory(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SearchByCategory(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SearchByCategory(Rest2, 0, 0, F@_1, TrUserData).

skip_group_SearchByCategory(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SearchByCategory(Rest, 0, Z2, F@_1, TrUserData).

skip_32_SearchByCategory(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_SearchByCategory(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_SearchByCategory(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_SearchByCategory(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_SearchByCategoryResp(Bin, TrUserData) -> dfp_read_field_def_SearchByCategoryResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_SearchByCategoryResp(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_SearchByCategoryResp_success(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_SearchByCategoryResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_SearchByCategoryResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_SearchByCategoryResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_SearchByCategoryResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_SearchByCategoryResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_SearchByCategoryResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_SearchByCategoryResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_SearchByCategoryResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_SearchByCategoryResp_success(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_SearchByCategoryResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_SearchByCategoryResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_SearchByCategoryResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_SearchByCategoryResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_SearchByCategoryResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_SearchByCategoryResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_SearchByCategoryResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_SearchByCategoryResp_success(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_SearchByCategoryResp_success(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_SearchByCategoryResp_success(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_SearchByCategoryResp(RestF, 0, 0, id({success, NewFValue}, TrUserData), TrUserData).

d_field_SearchByCategoryResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_SearchByCategoryResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_SearchByCategoryResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_SearchByCategoryResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_SearchByCategoryResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_SearchByCategoryResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_SearchByCategoryResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_SearchByCategoryResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_SearchByCategoryResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_SearchByCategoryResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SearchByCategoryResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SearchByCategoryResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_SearchByCategoryResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SearchByCategoryResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_SearchByCategoryResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_SearchByCategoryResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_SearchByCategoryResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_SearchByCategoryResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_SearchByRegion(Bin, TrUserData) -> dfp_read_field_def_SearchByRegion(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_SearchByRegion(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_SearchByRegion_category_id(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_SearchByRegion(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_SearchByRegion_region_id(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_SearchByRegion(<<>>, 0, 0, F@_1, F@_2, _) -> #{category_id => F@_1, region_id => F@_2};
dfp_read_field_def_SearchByRegion(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_SearchByRegion(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_SearchByRegion(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_SearchByRegion(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_SearchByRegion(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_SearchByRegion_category_id(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_SearchByRegion_region_id(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_SearchByRegion(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_SearchByRegion(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_SearchByRegion(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_SearchByRegion(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_SearchByRegion(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_SearchByRegion(<<>>, 0, 0, F@_1, F@_2, _) -> #{category_id => F@_1, region_id => F@_2}.

d_field_SearchByRegion_category_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_SearchByRegion_category_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_SearchByRegion_category_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_SearchByRegion(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_SearchByRegion_region_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_SearchByRegion_region_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_SearchByRegion_region_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_SearchByRegion(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_SearchByRegion(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_SearchByRegion(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_SearchByRegion(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SearchByRegion(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_SearchByRegion(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_SearchByRegion(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_SearchByRegion(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SearchByRegion(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_SearchByRegion(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SearchByRegion(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_SearchByRegion(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SearchByRegion(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_SearchByRegion(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SearchByRegion(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_SearchByRegionResp(Bin, TrUserData) -> dfp_read_field_def_SearchByRegionResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_SearchByRegionResp(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_SearchByRegionResp_success(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_SearchByRegionResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_SearchByRegionResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_SearchByRegionResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_SearchByRegionResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_SearchByRegionResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_SearchByRegionResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_SearchByRegionResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_SearchByRegionResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_SearchByRegionResp_success(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_SearchByRegionResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_SearchByRegionResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_SearchByRegionResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_SearchByRegionResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_SearchByRegionResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_SearchByRegionResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_SearchByRegionResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_SearchByRegionResp_success(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_SearchByRegionResp_success(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_SearchByRegionResp_success(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_SearchByRegionResp(RestF, 0, 0, id({success, NewFValue}, TrUserData), TrUserData).

d_field_SearchByRegionResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_SearchByRegionResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_SearchByRegionResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_SearchByRegionResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_SearchByRegionResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_SearchByRegionResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_SearchByRegionResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_SearchByRegionResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_SearchByRegionResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_SearchByRegionResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SearchByRegionResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SearchByRegionResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_SearchByRegionResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SearchByRegionResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_SearchByRegionResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_SearchByRegionResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_SearchByRegionResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_SearchByRegionResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ViewItem(Bin, TrUserData) -> dfp_read_field_def_ViewItem(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_ViewItem(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ViewItem_item_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ViewItem(<<>>, 0, 0, F@_1, _) -> #{item_id => F@_1};
dfp_read_field_def_ViewItem(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ViewItem(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ViewItem(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ViewItem(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ViewItem(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ViewItem_item_id(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ViewItem(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ViewItem(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ViewItem(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ViewItem(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ViewItem(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ViewItem(<<>>, 0, 0, F@_1, _) -> #{item_id => F@_1}.

d_field_ViewItem_item_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ViewItem_item_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ViewItem_item_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_ViewItem(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_ViewItem(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ViewItem(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ViewItem(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItem(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ViewItem(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ViewItem(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ViewItem(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ViewItem(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ViewItem(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ViewItem(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ViewItem(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItem(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ViewItem(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItem(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ViewItemResp(Bin, TrUserData) -> dfp_read_field_def_ViewItemResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ViewItemResp(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ViewItemResp_success(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ViewItemResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ViewItemResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ViewItemResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_ViewItemResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ViewItemResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ViewItemResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ViewItemResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ViewItemResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ViewItemResp_success(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_ViewItemResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ViewItemResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ViewItemResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ViewItemResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ViewItemResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ViewItemResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ViewItemResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_ViewItemResp_success(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ViewItemResp_success(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ViewItemResp_success(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ViewItemResp(RestF, 0, 0, id({success, NewFValue}, TrUserData), TrUserData).

d_field_ViewItemResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ViewItemResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ViewItemResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ViewItemResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_ViewItemResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ViewItemResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ViewItemResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItemResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ViewItemResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ViewItemResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ViewItemResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ViewItemResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ViewItemResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ViewItemResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ViewItemResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItemResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ViewItemResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItemResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ViewUser(Bin, TrUserData) -> dfp_read_field_def_ViewUser(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_ViewUser(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ViewUser_user_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ViewUser(<<>>, 0, 0, F@_1, _) -> #{user_id => F@_1};
dfp_read_field_def_ViewUser(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ViewUser(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ViewUser(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ViewUser(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ViewUser(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ViewUser_user_id(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ViewUser(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ViewUser(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ViewUser(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ViewUser(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ViewUser(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ViewUser(<<>>, 0, 0, F@_1, _) -> #{user_id => F@_1}.

d_field_ViewUser_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ViewUser_user_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ViewUser_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_ViewUser(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_ViewUser(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ViewUser(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ViewUser(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewUser(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ViewUser(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ViewUser(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ViewUser(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ViewUser(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ViewUser(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ViewUser(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ViewUser(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewUser(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ViewUser(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewUser(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ViewUserResp(Bin, TrUserData) -> dfp_read_field_def_ViewUserResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ViewUserResp(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ViewUserResp_success(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ViewUserResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ViewUserResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ViewUserResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_ViewUserResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ViewUserResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ViewUserResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ViewUserResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ViewUserResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ViewUserResp_success(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_ViewUserResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ViewUserResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ViewUserResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ViewUserResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ViewUserResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ViewUserResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ViewUserResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_ViewUserResp_success(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ViewUserResp_success(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ViewUserResp_success(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ViewUserResp(RestF, 0, 0, id({success, NewFValue}, TrUserData), TrUserData).

d_field_ViewUserResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ViewUserResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ViewUserResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ViewUserResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_ViewUserResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ViewUserResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ViewUserResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewUserResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ViewUserResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ViewUserResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ViewUserResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ViewUserResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ViewUserResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ViewUserResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ViewUserResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewUserResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ViewUserResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewUserResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ViewItemBidHist(Bin, TrUserData) -> dfp_read_field_def_ViewItemBidHist(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_ViewItemBidHist(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ViewItemBidHist_item_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ViewItemBidHist(<<>>, 0, 0, F@_1, _) -> #{item_id => F@_1};
dfp_read_field_def_ViewItemBidHist(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ViewItemBidHist(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ViewItemBidHist(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ViewItemBidHist(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ViewItemBidHist(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ViewItemBidHist_item_id(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ViewItemBidHist(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ViewItemBidHist(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ViewItemBidHist(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ViewItemBidHist(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ViewItemBidHist(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ViewItemBidHist(<<>>, 0, 0, F@_1, _) -> #{item_id => F@_1}.

d_field_ViewItemBidHist_item_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ViewItemBidHist_item_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ViewItemBidHist_item_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_ViewItemBidHist(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_ViewItemBidHist(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ViewItemBidHist(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ViewItemBidHist(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItemBidHist(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ViewItemBidHist(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ViewItemBidHist(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ViewItemBidHist(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ViewItemBidHist(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ViewItemBidHist(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ViewItemBidHist(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ViewItemBidHist(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItemBidHist(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ViewItemBidHist(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItemBidHist(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ViewItemBidHistResp(Bin, TrUserData) -> dfp_read_field_def_ViewItemBidHistResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ViewItemBidHistResp(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ViewItemBidHistResp_success(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ViewItemBidHistResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ViewItemBidHistResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ViewItemBidHistResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_ViewItemBidHistResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ViewItemBidHistResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ViewItemBidHistResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ViewItemBidHistResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ViewItemBidHistResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ViewItemBidHistResp_success(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_ViewItemBidHistResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ViewItemBidHistResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ViewItemBidHistResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ViewItemBidHistResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ViewItemBidHistResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ViewItemBidHistResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ViewItemBidHistResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_ViewItemBidHistResp_success(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ViewItemBidHistResp_success(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ViewItemBidHistResp_success(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ViewItemBidHistResp(RestF, 0, 0, id({success, NewFValue}, TrUserData), TrUserData).

d_field_ViewItemBidHistResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ViewItemBidHistResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ViewItemBidHistResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ViewItemBidHistResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_ViewItemBidHistResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ViewItemBidHistResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ViewItemBidHistResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItemBidHistResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ViewItemBidHistResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ViewItemBidHistResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ViewItemBidHistResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ViewItemBidHistResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ViewItemBidHistResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ViewItemBidHistResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ViewItemBidHistResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItemBidHistResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ViewItemBidHistResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ViewItemBidHistResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_StoreBuyNow(Bin, TrUserData) -> dfp_read_field_def_StoreBuyNow(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_StoreBuyNow(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_StoreBuyNow_on_item_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_StoreBuyNow(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_StoreBuyNow_buyer_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_StoreBuyNow(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_StoreBuyNow_quantity(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_StoreBuyNow(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{on_item_id => F@_1, buyer_id => F@_2, quantity => F@_3};
dfp_read_field_def_StoreBuyNow(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_StoreBuyNow(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_StoreBuyNow(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_StoreBuyNow(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_StoreBuyNow(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StoreBuyNow_on_item_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_StoreBuyNow_buyer_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_StoreBuyNow_quantity(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StoreBuyNow(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_StoreBuyNow(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_StoreBuyNow(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_StoreBuyNow(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_StoreBuyNow(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_StoreBuyNow(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{on_item_id => F@_1, buyer_id => F@_2, quantity => F@_3}.

d_field_StoreBuyNow_on_item_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_StoreBuyNow_on_item_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_StoreBuyNow_on_item_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreBuyNow(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_StoreBuyNow_buyer_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_StoreBuyNow_buyer_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_StoreBuyNow_buyer_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreBuyNow(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_StoreBuyNow_quantity(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_StoreBuyNow_quantity(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_StoreBuyNow_quantity(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StoreBuyNow(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_StoreBuyNow(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_StoreBuyNow(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_StoreBuyNow(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_StoreBuyNow(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_StoreBuyNow(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_StoreBuyNow(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_StoreBuyNow(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StoreBuyNow(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_StoreBuyNow(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StoreBuyNow(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_StoreBuyNow(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_StoreBuyNow(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_StoreBuyNow(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_StoreBuyNow(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_StoreBuyNowResp(Bin, TrUserData) -> dfp_read_field_def_StoreBuyNowResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_StoreBuyNowResp(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_StoreBuyNowResp_buy_now_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_StoreBuyNowResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_StoreBuyNowResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_StoreBuyNowResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_StoreBuyNowResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_StoreBuyNowResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_StoreBuyNowResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_StoreBuyNowResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_StoreBuyNowResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StoreBuyNowResp_buy_now_id(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_StoreBuyNowResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StoreBuyNowResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_StoreBuyNowResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_StoreBuyNowResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_StoreBuyNowResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_StoreBuyNowResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_StoreBuyNowResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_StoreBuyNowResp_buy_now_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_StoreBuyNowResp_buy_now_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_StoreBuyNowResp_buy_now_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreBuyNowResp(RestF, 0, 0, id({buy_now_id, NewFValue}, TrUserData), TrUserData).

d_field_StoreBuyNowResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_StoreBuyNowResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_StoreBuyNowResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StoreBuyNowResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_StoreBuyNowResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_StoreBuyNowResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_StoreBuyNowResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreBuyNowResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_StoreBuyNowResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_StoreBuyNowResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_StoreBuyNowResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StoreBuyNowResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_StoreBuyNowResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StoreBuyNowResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_StoreBuyNowResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreBuyNowResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_StoreBuyNowResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreBuyNowResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_StoreBid(Bin, TrUserData) -> dfp_read_field_def_StoreBid(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_StoreBid(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_StoreBid_on_item_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_StoreBid(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_StoreBid_bidder_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_StoreBid(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_StoreBid_value(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_StoreBid(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{on_item_id => F@_1, bidder_id => F@_2, value => F@_3};
dfp_read_field_def_StoreBid(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_StoreBid(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_StoreBid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_StoreBid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_StoreBid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StoreBid_on_item_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_StoreBid_bidder_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_StoreBid_value(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StoreBid(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_StoreBid(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_StoreBid(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_StoreBid(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_StoreBid(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_StoreBid(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{on_item_id => F@_1, bidder_id => F@_2, value => F@_3}.

d_field_StoreBid_on_item_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_StoreBid_on_item_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_StoreBid_on_item_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreBid(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_StoreBid_bidder_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_StoreBid_bidder_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_StoreBid_bidder_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreBid(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_StoreBid_value(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_StoreBid_value(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_StoreBid_value(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StoreBid(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_StoreBid(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_StoreBid(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_StoreBid(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_StoreBid(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_StoreBid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_StoreBid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_StoreBid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StoreBid(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_StoreBid(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StoreBid(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_StoreBid(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_StoreBid(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_StoreBid(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_StoreBid(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_StoreBidResp(Bin, TrUserData) -> dfp_read_field_def_StoreBidResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_StoreBidResp(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_StoreBidResp_bid_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_StoreBidResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_StoreBidResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_StoreBidResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_StoreBidResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_StoreBidResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_StoreBidResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_StoreBidResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_StoreBidResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StoreBidResp_bid_id(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_StoreBidResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StoreBidResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_StoreBidResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_StoreBidResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_StoreBidResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_StoreBidResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_StoreBidResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_StoreBidResp_bid_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_StoreBidResp_bid_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_StoreBidResp_bid_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreBidResp(RestF, 0, 0, id({bid_id, NewFValue}, TrUserData), TrUserData).

d_field_StoreBidResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_StoreBidResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_StoreBidResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StoreBidResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_StoreBidResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_StoreBidResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_StoreBidResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreBidResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_StoreBidResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_StoreBidResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_StoreBidResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StoreBidResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_StoreBidResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StoreBidResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_StoreBidResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreBidResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_StoreBidResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreBidResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_StoreComment(Bin, TrUserData) -> dfp_read_field_def_StoreComment(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_StoreComment(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreComment_on_item_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreComment(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreComment_from_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreComment(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreComment_to_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreComment(<<37, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreComment_rating(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreComment(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreComment_body(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreComment(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{on_item_id => F@_1, from_id => F@_2, to_id => F@_3, rating => F@_4, body => F@_5};
dfp_read_field_def_StoreComment(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_StoreComment(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_StoreComment(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_StoreComment(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_StoreComment(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StoreComment_on_item_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_StoreComment_from_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_StoreComment_to_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        37 -> d_field_StoreComment_rating(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_StoreComment_body(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StoreComment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_StoreComment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_StoreComment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_StoreComment(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_StoreComment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_StoreComment(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{on_item_id => F@_1, from_id => F@_2, to_id => F@_3, rating => F@_4, body => F@_5}.

d_field_StoreComment_on_item_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_StoreComment_on_item_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StoreComment_on_item_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreComment(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_StoreComment_from_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_StoreComment_from_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StoreComment_from_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreComment(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_StoreComment_to_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_StoreComment_to_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StoreComment_to_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreComment(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_StoreComment_rating(<<Value:32/little-signed, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) -> dfp_read_field_def_StoreComment(Rest, Z1, Z2, F@_1, F@_2, F@_3, id(Value, TrUserData), F@_5, TrUserData).

d_field_StoreComment_body(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_StoreComment_body(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StoreComment_body(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreComment(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_StoreComment(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_StoreComment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_StoreComment(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StoreComment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_StoreComment(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_StoreComment(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_StoreComment(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StoreComment(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_StoreComment(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StoreComment(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_StoreComment(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StoreComment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_StoreComment(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StoreComment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_StoreCommentResp(Bin, TrUserData) -> dfp_read_field_def_StoreCommentResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_StoreCommentResp(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_StoreCommentResp_comment_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_StoreCommentResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_StoreCommentResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_StoreCommentResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_StoreCommentResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_StoreCommentResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_StoreCommentResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_StoreCommentResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_StoreCommentResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StoreCommentResp_comment_id(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_StoreCommentResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StoreCommentResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_StoreCommentResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_StoreCommentResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_StoreCommentResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_StoreCommentResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_StoreCommentResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_StoreCommentResp_comment_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_StoreCommentResp_comment_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_StoreCommentResp_comment_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreCommentResp(RestF, 0, 0, id({comment_id, NewFValue}, TrUserData), TrUserData).

d_field_StoreCommentResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_StoreCommentResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_StoreCommentResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StoreCommentResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_StoreCommentResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_StoreCommentResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_StoreCommentResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreCommentResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_StoreCommentResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_StoreCommentResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_StoreCommentResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StoreCommentResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_StoreCommentResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StoreCommentResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_StoreCommentResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreCommentResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_StoreCommentResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreCommentResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_StoreItem(Bin, TrUserData) -> dfp_read_field_def_StoreItem(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_StoreItem(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreItem_item_name(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreItem(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreItem_description(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreItem(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreItem_quantity(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreItem(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreItem_category_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreItem(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StoreItem_seller_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StoreItem(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{item_name => F@_1, description => F@_2, quantity => F@_3, category_id => F@_4, seller_id => F@_5};
dfp_read_field_def_StoreItem(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_StoreItem(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_StoreItem(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_StoreItem(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_StoreItem(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StoreItem_item_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_StoreItem_description(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> d_field_StoreItem_quantity(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_StoreItem_category_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_StoreItem_seller_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StoreItem(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_StoreItem(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_StoreItem(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_StoreItem(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_StoreItem(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_StoreItem(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{item_name => F@_1, description => F@_2, quantity => F@_3, category_id => F@_4, seller_id => F@_5}.

d_field_StoreItem_item_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_StoreItem_item_name(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StoreItem_item_name(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreItem(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_StoreItem_description(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_StoreItem_description(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StoreItem_description(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreItem(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_StoreItem_quantity(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_StoreItem_quantity(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StoreItem_quantity(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StoreItem(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_StoreItem_category_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_StoreItem_category_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StoreItem_category_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreItem(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_StoreItem_seller_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_StoreItem_seller_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StoreItem_seller_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreItem(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_StoreItem(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_StoreItem(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_StoreItem(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StoreItem(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_StoreItem(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_StoreItem(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_StoreItem(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StoreItem(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_StoreItem(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StoreItem(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_StoreItem(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StoreItem(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_StoreItem(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StoreItem(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_StoreItemResp(Bin, TrUserData) -> dfp_read_field_def_StoreItemResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_StoreItemResp(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_StoreItemResp_item_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_StoreItemResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_StoreItemResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_StoreItemResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_StoreItemResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_StoreItemResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_StoreItemResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_StoreItemResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_StoreItemResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StoreItemResp_item_id(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_StoreItemResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StoreItemResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_StoreItemResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_StoreItemResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_StoreItemResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_StoreItemResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_StoreItemResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_StoreItemResp_item_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_StoreItemResp_item_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_StoreItemResp_item_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StoreItemResp(RestF, 0, 0, id({item_id, NewFValue}, TrUserData), TrUserData).

d_field_StoreItemResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_StoreItemResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_StoreItemResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StoreItemResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_StoreItemResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_StoreItemResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_StoreItemResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreItemResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_StoreItemResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_StoreItemResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_StoreItemResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StoreItemResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_StoreItemResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StoreItemResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_StoreItemResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreItemResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_StoreItemResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StoreItemResp(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_AboutMe(Bin, TrUserData) -> dfp_read_field_def_AboutMe(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_AboutMe(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_AboutMe_user_id(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_AboutMe(<<>>, 0, 0, F@_1, _) -> #{user_id => F@_1};
dfp_read_field_def_AboutMe(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_AboutMe(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_AboutMe(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_AboutMe(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AboutMe(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_AboutMe_user_id(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_AboutMe(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_AboutMe(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_AboutMe(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_AboutMe(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_AboutMe(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_AboutMe(<<>>, 0, 0, F@_1, _) -> #{user_id => F@_1}.

d_field_AboutMe_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_AboutMe_user_id(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_AboutMe_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_AboutMe(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_AboutMe(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_AboutMe(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_AboutMe(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_AboutMe(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_AboutMe(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_AboutMe(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AboutMe(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AboutMe(Rest2, 0, 0, F@_1, TrUserData).

skip_group_AboutMe(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AboutMe(Rest, 0, Z2, F@_1, TrUserData).

skip_32_AboutMe(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_AboutMe(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_AboutMe(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_AboutMe(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_AboutMeResp(Bin, TrUserData) -> dfp_read_field_def_AboutMeResp(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_AboutMeResp(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_AboutMeResp_success(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_AboutMeResp(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_AboutMeResp_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_AboutMeResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_AboutMeResp(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_AboutMeResp(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_AboutMeResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_AboutMeResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AboutMeResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_AboutMeResp_success(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_AboutMeResp_error_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_AboutMeResp(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_AboutMeResp(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_AboutMeResp(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_AboutMeResp(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_AboutMeResp(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_AboutMeResp(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_AboutMeResp_success(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_AboutMeResp_success(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_AboutMeResp_success(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AboutMeResp(RestF, 0, 0, id({success, NewFValue}, TrUserData), TrUserData).

d_field_AboutMeResp_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_AboutMeResp_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_AboutMeResp_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AboutMeResp(RestF, 0, 0, id({error_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_AboutMeResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_AboutMeResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_AboutMeResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_AboutMeResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_AboutMeResp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_AboutMeResp(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AboutMeResp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AboutMeResp(Rest2, 0, 0, F@_1, TrUserData).

skip_group_AboutMeResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AboutMeResp(Rest, 0, Z2, F@_1, TrUserData).

skip_32_AboutMeResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_AboutMeResp(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_AboutMeResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_AboutMeResp(Rest, Z1, Z2, F@_1, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'PutRegion' -> merge_msg_PutRegion(Prev, New, TrUserData);
        'PutRegionResp' -> merge_msg_PutRegionResp(Prev, New, TrUserData);
        'PutCategory' -> merge_msg_PutCategory(Prev, New, TrUserData);
        'PutCategoryResp' -> merge_msg_PutCategoryResp(Prev, New, TrUserData);
        'AuthUser' -> merge_msg_AuthUser(Prev, New, TrUserData);
        'AuthUserResp' -> merge_msg_AuthUserResp(Prev, New, TrUserData);
        'RegisterUser' -> merge_msg_RegisterUser(Prev, New, TrUserData);
        'RegisterUserResp' -> merge_msg_RegisterUserResp(Prev, New, TrUserData);
        'BrowseCategories' -> merge_msg_BrowseCategories(Prev, New, TrUserData);
        'BrowseCategoriesResp' -> merge_msg_BrowseCategoriesResp(Prev, New, TrUserData);
        'BrowseRegions' -> merge_msg_BrowseRegions(Prev, New, TrUserData);
        'BrowseRegionsResp' -> merge_msg_BrowseRegionsResp(Prev, New, TrUserData);
        'SearchByCategory' -> merge_msg_SearchByCategory(Prev, New, TrUserData);
        'SearchByCategoryResp' -> merge_msg_SearchByCategoryResp(Prev, New, TrUserData);
        'SearchByRegion' -> merge_msg_SearchByRegion(Prev, New, TrUserData);
        'SearchByRegionResp' -> merge_msg_SearchByRegionResp(Prev, New, TrUserData);
        'ViewItem' -> merge_msg_ViewItem(Prev, New, TrUserData);
        'ViewItemResp' -> merge_msg_ViewItemResp(Prev, New, TrUserData);
        'ViewUser' -> merge_msg_ViewUser(Prev, New, TrUserData);
        'ViewUserResp' -> merge_msg_ViewUserResp(Prev, New, TrUserData);
        'ViewItemBidHist' -> merge_msg_ViewItemBidHist(Prev, New, TrUserData);
        'ViewItemBidHistResp' -> merge_msg_ViewItemBidHistResp(Prev, New, TrUserData);
        'StoreBuyNow' -> merge_msg_StoreBuyNow(Prev, New, TrUserData);
        'StoreBuyNowResp' -> merge_msg_StoreBuyNowResp(Prev, New, TrUserData);
        'StoreBid' -> merge_msg_StoreBid(Prev, New, TrUserData);
        'StoreBidResp' -> merge_msg_StoreBidResp(Prev, New, TrUserData);
        'StoreComment' -> merge_msg_StoreComment(Prev, New, TrUserData);
        'StoreCommentResp' -> merge_msg_StoreCommentResp(Prev, New, TrUserData);
        'StoreItem' -> merge_msg_StoreItem(Prev, New, TrUserData);
        'StoreItemResp' -> merge_msg_StoreItemResp(Prev, New, TrUserData);
        'AboutMe' -> merge_msg_AboutMe(Prev, New, TrUserData);
        'AboutMeResp' -> merge_msg_AboutMeResp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_PutRegion/3}).
merge_msg_PutRegion(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{region_name := NFregion_name}} -> S1#{region_name => NFregion_name};
        {#{region_name := PFregion_name}, _} -> S1#{region_name => PFregion_name};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_PutRegionResp/3}).
merge_msg_PutRegionResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_PutCategory/3}).
merge_msg_PutCategory(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{category_name := NFcategory_name}} -> S1#{category_name => NFcategory_name};
        {#{category_name := PFcategory_name}, _} -> S1#{category_name => PFcategory_name};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_PutCategoryResp/3}).
merge_msg_PutCategoryResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AuthUser/3}).
merge_msg_AuthUser(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} -> S1#{username => NFusername};
             {#{username := PFusername}, _} -> S1#{username => PFusername};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{password := NFpassword}} -> S2#{password => NFpassword};
        {#{password := PFpassword}, _} -> S2#{password => PFpassword};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AuthUserResp/3}).
merge_msg_AuthUserResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_RegisterUser/3}).
merge_msg_RegisterUser(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} -> S1#{username => NFusername};
             {#{username := PFusername}, _} -> S1#{username => PFusername};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{password := NFpassword}} -> S2#{password => NFpassword};
             {#{password := PFpassword}, _} -> S2#{password => PFpassword};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{region_id := NFregion_id}} -> S3#{region_id => NFregion_id};
        {#{region_id := PFregion_id}, _} -> S3#{region_id => PFregion_id};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_RegisterUserResp/3}).
merge_msg_RegisterUserResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_BrowseCategories/3}).
merge_msg_BrowseCategories(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_BrowseCategoriesResp/3}).
merge_msg_BrowseCategoriesResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_BrowseRegions/3}).
merge_msg_BrowseRegions(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_BrowseRegionsResp/3}).
merge_msg_BrowseRegionsResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_SearchByCategory/3}).
merge_msg_SearchByCategory(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{category_id := NFcategory_id}} -> S1#{category_id => NFcategory_id};
        {#{category_id := PFcategory_id}, _} -> S1#{category_id => PFcategory_id};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_SearchByCategoryResp/3}).
merge_msg_SearchByCategoryResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_SearchByRegion/3}).
merge_msg_SearchByRegion(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{category_id := NFcategory_id}} -> S1#{category_id => NFcategory_id};
             {#{category_id := PFcategory_id}, _} -> S1#{category_id => PFcategory_id};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{region_id := NFregion_id}} -> S2#{region_id => NFregion_id};
        {#{region_id := PFregion_id}, _} -> S2#{region_id => PFregion_id};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_SearchByRegionResp/3}).
merge_msg_SearchByRegionResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ViewItem/3}).
merge_msg_ViewItem(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{item_id := NFitem_id}} -> S1#{item_id => NFitem_id};
        {#{item_id := PFitem_id}, _} -> S1#{item_id => PFitem_id};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ViewItemResp/3}).
merge_msg_ViewItemResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ViewUser/3}).
merge_msg_ViewUser(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{user_id := NFuser_id}} -> S1#{user_id => NFuser_id};
        {#{user_id := PFuser_id}, _} -> S1#{user_id => PFuser_id};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ViewUserResp/3}).
merge_msg_ViewUserResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ViewItemBidHist/3}).
merge_msg_ViewItemBidHist(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{item_id := NFitem_id}} -> S1#{item_id => NFitem_id};
        {#{item_id := PFitem_id}, _} -> S1#{item_id => PFitem_id};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ViewItemBidHistResp/3}).
merge_msg_ViewItemBidHistResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_StoreBuyNow/3}).
merge_msg_StoreBuyNow(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{on_item_id := NFon_item_id}} -> S1#{on_item_id => NFon_item_id};
             {#{on_item_id := PFon_item_id}, _} -> S1#{on_item_id => PFon_item_id};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{buyer_id := NFbuyer_id}} -> S2#{buyer_id => NFbuyer_id};
             {#{buyer_id := PFbuyer_id}, _} -> S2#{buyer_id => PFbuyer_id};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{quantity := NFquantity}} -> S3#{quantity => NFquantity};
        {#{quantity := PFquantity}, _} -> S3#{quantity => PFquantity};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_StoreBuyNowResp/3}).
merge_msg_StoreBuyNowResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_StoreBid/3}).
merge_msg_StoreBid(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{on_item_id := NFon_item_id}} -> S1#{on_item_id => NFon_item_id};
             {#{on_item_id := PFon_item_id}, _} -> S1#{on_item_id => PFon_item_id};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{bidder_id := NFbidder_id}} -> S2#{bidder_id => NFbidder_id};
             {#{bidder_id := PFbidder_id}, _} -> S2#{bidder_id => PFbidder_id};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{value := NFvalue}} -> S3#{value => NFvalue};
        {#{value := PFvalue}, _} -> S3#{value => PFvalue};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_StoreBidResp/3}).
merge_msg_StoreBidResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_StoreComment/3}).
merge_msg_StoreComment(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{on_item_id := NFon_item_id}} -> S1#{on_item_id => NFon_item_id};
             {#{on_item_id := PFon_item_id}, _} -> S1#{on_item_id => PFon_item_id};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{from_id := NFfrom_id}} -> S2#{from_id => NFfrom_id};
             {#{from_id := PFfrom_id}, _} -> S2#{from_id => PFfrom_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{to_id := NFto_id}} -> S3#{to_id => NFto_id};
             {#{to_id := PFto_id}, _} -> S3#{to_id => PFto_id};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{rating := NFrating}} -> S4#{rating => NFrating};
             {#{rating := PFrating}, _} -> S4#{rating => PFrating};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{body := NFbody}} -> S5#{body => NFbody};
        {#{body := PFbody}, _} -> S5#{body => PFbody};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_StoreCommentResp/3}).
merge_msg_StoreCommentResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_StoreItem/3}).
merge_msg_StoreItem(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{item_name := NFitem_name}} -> S1#{item_name => NFitem_name};
             {#{item_name := PFitem_name}, _} -> S1#{item_name => PFitem_name};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{description := NFdescription}} -> S2#{description => NFdescription};
             {#{description := PFdescription}, _} -> S2#{description => PFdescription};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{quantity := NFquantity}} -> S3#{quantity => NFquantity};
             {#{quantity := PFquantity}, _} -> S3#{quantity => PFquantity};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{category_id := NFcategory_id}} -> S4#{category_id => NFcategory_id};
             {#{category_id := PFcategory_id}, _} -> S4#{category_id => PFcategory_id};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{seller_id := NFseller_id}} -> S5#{seller_id => NFseller_id};
        {#{seller_id := PFseller_id}, _} -> S5#{seller_id => PFseller_id};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_StoreItemResp/3}).
merge_msg_StoreItemResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AboutMe/3}).
merge_msg_AboutMe(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{user_id := NFuser_id}} -> S1#{user_id => NFuser_id};
        {#{user_id := PFuser_id}, _} -> S1#{user_id => PFuser_id};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AboutMeResp/3}).
merge_msg_AboutMeResp(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'PutRegion' -> v_msg_PutRegion(Msg, [MsgName], TrUserData);
        'PutRegionResp' -> v_msg_PutRegionResp(Msg, [MsgName], TrUserData);
        'PutCategory' -> v_msg_PutCategory(Msg, [MsgName], TrUserData);
        'PutCategoryResp' -> v_msg_PutCategoryResp(Msg, [MsgName], TrUserData);
        'AuthUser' -> v_msg_AuthUser(Msg, [MsgName], TrUserData);
        'AuthUserResp' -> v_msg_AuthUserResp(Msg, [MsgName], TrUserData);
        'RegisterUser' -> v_msg_RegisterUser(Msg, [MsgName], TrUserData);
        'RegisterUserResp' -> v_msg_RegisterUserResp(Msg, [MsgName], TrUserData);
        'BrowseCategories' -> v_msg_BrowseCategories(Msg, [MsgName], TrUserData);
        'BrowseCategoriesResp' -> v_msg_BrowseCategoriesResp(Msg, [MsgName], TrUserData);
        'BrowseRegions' -> v_msg_BrowseRegions(Msg, [MsgName], TrUserData);
        'BrowseRegionsResp' -> v_msg_BrowseRegionsResp(Msg, [MsgName], TrUserData);
        'SearchByCategory' -> v_msg_SearchByCategory(Msg, [MsgName], TrUserData);
        'SearchByCategoryResp' -> v_msg_SearchByCategoryResp(Msg, [MsgName], TrUserData);
        'SearchByRegion' -> v_msg_SearchByRegion(Msg, [MsgName], TrUserData);
        'SearchByRegionResp' -> v_msg_SearchByRegionResp(Msg, [MsgName], TrUserData);
        'ViewItem' -> v_msg_ViewItem(Msg, [MsgName], TrUserData);
        'ViewItemResp' -> v_msg_ViewItemResp(Msg, [MsgName], TrUserData);
        'ViewUser' -> v_msg_ViewUser(Msg, [MsgName], TrUserData);
        'ViewUserResp' -> v_msg_ViewUserResp(Msg, [MsgName], TrUserData);
        'ViewItemBidHist' -> v_msg_ViewItemBidHist(Msg, [MsgName], TrUserData);
        'ViewItemBidHistResp' -> v_msg_ViewItemBidHistResp(Msg, [MsgName], TrUserData);
        'StoreBuyNow' -> v_msg_StoreBuyNow(Msg, [MsgName], TrUserData);
        'StoreBuyNowResp' -> v_msg_StoreBuyNowResp(Msg, [MsgName], TrUserData);
        'StoreBid' -> v_msg_StoreBid(Msg, [MsgName], TrUserData);
        'StoreBidResp' -> v_msg_StoreBidResp(Msg, [MsgName], TrUserData);
        'StoreComment' -> v_msg_StoreComment(Msg, [MsgName], TrUserData);
        'StoreCommentResp' -> v_msg_StoreCommentResp(Msg, [MsgName], TrUserData);
        'StoreItem' -> v_msg_StoreItem(Msg, [MsgName], TrUserData);
        'StoreItemResp' -> v_msg_StoreItemResp(Msg, [MsgName], TrUserData);
        'AboutMe' -> v_msg_AboutMe(Msg, [MsgName], TrUserData);
        'AboutMeResp' -> v_msg_AboutMeResp(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_PutRegion/3}).
-dialyzer({nowarn_function,v_msg_PutRegion/3}).
v_msg_PutRegion(#{} = M, Path, TrUserData) ->
    case M of
        #{region_name := F1} -> v_type_bytes(F1, [region_name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (region_name) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PutRegion(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PutRegion'}, M, Path);
v_msg_PutRegion(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutRegion'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutRegionResp/3}).
-dialyzer({nowarn_function,v_msg_PutRegionResp/3}).
v_msg_PutRegionResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {region_id, OF1}} -> v_type_bytes(OF1, [region_id, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PutRegionResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PutRegionResp'}, M, Path);
v_msg_PutRegionResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutRegionResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutCategory/3}).
-dialyzer({nowarn_function,v_msg_PutCategory/3}).
v_msg_PutCategory(#{} = M, Path, TrUserData) ->
    case M of
        #{category_name := F1} -> v_type_bytes(F1, [category_name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (category_name) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PutCategory(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PutCategory'}, M, Path);
v_msg_PutCategory(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutCategory'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutCategoryResp/3}).
-dialyzer({nowarn_function,v_msg_PutCategoryResp/3}).
v_msg_PutCategoryResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {category_id, OF1}} -> v_type_bytes(OF1, [category_id, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PutCategoryResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PutCategoryResp'}, M, Path);
v_msg_PutCategoryResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutCategoryResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuthUser/3}).
-dialyzer({nowarn_function,v_msg_AuthUser/3}).
v_msg_AuthUser(#{} = M, Path, TrUserData) ->
    case M of
        #{username := F1} -> v_type_bytes(F1, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F2} -> v_type_bytes(F2, [password | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
                      (password) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_AuthUser(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'AuthUser'}, M, Path);
v_msg_AuthUser(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'AuthUser'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuthUserResp/3}).
-dialyzer({nowarn_function,v_msg_AuthUserResp/3}).
v_msg_AuthUserResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {user_id, OF1}} -> v_type_bytes(OF1, [user_id, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_AuthUserResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'AuthUserResp'}, M, Path);
v_msg_AuthUserResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'AuthUserResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_RegisterUser/3}).
-dialyzer({nowarn_function,v_msg_RegisterUser/3}).
v_msg_RegisterUser(#{} = M, Path, TrUserData) ->
    case M of
        #{username := F1} -> v_type_bytes(F1, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F2} -> v_type_bytes(F2, [password | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{region_id := F3} -> v_type_bytes(F3, [region_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
                      (password) -> ok;
                      (region_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_RegisterUser(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'RegisterUser'}, M, Path);
v_msg_RegisterUser(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'RegisterUser'}, X, Path).

-compile({nowarn_unused_function,v_msg_RegisterUserResp/3}).
-dialyzer({nowarn_function,v_msg_RegisterUserResp/3}).
v_msg_RegisterUserResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {user_id, OF1}} -> v_type_bytes(OF1, [user_id, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_RegisterUserResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'RegisterUserResp'}, M, Path);
v_msg_RegisterUserResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'RegisterUserResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_BrowseCategories/3}).
-dialyzer({nowarn_function,v_msg_BrowseCategories/3}).
v_msg_BrowseCategories(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_BrowseCategories(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'BrowseCategories'}, M, Path);
v_msg_BrowseCategories(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BrowseCategories'}, X, Path).

-compile({nowarn_unused_function,v_msg_BrowseCategoriesResp/3}).
-dialyzer({nowarn_function,v_msg_BrowseCategoriesResp/3}).
v_msg_BrowseCategoriesResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {success, OF1}} -> v_type_uint32(OF1, [success, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_BrowseCategoriesResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'BrowseCategoriesResp'}, M, Path);
v_msg_BrowseCategoriesResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BrowseCategoriesResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_BrowseRegions/3}).
-dialyzer({nowarn_function,v_msg_BrowseRegions/3}).
v_msg_BrowseRegions(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_BrowseRegions(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'BrowseRegions'}, M, Path);
v_msg_BrowseRegions(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BrowseRegions'}, X, Path).

-compile({nowarn_unused_function,v_msg_BrowseRegionsResp/3}).
-dialyzer({nowarn_function,v_msg_BrowseRegionsResp/3}).
v_msg_BrowseRegionsResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {success, OF1}} -> v_type_uint32(OF1, [success, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_BrowseRegionsResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'BrowseRegionsResp'}, M, Path);
v_msg_BrowseRegionsResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BrowseRegionsResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_SearchByCategory/3}).
-dialyzer({nowarn_function,v_msg_SearchByCategory/3}).
v_msg_SearchByCategory(#{} = M, Path, TrUserData) ->
    case M of
        #{category_id := F1} -> v_type_bytes(F1, [category_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (category_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_SearchByCategory(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'SearchByCategory'}, M, Path);
v_msg_SearchByCategory(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SearchByCategory'}, X, Path).

-compile({nowarn_unused_function,v_msg_SearchByCategoryResp/3}).
-dialyzer({nowarn_function,v_msg_SearchByCategoryResp/3}).
v_msg_SearchByCategoryResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {success, OF1}} -> v_type_uint32(OF1, [success, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_SearchByCategoryResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'SearchByCategoryResp'}, M, Path);
v_msg_SearchByCategoryResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SearchByCategoryResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_SearchByRegion/3}).
-dialyzer({nowarn_function,v_msg_SearchByRegion/3}).
v_msg_SearchByRegion(#{} = M, Path, TrUserData) ->
    case M of
        #{category_id := F1} -> v_type_bytes(F1, [category_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{region_id := F2} -> v_type_bytes(F2, [region_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (category_id) -> ok;
                      (region_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_SearchByRegion(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'SearchByRegion'}, M, Path);
v_msg_SearchByRegion(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SearchByRegion'}, X, Path).

-compile({nowarn_unused_function,v_msg_SearchByRegionResp/3}).
-dialyzer({nowarn_function,v_msg_SearchByRegionResp/3}).
v_msg_SearchByRegionResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {success, OF1}} -> v_type_uint32(OF1, [success, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_SearchByRegionResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'SearchByRegionResp'}, M, Path);
v_msg_SearchByRegionResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SearchByRegionResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_ViewItem/3}).
-dialyzer({nowarn_function,v_msg_ViewItem/3}).
v_msg_ViewItem(#{} = M, Path, TrUserData) ->
    case M of
        #{item_id := F1} -> v_type_bytes(F1, [item_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (item_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ViewItem(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ViewItem'}, M, Path);
v_msg_ViewItem(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ViewItem'}, X, Path).

-compile({nowarn_unused_function,v_msg_ViewItemResp/3}).
-dialyzer({nowarn_function,v_msg_ViewItemResp/3}).
v_msg_ViewItemResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {success, OF1}} -> v_type_uint32(OF1, [success, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ViewItemResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ViewItemResp'}, M, Path);
v_msg_ViewItemResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ViewItemResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_ViewUser/3}).
-dialyzer({nowarn_function,v_msg_ViewUser/3}).
v_msg_ViewUser(#{} = M, Path, TrUserData) ->
    case M of
        #{user_id := F1} -> v_type_bytes(F1, [user_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (user_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ViewUser(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ViewUser'}, M, Path);
v_msg_ViewUser(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ViewUser'}, X, Path).

-compile({nowarn_unused_function,v_msg_ViewUserResp/3}).
-dialyzer({nowarn_function,v_msg_ViewUserResp/3}).
v_msg_ViewUserResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {success, OF1}} -> v_type_uint32(OF1, [success, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ViewUserResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ViewUserResp'}, M, Path);
v_msg_ViewUserResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ViewUserResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_ViewItemBidHist/3}).
-dialyzer({nowarn_function,v_msg_ViewItemBidHist/3}).
v_msg_ViewItemBidHist(#{} = M, Path, TrUserData) ->
    case M of
        #{item_id := F1} -> v_type_bytes(F1, [item_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (item_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ViewItemBidHist(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ViewItemBidHist'}, M, Path);
v_msg_ViewItemBidHist(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ViewItemBidHist'}, X, Path).

-compile({nowarn_unused_function,v_msg_ViewItemBidHistResp/3}).
-dialyzer({nowarn_function,v_msg_ViewItemBidHistResp/3}).
v_msg_ViewItemBidHistResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {success, OF1}} -> v_type_uint32(OF1, [success, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ViewItemBidHistResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ViewItemBidHistResp'}, M, Path);
v_msg_ViewItemBidHistResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ViewItemBidHistResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_StoreBuyNow/3}).
-dialyzer({nowarn_function,v_msg_StoreBuyNow/3}).
v_msg_StoreBuyNow(#{} = M, Path, TrUserData) ->
    case M of
        #{on_item_id := F1} -> v_type_bytes(F1, [on_item_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{buyer_id := F2} -> v_type_bytes(F2, [buyer_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{quantity := F3} -> v_type_uint32(F3, [quantity | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (on_item_id) -> ok;
                      (buyer_id) -> ok;
                      (quantity) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StoreBuyNow(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StoreBuyNow'}, M, Path);
v_msg_StoreBuyNow(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StoreBuyNow'}, X, Path).

-compile({nowarn_unused_function,v_msg_StoreBuyNowResp/3}).
-dialyzer({nowarn_function,v_msg_StoreBuyNowResp/3}).
v_msg_StoreBuyNowResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {buy_now_id, OF1}} -> v_type_bytes(OF1, [buy_now_id, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StoreBuyNowResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StoreBuyNowResp'}, M, Path);
v_msg_StoreBuyNowResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StoreBuyNowResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_StoreBid/3}).
-dialyzer({nowarn_function,v_msg_StoreBid/3}).
v_msg_StoreBid(#{} = M, Path, TrUserData) ->
    case M of
        #{on_item_id := F1} -> v_type_bytes(F1, [on_item_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{bidder_id := F2} -> v_type_bytes(F2, [bidder_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{value := F3} -> v_type_uint32(F3, [value | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (on_item_id) -> ok;
                      (bidder_id) -> ok;
                      (value) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StoreBid(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StoreBid'}, M, Path);
v_msg_StoreBid(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StoreBid'}, X, Path).

-compile({nowarn_unused_function,v_msg_StoreBidResp/3}).
-dialyzer({nowarn_function,v_msg_StoreBidResp/3}).
v_msg_StoreBidResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {bid_id, OF1}} -> v_type_bytes(OF1, [bid_id, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StoreBidResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StoreBidResp'}, M, Path);
v_msg_StoreBidResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StoreBidResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_StoreComment/3}).
-dialyzer({nowarn_function,v_msg_StoreComment/3}).
v_msg_StoreComment(#{} = M, Path, TrUserData) ->
    case M of
        #{on_item_id := F1} -> v_type_bytes(F1, [on_item_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{from_id := F2} -> v_type_bytes(F2, [from_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{to_id := F3} -> v_type_bytes(F3, [to_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{rating := F4} -> v_type_sfixed32(F4, [rating | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{body := F5} -> v_type_bytes(F5, [body | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (on_item_id) -> ok;
                      (from_id) -> ok;
                      (to_id) -> ok;
                      (rating) -> ok;
                      (body) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StoreComment(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StoreComment'}, M, Path);
v_msg_StoreComment(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StoreComment'}, X, Path).

-compile({nowarn_unused_function,v_msg_StoreCommentResp/3}).
-dialyzer({nowarn_function,v_msg_StoreCommentResp/3}).
v_msg_StoreCommentResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {comment_id, OF1}} -> v_type_bytes(OF1, [comment_id, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StoreCommentResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StoreCommentResp'}, M, Path);
v_msg_StoreCommentResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StoreCommentResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_StoreItem/3}).
-dialyzer({nowarn_function,v_msg_StoreItem/3}).
v_msg_StoreItem(#{} = M, Path, TrUserData) ->
    case M of
        #{item_name := F1} -> v_type_bytes(F1, [item_name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{description := F2} -> v_type_bytes(F2, [description | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{quantity := F3} -> v_type_uint32(F3, [quantity | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{category_id := F4} -> v_type_bytes(F4, [category_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{seller_id := F5} -> v_type_bytes(F5, [seller_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (item_name) -> ok;
                      (description) -> ok;
                      (quantity) -> ok;
                      (category_id) -> ok;
                      (seller_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StoreItem(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StoreItem'}, M, Path);
v_msg_StoreItem(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StoreItem'}, X, Path).

-compile({nowarn_unused_function,v_msg_StoreItemResp/3}).
-dialyzer({nowarn_function,v_msg_StoreItemResp/3}).
v_msg_StoreItemResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {item_id, OF1}} -> v_type_bytes(OF1, [item_id, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StoreItemResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StoreItemResp'}, M, Path);
v_msg_StoreItemResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StoreItemResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_AboutMe/3}).
-dialyzer({nowarn_function,v_msg_AboutMe/3}).
v_msg_AboutMe(#{} = M, Path, TrUserData) ->
    case M of
        #{user_id := F1} -> v_type_bytes(F1, [user_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (user_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_AboutMe(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'AboutMe'}, M, Path);
v_msg_AboutMe(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'AboutMe'}, X, Path).

-compile({nowarn_unused_function,v_msg_AboutMeResp/3}).
-dialyzer({nowarn_function,v_msg_AboutMeResp/3}).
v_msg_AboutMeResp(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {success, OF1}} -> v_type_uint32(OF1, [success, resp | Path], TrUserData);
        #{resp := {error_reason, OF1}} -> v_type_uint32(OF1, [error_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_AboutMeResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'AboutMeResp'}, M, Path);
v_msg_AboutMeResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'AboutMeResp'}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_sfixed32/3}).
-dialyzer({nowarn_function,v_type_sfixed32/3}).
v_type_sfixed32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sfixed32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sfixed32, signed, 32}, N, Path);
v_type_sfixed32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sfixed32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'PutRegion'}, [#{name => region_name, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'PutRegionResp'},
      [#{name => resp, rnum => 2, fields => [#{name => region_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'PutCategory'}, [#{name => category_name, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'PutCategoryResp'},
      [#{name => resp, rnum => 2, fields => [#{name => category_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'AuthUser'}, [#{name => username, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => password, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'AuthUserResp'},
      [#{name => resp, rnum => 2, fields => [#{name => user_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'RegisterUser'},
      [#{name => username, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => password, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => region_id, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'RegisterUserResp'},
      [#{name => resp, rnum => 2, fields => [#{name => user_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'BrowseCategories'}, []},
     {{msg, 'BrowseCategoriesResp'},
      [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'BrowseRegions'}, []},
     {{msg, 'BrowseRegionsResp'},
      [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'SearchByCategory'}, [#{name => category_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'SearchByCategoryResp'},
      [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'SearchByRegion'}, [#{name => category_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => region_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'SearchByRegionResp'},
      [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'ViewItem'}, [#{name => item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'ViewItemResp'},
      [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'ViewUser'}, [#{name => user_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'ViewUserResp'},
      [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'ViewItemBidHist'}, [#{name => item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'ViewItemBidHistResp'},
      [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'StoreBuyNow'},
      [#{name => on_item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => buyer_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => quantity, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'StoreBuyNowResp'},
      [#{name => resp, rnum => 2, fields => [#{name => buy_now_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'StoreBid'},
      [#{name => on_item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => bidder_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => value, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'StoreBidResp'},
      [#{name => resp, rnum => 2, fields => [#{name => bid_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'StoreComment'},
      [#{name => on_item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => from_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => to_id, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []},
       #{name => rating, fnum => 4, rnum => 5, type => sfixed32, occurrence => optional, opts => []},
       #{name => body, fnum => 5, rnum => 6, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'StoreCommentResp'},
      [#{name => resp, rnum => 2, fields => [#{name => comment_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'StoreItem'},
      [#{name => item_name, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => description, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => quantity, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => category_id, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []},
       #{name => seller_id, fnum => 5, rnum => 6, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'StoreItemResp'},
      [#{name => resp, rnum => 2, fields => [#{name => item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]},
     {{msg, 'AboutMe'}, [#{name => user_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'AboutMeResp'},
      [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]}].


get_msg_names() ->
    ['PutRegion',
     'PutRegionResp',
     'PutCategory',
     'PutCategoryResp',
     'AuthUser',
     'AuthUserResp',
     'RegisterUser',
     'RegisterUserResp',
     'BrowseCategories',
     'BrowseCategoriesResp',
     'BrowseRegions',
     'BrowseRegionsResp',
     'SearchByCategory',
     'SearchByCategoryResp',
     'SearchByRegion',
     'SearchByRegionResp',
     'ViewItem',
     'ViewItemResp',
     'ViewUser',
     'ViewUserResp',
     'ViewItemBidHist',
     'ViewItemBidHistResp',
     'StoreBuyNow',
     'StoreBuyNowResp',
     'StoreBid',
     'StoreBidResp',
     'StoreComment',
     'StoreCommentResp',
     'StoreItem',
     'StoreItemResp',
     'AboutMe',
     'AboutMeResp'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['PutRegion',
     'PutRegionResp',
     'PutCategory',
     'PutCategoryResp',
     'AuthUser',
     'AuthUserResp',
     'RegisterUser',
     'RegisterUserResp',
     'BrowseCategories',
     'BrowseCategoriesResp',
     'BrowseRegions',
     'BrowseRegionsResp',
     'SearchByCategory',
     'SearchByCategoryResp',
     'SearchByRegion',
     'SearchByRegionResp',
     'ViewItem',
     'ViewItemResp',
     'ViewUser',
     'ViewUserResp',
     'ViewItemBidHist',
     'ViewItemBidHistResp',
     'StoreBuyNow',
     'StoreBuyNowResp',
     'StoreBid',
     'StoreBidResp',
     'StoreComment',
     'StoreCommentResp',
     'StoreItem',
     'StoreItemResp',
     'AboutMe',
     'AboutMeResp'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def('PutRegion') -> [#{name => region_name, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('PutRegionResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => region_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('PutCategory') -> [#{name => category_name, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('PutCategoryResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => category_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('AuthUser') -> [#{name => username, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => password, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}];
find_msg_def('AuthUserResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => user_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('RegisterUser') ->
    [#{name => username, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => password, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => region_id, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []}];
find_msg_def('RegisterUserResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => user_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('BrowseCategories') -> [];
find_msg_def('BrowseCategoriesResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('BrowseRegions') -> [];
find_msg_def('BrowseRegionsResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('SearchByCategory') -> [#{name => category_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('SearchByCategoryResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('SearchByRegion') -> [#{name => category_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => region_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}];
find_msg_def('SearchByRegionResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('ViewItem') -> [#{name => item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('ViewItemResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('ViewUser') -> [#{name => user_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('ViewUserResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('ViewItemBidHist') -> [#{name => item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('ViewItemBidHistResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('StoreBuyNow') ->
    [#{name => on_item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => buyer_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => quantity, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}];
find_msg_def('StoreBuyNowResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => buy_now_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('StoreBid') ->
    [#{name => on_item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => bidder_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => value, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}];
find_msg_def('StoreBidResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => bid_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('StoreComment') ->
    [#{name => on_item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => from_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => to_id, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []},
     #{name => rating, fnum => 4, rnum => 5, type => sfixed32, occurrence => optional, opts => []},
     #{name => body, fnum => 5, rnum => 6, type => bytes, occurrence => optional, opts => []}];
find_msg_def('StoreCommentResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => comment_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('StoreItem') ->
    [#{name => item_name, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => description, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => quantity, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => category_id, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []},
     #{name => seller_id, fnum => 5, rnum => 6, type => bytes, occurrence => optional, opts => []}];
find_msg_def('StoreItemResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => item_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def('AboutMe') -> [#{name => user_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('AboutMeResp') ->
    [#{name => resp, rnum => 2, fields => [#{name => success, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => error_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"PutRegion">>) -> 'PutRegion';
fqbin_to_msg_name(<<"PutRegionResp">>) -> 'PutRegionResp';
fqbin_to_msg_name(<<"PutCategory">>) -> 'PutCategory';
fqbin_to_msg_name(<<"PutCategoryResp">>) -> 'PutCategoryResp';
fqbin_to_msg_name(<<"AuthUser">>) -> 'AuthUser';
fqbin_to_msg_name(<<"AuthUserResp">>) -> 'AuthUserResp';
fqbin_to_msg_name(<<"RegisterUser">>) -> 'RegisterUser';
fqbin_to_msg_name(<<"RegisterUserResp">>) -> 'RegisterUserResp';
fqbin_to_msg_name(<<"BrowseCategories">>) -> 'BrowseCategories';
fqbin_to_msg_name(<<"BrowseCategoriesResp">>) -> 'BrowseCategoriesResp';
fqbin_to_msg_name(<<"BrowseRegions">>) -> 'BrowseRegions';
fqbin_to_msg_name(<<"BrowseRegionsResp">>) -> 'BrowseRegionsResp';
fqbin_to_msg_name(<<"SearchByCategory">>) -> 'SearchByCategory';
fqbin_to_msg_name(<<"SearchByCategoryResp">>) -> 'SearchByCategoryResp';
fqbin_to_msg_name(<<"SearchByRegion">>) -> 'SearchByRegion';
fqbin_to_msg_name(<<"SearchByRegionResp">>) -> 'SearchByRegionResp';
fqbin_to_msg_name(<<"ViewItem">>) -> 'ViewItem';
fqbin_to_msg_name(<<"ViewItemResp">>) -> 'ViewItemResp';
fqbin_to_msg_name(<<"ViewUser">>) -> 'ViewUser';
fqbin_to_msg_name(<<"ViewUserResp">>) -> 'ViewUserResp';
fqbin_to_msg_name(<<"ViewItemBidHist">>) -> 'ViewItemBidHist';
fqbin_to_msg_name(<<"ViewItemBidHistResp">>) -> 'ViewItemBidHistResp';
fqbin_to_msg_name(<<"StoreBuyNow">>) -> 'StoreBuyNow';
fqbin_to_msg_name(<<"StoreBuyNowResp">>) -> 'StoreBuyNowResp';
fqbin_to_msg_name(<<"StoreBid">>) -> 'StoreBid';
fqbin_to_msg_name(<<"StoreBidResp">>) -> 'StoreBidResp';
fqbin_to_msg_name(<<"StoreComment">>) -> 'StoreComment';
fqbin_to_msg_name(<<"StoreCommentResp">>) -> 'StoreCommentResp';
fqbin_to_msg_name(<<"StoreItem">>) -> 'StoreItem';
fqbin_to_msg_name(<<"StoreItemResp">>) -> 'StoreItemResp';
fqbin_to_msg_name(<<"AboutMe">>) -> 'AboutMe';
fqbin_to_msg_name(<<"AboutMeResp">>) -> 'AboutMeResp';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('PutRegion') -> <<"PutRegion">>;
msg_name_to_fqbin('PutRegionResp') -> <<"PutRegionResp">>;
msg_name_to_fqbin('PutCategory') -> <<"PutCategory">>;
msg_name_to_fqbin('PutCategoryResp') -> <<"PutCategoryResp">>;
msg_name_to_fqbin('AuthUser') -> <<"AuthUser">>;
msg_name_to_fqbin('AuthUserResp') -> <<"AuthUserResp">>;
msg_name_to_fqbin('RegisterUser') -> <<"RegisterUser">>;
msg_name_to_fqbin('RegisterUserResp') -> <<"RegisterUserResp">>;
msg_name_to_fqbin('BrowseCategories') -> <<"BrowseCategories">>;
msg_name_to_fqbin('BrowseCategoriesResp') -> <<"BrowseCategoriesResp">>;
msg_name_to_fqbin('BrowseRegions') -> <<"BrowseRegions">>;
msg_name_to_fqbin('BrowseRegionsResp') -> <<"BrowseRegionsResp">>;
msg_name_to_fqbin('SearchByCategory') -> <<"SearchByCategory">>;
msg_name_to_fqbin('SearchByCategoryResp') -> <<"SearchByCategoryResp">>;
msg_name_to_fqbin('SearchByRegion') -> <<"SearchByRegion">>;
msg_name_to_fqbin('SearchByRegionResp') -> <<"SearchByRegionResp">>;
msg_name_to_fqbin('ViewItem') -> <<"ViewItem">>;
msg_name_to_fqbin('ViewItemResp') -> <<"ViewItemResp">>;
msg_name_to_fqbin('ViewUser') -> <<"ViewUser">>;
msg_name_to_fqbin('ViewUserResp') -> <<"ViewUserResp">>;
msg_name_to_fqbin('ViewItemBidHist') -> <<"ViewItemBidHist">>;
msg_name_to_fqbin('ViewItemBidHistResp') -> <<"ViewItemBidHistResp">>;
msg_name_to_fqbin('StoreBuyNow') -> <<"StoreBuyNow">>;
msg_name_to_fqbin('StoreBuyNowResp') -> <<"StoreBuyNowResp">>;
msg_name_to_fqbin('StoreBid') -> <<"StoreBid">>;
msg_name_to_fqbin('StoreBidResp') -> <<"StoreBidResp">>;
msg_name_to_fqbin('StoreComment') -> <<"StoreComment">>;
msg_name_to_fqbin('StoreCommentResp') -> <<"StoreCommentResp">>;
msg_name_to_fqbin('StoreItem') -> <<"StoreItem">>;
msg_name_to_fqbin('StoreItemResp') -> <<"StoreItemResp">>;
msg_name_to_fqbin('AboutMe') -> <<"AboutMe">>;
msg_name_to_fqbin('AboutMeResp') -> <<"AboutMeResp">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "rubis_msgs.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["rubis_msgs.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["rubis_msgs"].


get_msg_containment("rubis_msgs") ->
    ['AboutMe',
     'AboutMeResp',
     'AuthUser',
     'AuthUserResp',
     'BrowseCategories',
     'BrowseCategoriesResp',
     'BrowseRegions',
     'BrowseRegionsResp',
     'PutCategory',
     'PutCategoryResp',
     'PutRegion',
     'PutRegionResp',
     'RegisterUser',
     'RegisterUserResp',
     'SearchByCategory',
     'SearchByCategoryResp',
     'SearchByRegion',
     'SearchByRegionResp',
     'StoreBid',
     'StoreBidResp',
     'StoreBuyNow',
     'StoreBuyNowResp',
     'StoreComment',
     'StoreCommentResp',
     'StoreItem',
     'StoreItemResp',
     'ViewItem',
     'ViewItemBidHist',
     'ViewItemBidHistResp',
     'ViewItemResp',
     'ViewUser',
     'ViewUserResp'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("rubis_msgs") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("rubis_msgs") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("rubis_msgs") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("rubis_msgs") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"ViewUserResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"ViewItemResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"ViewItemBidHistResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"StoreItemResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"StoreCommentResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"StoreBuyNowResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"StoreBidResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"SearchByRegionResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"SearchByCategoryResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"RegisterUserResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"PutRegionResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"PutCategoryResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"BrowseRegionsResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"BrowseCategoriesResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"AuthUserResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"AboutMeResp">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"ViewUser">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"RegisterUser">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"AuthUser">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"BrowseRegions">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"BrowseCategories">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"ViewItemBidHist">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"StoreComment">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"StoreBid">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"AboutMe">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"StoreBuyNow">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"SearchByCategory">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"PutCategory">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"ViewItem">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"StoreItem">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"SearchByRegion">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(<<"PutRegion">>) -> "rubis_msgs";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.12.0".

gpb_version_as_list() ->
    [4,12,0].
