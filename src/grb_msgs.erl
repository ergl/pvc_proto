%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.12.0
-module(grb_msgs).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'ConnectRequest'() ::
      #{
       }.

-type 'ConnectResponse'() ::
      #{num_partitions          => non_neg_integer(), % = 1, 32 bits
        ring_payload            => iodata(),        % = 2
        replica_id              => iodata()         % = 3
       }.

-type 'PutConflictRelations'() ::
      #{payload                 => iodata()         % = 1
       }.

-type 'PutConflictRelationsAck'() ::
      #{
       }.

-type 'PutDirect'() ::
      #{partition               => iodata(),        % = 1
        payload                 => iodata()         % = 2
       }.

-type 'PutDirectAck'() ::
      #{
       }.

-type 'UniformBarrier'() ::
      #{client_vc               => iodata(),        % = 1
        partition               => iodata()         % = 2
       }.

-type 'UniformResp'() ::
      #{
       }.

-type 'StartReq'() ::
      #{client_vc               => iodata(),        % = 1
        partition               => iodata()         % = 2
       }.

-type 'StartReturn'() ::
      #{snapshot_vc             => iodata()         % = 1
       }.

-type 'OpRequest'() ::
      #{partition               => iodata(),        % = 1
        transaction_id          => iodata(),        % = 2
        key                     => iodata(),        % = 3
        snapshot_vc             => iodata(),        % = 4
        read_again              => boolean() | 0 | 1, % = 5
        payload                 => {type, iodata()} | {operation, iodata()} % oneof
       }.

-type 'OpReturn'() ::
      #{value                   => iodata(),        % = 1
        transform               => boolean() | 0 | 1 % = 2
       }.

-type 'OpRequestPartition'() ::
      #{partition               => iodata(),        % = 1
        transaction_id          => iodata(),        % = 2
        snapshot_vc             => iodata(),        % = 3
        is_read                 => boolean() | 0 | 1, % = 4
        read_again              => boolean() | 0 | 1, % = 5
        ops                     => iodata()         % = 6
       }.

-type 'OpReturnPartition'() ::
      #{payload                 => iodata()         % = 1
       }.

-type 'PrepareBlueNode'() ::
      #{transaction_id          => iodata(),        % = 1
        snapshot_vc             => iodata(),        % = 2
        partitions              => [iodata()]       % = 3
       }.

-type 'BlueVoteBatch.BlueVote'() ::
      #{partition               => iodata(),        % = 1
        prepare_time            => non_neg_integer() % = 2, 64 bits
       }.

-type 'BlueVoteBatch'() ::
      #{votes                   => ['BlueVoteBatch.BlueVote'()] % = 1
       }.

-type 'DecideBlueNode'() ::
      #{transaction_id          => iodata(),        % = 1
        partitions              => [iodata()],      % = 2
        commit_vc               => iodata()         % = 3
       }.

-type 'CommitRed'() ::
      #{partition               => iodata(),        % = 1
        transaction_id          => iodata(),        % = 2
        snapshot_vc             => iodata(),        % = 3
        transaction_label       => iodata(),        % = 4
        prepares                => [iodata()]       % = 5
       }.

-type 'CommitRedReturn'() ::
      #{resp                    => {commit_vc, iodata()} | {abort_reason, non_neg_integer()} % oneof
       }.

-export_type(['ConnectRequest'/0, 'ConnectResponse'/0, 'PutConflictRelations'/0, 'PutConflictRelationsAck'/0, 'PutDirect'/0, 'PutDirectAck'/0, 'UniformBarrier'/0, 'UniformResp'/0, 'StartReq'/0, 'StartReturn'/0, 'OpRequest'/0, 'OpReturn'/0, 'OpRequestPartition'/0, 'OpReturnPartition'/0, 'PrepareBlueNode'/0, 'BlueVoteBatch.BlueVote'/0, 'BlueVoteBatch'/0, 'DecideBlueNode'/0, 'CommitRed'/0, 'CommitRedReturn'/0]).

-spec encode_msg('ConnectRequest'() | 'ConnectResponse'() | 'PutConflictRelations'() | 'PutConflictRelationsAck'() | 'PutDirect'() | 'PutDirectAck'() | 'UniformBarrier'() | 'UniformResp'() | 'StartReq'() | 'StartReturn'() | 'OpRequest'() | 'OpReturn'() | 'OpRequestPartition'() | 'OpReturnPartition'() | 'PrepareBlueNode'() | 'BlueVoteBatch.BlueVote'() | 'BlueVoteBatch'() | 'DecideBlueNode'() | 'CommitRed'() | 'CommitRedReturn'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg('ConnectRequest'() | 'ConnectResponse'() | 'PutConflictRelations'() | 'PutConflictRelationsAck'() | 'PutDirect'() | 'PutDirectAck'() | 'UniformBarrier'() | 'UniformResp'() | 'StartReq'() | 'StartReturn'() | 'OpRequest'() | 'OpReturn'() | 'OpRequestPartition'() | 'OpReturnPartition'() | 'PrepareBlueNode'() | 'BlueVoteBatch.BlueVote'() | 'BlueVoteBatch'() | 'DecideBlueNode'() | 'CommitRed'() | 'CommitRedReturn'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ConnectRequest' -> encode_msg_ConnectRequest(id(Msg, TrUserData), TrUserData);
        'ConnectResponse' -> encode_msg_ConnectResponse(id(Msg, TrUserData), TrUserData);
        'PutConflictRelations' -> encode_msg_PutConflictRelations(id(Msg, TrUserData), TrUserData);
        'PutConflictRelationsAck' -> encode_msg_PutConflictRelationsAck(id(Msg, TrUserData), TrUserData);
        'PutDirect' -> encode_msg_PutDirect(id(Msg, TrUserData), TrUserData);
        'PutDirectAck' -> encode_msg_PutDirectAck(id(Msg, TrUserData), TrUserData);
        'UniformBarrier' -> encode_msg_UniformBarrier(id(Msg, TrUserData), TrUserData);
        'UniformResp' -> encode_msg_UniformResp(id(Msg, TrUserData), TrUserData);
        'StartReq' -> encode_msg_StartReq(id(Msg, TrUserData), TrUserData);
        'StartReturn' -> encode_msg_StartReturn(id(Msg, TrUserData), TrUserData);
        'OpRequest' -> encode_msg_OpRequest(id(Msg, TrUserData), TrUserData);
        'OpReturn' -> encode_msg_OpReturn(id(Msg, TrUserData), TrUserData);
        'OpRequestPartition' -> encode_msg_OpRequestPartition(id(Msg, TrUserData), TrUserData);
        'OpReturnPartition' -> encode_msg_OpReturnPartition(id(Msg, TrUserData), TrUserData);
        'PrepareBlueNode' -> encode_msg_PrepareBlueNode(id(Msg, TrUserData), TrUserData);
        'BlueVoteBatch.BlueVote' -> 'encode_msg_BlueVoteBatch.BlueVote'(id(Msg, TrUserData), TrUserData);
        'BlueVoteBatch' -> encode_msg_BlueVoteBatch(id(Msg, TrUserData), TrUserData);
        'DecideBlueNode' -> encode_msg_DecideBlueNode(id(Msg, TrUserData), TrUserData);
        'CommitRed' -> encode_msg_CommitRed(id(Msg, TrUserData), TrUserData);
        'CommitRedReturn' -> encode_msg_CommitRedReturn(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_ConnectRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_ConnectResponse(Msg, TrUserData) -> encode_msg_ConnectResponse(Msg, <<>>, TrUserData).


encode_msg_ConnectResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{num_partitions := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{ring_payload := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{replica_id := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_PutConflictRelations(Msg, TrUserData) -> encode_msg_PutConflictRelations(Msg, <<>>, TrUserData).


encode_msg_PutConflictRelations(#{} = M, Bin, TrUserData) ->
    case M of
        #{payload := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_PutConflictRelationsAck(_Msg, _TrUserData) -> <<>>.

encode_msg_PutDirect(Msg, TrUserData) -> encode_msg_PutDirect(Msg, <<>>, TrUserData).


encode_msg_PutDirect(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{partition := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{payload := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_PutDirectAck(_Msg, _TrUserData) -> <<>>.

encode_msg_UniformBarrier(Msg, TrUserData) -> encode_msg_UniformBarrier(Msg, <<>>, TrUserData).


encode_msg_UniformBarrier(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{client_vc := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{partition := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_UniformResp(_Msg, _TrUserData) -> <<>>.

encode_msg_StartReq(Msg, TrUserData) -> encode_msg_StartReq(Msg, <<>>, TrUserData).


encode_msg_StartReq(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{client_vc := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{partition := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_StartReturn(Msg, TrUserData) -> encode_msg_StartReturn(Msg, <<>>, TrUserData).


encode_msg_StartReturn(#{} = M, Bin, TrUserData) ->
    case M of
        #{snapshot_vc := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_OpRequest(Msg, TrUserData) -> encode_msg_OpRequest(Msg, <<>>, TrUserData).


encode_msg_OpRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{partition := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{transaction_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{key := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case iolist_size(TrF3) of
                         0 -> B2;
                         _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{snapshot_vc := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case iolist_size(TrF4) of
                         0 -> B3;
                         _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{read_again := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     if TrF5 =:= false -> B4;
                        true -> e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    case M of
        #{payload := F6} ->
            case id(F6, TrUserData) of
                {type, TF6} -> begin TrTF6 = id(TF6, TrUserData), e_type_bytes(TrTF6, <<B5/binary, 50>>, TrUserData) end;
                {operation, TF6} -> begin TrTF6 = id(TF6, TrUserData), e_type_bytes(TrTF6, <<B5/binary, 58>>, TrUserData) end
            end;
        _ -> B5
    end.

encode_msg_OpReturn(Msg, TrUserData) -> encode_msg_OpReturn(Msg, <<>>, TrUserData).


encode_msg_OpReturn(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{value := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{transform := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= false -> B1;
                   true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_OpRequestPartition(Msg, TrUserData) -> encode_msg_OpRequestPartition(Msg, <<>>, TrUserData).


encode_msg_OpRequestPartition(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{partition := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{transaction_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{snapshot_vc := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case iolist_size(TrF3) of
                         0 -> B2;
                         _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{is_read := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= false -> B3;
                        true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{read_again := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     if TrF5 =:= false -> B4;
                        true -> e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    case M of
        #{ops := F6} ->
            begin
                TrF6 = id(F6, TrUserData),
                case iolist_size(TrF6) of
                    0 -> B5;
                    _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                end
            end;
        _ -> B5
    end.

encode_msg_OpReturnPartition(Msg, TrUserData) -> encode_msg_OpReturnPartition(Msg, <<>>, TrUserData).


encode_msg_OpReturnPartition(#{} = M, Bin, TrUserData) ->
    case M of
        #{payload := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_PrepareBlueNode(Msg, TrUserData) -> encode_msg_PrepareBlueNode(Msg, <<>>, TrUserData).


encode_msg_PrepareBlueNode(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{transaction_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{snapshot_vc := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{partitions := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true -> e_field_PrepareBlueNode_partitions(TrF3, B2, TrUserData)
            end;
        _ -> B2
    end.

'encode_msg_BlueVoteBatch.BlueVote'(Msg, TrUserData) -> 'encode_msg_BlueVoteBatch.BlueVote'(Msg, <<>>, TrUserData).


'encode_msg_BlueVoteBatch.BlueVote'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{partition := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{prepare_time := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_BlueVoteBatch(Msg, TrUserData) -> encode_msg_BlueVoteBatch(Msg, <<>>, TrUserData).


encode_msg_BlueVoteBatch(#{} = M, Bin, TrUserData) ->
    case M of
        #{votes := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_BlueVoteBatch_votes(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_DecideBlueNode(Msg, TrUserData) -> encode_msg_DecideBlueNode(Msg, <<>>, TrUserData).


encode_msg_DecideBlueNode(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{transaction_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{partitions := F2} ->
                 TrF2 = id(F2, TrUserData),
                 if TrF2 == [] -> B1;
                    true -> e_field_DecideBlueNode_partitions(TrF2, B1, TrUserData)
                 end;
             _ -> B1
         end,
    case M of
        #{commit_vc := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_CommitRed(Msg, TrUserData) -> encode_msg_CommitRed(Msg, <<>>, TrUserData).


encode_msg_CommitRed(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{partition := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{transaction_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case iolist_size(TrF2) of
                         0 -> B1;
                         _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{snapshot_vc := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case iolist_size(TrF3) of
                         0 -> B2;
                         _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{transaction_label := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case iolist_size(TrF4) of
                         0 -> B3;
                         _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{prepares := F5} ->
            TrF5 = id(F5, TrUserData),
            if TrF5 == [] -> B4;
               true -> e_field_CommitRed_prepares(TrF5, B4, TrUserData)
            end;
        _ -> B4
    end.

encode_msg_CommitRedReturn(Msg, TrUserData) -> encode_msg_CommitRedReturn(Msg, <<>>, TrUserData).


encode_msg_CommitRedReturn(#{} = M, Bin, TrUserData) ->
    case M of
        #{resp := F1} ->
            case id(F1, TrUserData) of
                {commit_vc, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {abort_reason, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_varint(TrTF1, <<Bin/binary, 16>>, TrUserData) end
            end;
        _ -> Bin
    end.

e_field_PrepareBlueNode_partitions([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_PrepareBlueNode_partitions(Rest, Bin3, TrUserData);
e_field_PrepareBlueNode_partitions([], Bin, _TrUserData) -> Bin.

e_mfield_BlueVoteBatch_votes(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_BlueVoteBatch.BlueVote'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BlueVoteBatch_votes([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_BlueVoteBatch_votes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_BlueVoteBatch_votes(Rest, Bin3, TrUserData);
e_field_BlueVoteBatch_votes([], Bin, _TrUserData) -> Bin.

e_field_DecideBlueNode_partitions([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_DecideBlueNode_partitions(Rest, Bin3, TrUserData);
e_field_DecideBlueNode_partitions([], Bin, _TrUserData) -> Bin.

e_field_CommitRed_prepares([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_CommitRed_prepares(Rest, Bin3, TrUserData);
e_field_CommitRed_prepares([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ConnectRequest', Bin, TrUserData) -> id(decode_msg_ConnectRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ConnectResponse', Bin, TrUserData) -> id(decode_msg_ConnectResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutConflictRelations', Bin, TrUserData) -> id(decode_msg_PutConflictRelations(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutConflictRelationsAck', Bin, TrUserData) -> id(decode_msg_PutConflictRelationsAck(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutDirect', Bin, TrUserData) -> id(decode_msg_PutDirect(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutDirectAck', Bin, TrUserData) -> id(decode_msg_PutDirectAck(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UniformBarrier', Bin, TrUserData) -> id(decode_msg_UniformBarrier(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UniformResp', Bin, TrUserData) -> id(decode_msg_UniformResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StartReq', Bin, TrUserData) -> id(decode_msg_StartReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StartReturn', Bin, TrUserData) -> id(decode_msg_StartReturn(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OpRequest', Bin, TrUserData) -> id(decode_msg_OpRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OpReturn', Bin, TrUserData) -> id(decode_msg_OpReturn(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OpRequestPartition', Bin, TrUserData) -> id(decode_msg_OpRequestPartition(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OpReturnPartition', Bin, TrUserData) -> id(decode_msg_OpReturnPartition(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PrepareBlueNode', Bin, TrUserData) -> id(decode_msg_PrepareBlueNode(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BlueVoteBatch.BlueVote', Bin, TrUserData) -> id('decode_msg_BlueVoteBatch.BlueVote'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BlueVoteBatch', Bin, TrUserData) -> id(decode_msg_BlueVoteBatch(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DecideBlueNode', Bin, TrUserData) -> id(decode_msg_DecideBlueNode(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CommitRed', Bin, TrUserData) -> id(decode_msg_CommitRed(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CommitRedReturn', Bin, TrUserData) -> id(decode_msg_CommitRedReturn(Bin, TrUserData), TrUserData).



decode_msg_ConnectRequest(Bin, TrUserData) -> dfp_read_field_def_ConnectRequest(Bin, 0, 0, TrUserData).

dfp_read_field_def_ConnectRequest(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_ConnectRequest(Other, Z1, Z2, TrUserData) -> dg_read_field_def_ConnectRequest(Other, Z1, Z2, TrUserData).

dg_read_field_def_ConnectRequest(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_ConnectRequest(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_ConnectRequest(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_ConnectRequest(Rest, 0, 0, TrUserData);
        1 -> skip_64_ConnectRequest(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_ConnectRequest(Rest, 0, 0, TrUserData);
        3 -> skip_group_ConnectRequest(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_ConnectRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ConnectRequest(<<>>, 0, 0, _) -> #{}.

skip_varint_ConnectRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_ConnectRequest(Rest, Z1, Z2, TrUserData);
skip_varint_ConnectRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_ConnectRequest(Rest, Z1, Z2, TrUserData).

skip_length_delimited_ConnectRequest(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_ConnectRequest(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_ConnectRequest(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConnectRequest(Rest2, 0, 0, TrUserData).

skip_group_ConnectRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ConnectRequest(Rest, 0, Z2, TrUserData).

skip_32_ConnectRequest(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_ConnectRequest(Rest, Z1, Z2, TrUserData).

skip_64_ConnectRequest(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_ConnectRequest(Rest, Z1, Z2, TrUserData).

decode_msg_ConnectResponse(Bin, TrUserData) -> dfp_read_field_def_ConnectResponse(Bin, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_ConnectResponse(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_ConnectResponse_num_partitions(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ConnectResponse(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_ConnectResponse_ring_payload(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ConnectResponse(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_ConnectResponse_replica_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ConnectResponse(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{num_partitions => F@_1, ring_payload => F@_2, replica_id => F@_3};
dfp_read_field_def_ConnectResponse(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_ConnectResponse(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_ConnectResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_ConnectResponse(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_ConnectResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ConnectResponse_num_partitions(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_ConnectResponse_ring_payload(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_ConnectResponse_replica_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ConnectResponse(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_ConnectResponse(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_ConnectResponse(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_ConnectResponse(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_ConnectResponse(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_ConnectResponse(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{num_partitions => F@_1, ring_payload => F@_2, replica_id => F@_3}.

d_field_ConnectResponse_num_partitions(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_ConnectResponse_num_partitions(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_ConnectResponse_num_partitions(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ConnectResponse(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_ConnectResponse_ring_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_ConnectResponse_ring_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_ConnectResponse_ring_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_ConnectResponse(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_ConnectResponse_replica_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_ConnectResponse_replica_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_ConnectResponse_replica_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_ConnectResponse(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_ConnectResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_ConnectResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_ConnectResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_ConnectResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_ConnectResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_ConnectResponse(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_ConnectResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConnectResponse(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_ConnectResponse(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ConnectResponse(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_ConnectResponse(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_ConnectResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_ConnectResponse(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_ConnectResponse(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_PutConflictRelations(Bin, TrUserData) -> dfp_read_field_def_PutConflictRelations(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_PutConflictRelations(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_PutConflictRelations_payload(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PutConflictRelations(<<>>, 0, 0, F@_1, _) -> #{payload => F@_1};
dfp_read_field_def_PutConflictRelations(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_PutConflictRelations(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_PutConflictRelations(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutConflictRelations(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_PutConflictRelations(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PutConflictRelations_payload(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PutConflictRelations(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_PutConflictRelations(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_PutConflictRelations(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_PutConflictRelations(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_PutConflictRelations(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PutConflictRelations(<<>>, 0, 0, F@_1, _) -> #{payload => F@_1}.

d_field_PutConflictRelations_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_PutConflictRelations_payload(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_PutConflictRelations_payload(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PutConflictRelations(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_PutConflictRelations(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_PutConflictRelations(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_PutConflictRelations(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutConflictRelations(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_PutConflictRelations(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_PutConflictRelations(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_PutConflictRelations(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutConflictRelations(Rest2, 0, 0, F@_1, TrUserData).

skip_group_PutConflictRelations(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutConflictRelations(Rest, 0, Z2, F@_1, TrUserData).

skip_32_PutConflictRelations(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutConflictRelations(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_PutConflictRelations(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_PutConflictRelations(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_PutConflictRelationsAck(Bin, TrUserData) -> dfp_read_field_def_PutConflictRelationsAck(Bin, 0, 0, TrUserData).

dfp_read_field_def_PutConflictRelationsAck(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_PutConflictRelationsAck(Other, Z1, Z2, TrUserData) -> dg_read_field_def_PutConflictRelationsAck(Other, Z1, Z2, TrUserData).

dg_read_field_def_PutConflictRelationsAck(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutConflictRelationsAck(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_PutConflictRelationsAck(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_PutConflictRelationsAck(Rest, 0, 0, TrUserData);
        1 -> skip_64_PutConflictRelationsAck(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_PutConflictRelationsAck(Rest, 0, 0, TrUserData);
        3 -> skip_group_PutConflictRelationsAck(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_PutConflictRelationsAck(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_PutConflictRelationsAck(<<>>, 0, 0, _) -> #{}.

skip_varint_PutConflictRelationsAck(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_PutConflictRelationsAck(Rest, Z1, Z2, TrUserData);
skip_varint_PutConflictRelationsAck(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_PutConflictRelationsAck(Rest, Z1, Z2, TrUserData).

skip_length_delimited_PutConflictRelationsAck(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_PutConflictRelationsAck(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_PutConflictRelationsAck(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutConflictRelationsAck(Rest2, 0, 0, TrUserData).

skip_group_PutConflictRelationsAck(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutConflictRelationsAck(Rest, 0, Z2, TrUserData).

skip_32_PutConflictRelationsAck(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_PutConflictRelationsAck(Rest, Z1, Z2, TrUserData).

skip_64_PutConflictRelationsAck(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_PutConflictRelationsAck(Rest, Z1, Z2, TrUserData).

decode_msg_PutDirect(Bin, TrUserData) -> dfp_read_field_def_PutDirect(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_PutDirect(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_PutDirect_partition(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_PutDirect(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_PutDirect_payload(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_PutDirect(<<>>, 0, 0, F@_1, F@_2, _) -> #{partition => F@_1, payload => F@_2};
dfp_read_field_def_PutDirect(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_PutDirect(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_PutDirect(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutDirect(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_PutDirect(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PutDirect_partition(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_PutDirect_payload(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PutDirect(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_PutDirect(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_PutDirect(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_PutDirect(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_PutDirect(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_PutDirect(<<>>, 0, 0, F@_1, F@_2, _) -> #{partition => F@_1, payload => F@_2}.

d_field_PutDirect_partition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_PutDirect_partition(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_PutDirect_partition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PutDirect(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_PutDirect_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_PutDirect_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_PutDirect_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PutDirect(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_PutDirect(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_PutDirect(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_PutDirect(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_PutDirect(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_PutDirect(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_PutDirect(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_PutDirect(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutDirect(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_PutDirect(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutDirect(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_PutDirect(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_PutDirect(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_PutDirect(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_PutDirect(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_PutDirectAck(Bin, TrUserData) -> dfp_read_field_def_PutDirectAck(Bin, 0, 0, TrUserData).

dfp_read_field_def_PutDirectAck(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_PutDirectAck(Other, Z1, Z2, TrUserData) -> dg_read_field_def_PutDirectAck(Other, Z1, Z2, TrUserData).

dg_read_field_def_PutDirectAck(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutDirectAck(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_PutDirectAck(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_PutDirectAck(Rest, 0, 0, TrUserData);
        1 -> skip_64_PutDirectAck(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_PutDirectAck(Rest, 0, 0, TrUserData);
        3 -> skip_group_PutDirectAck(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_PutDirectAck(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_PutDirectAck(<<>>, 0, 0, _) -> #{}.

skip_varint_PutDirectAck(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_PutDirectAck(Rest, Z1, Z2, TrUserData);
skip_varint_PutDirectAck(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_PutDirectAck(Rest, Z1, Z2, TrUserData).

skip_length_delimited_PutDirectAck(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_PutDirectAck(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_PutDirectAck(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutDirectAck(Rest2, 0, 0, TrUserData).

skip_group_PutDirectAck(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutDirectAck(Rest, 0, Z2, TrUserData).

skip_32_PutDirectAck(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_PutDirectAck(Rest, Z1, Z2, TrUserData).

skip_64_PutDirectAck(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_PutDirectAck(Rest, Z1, Z2, TrUserData).

decode_msg_UniformBarrier(Bin, TrUserData) -> dfp_read_field_def_UniformBarrier(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_UniformBarrier(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_UniformBarrier_client_vc(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_UniformBarrier(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_UniformBarrier_partition(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_UniformBarrier(<<>>, 0, 0, F@_1, F@_2, _) -> #{client_vc => F@_1, partition => F@_2};
dfp_read_field_def_UniformBarrier(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_UniformBarrier(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_UniformBarrier(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_UniformBarrier(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_UniformBarrier(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_UniformBarrier_client_vc(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_UniformBarrier_partition(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UniformBarrier(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_UniformBarrier(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_UniformBarrier(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_UniformBarrier(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_UniformBarrier(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_UniformBarrier(<<>>, 0, 0, F@_1, F@_2, _) -> #{client_vc => F@_1, partition => F@_2}.

d_field_UniformBarrier_client_vc(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UniformBarrier_client_vc(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_UniformBarrier_client_vc(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_UniformBarrier(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_UniformBarrier_partition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UniformBarrier_partition(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_UniformBarrier_partition(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_UniformBarrier(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_UniformBarrier(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_UniformBarrier(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_UniformBarrier(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UniformBarrier(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_UniformBarrier(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_UniformBarrier(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_UniformBarrier(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UniformBarrier(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_UniformBarrier(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UniformBarrier(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_UniformBarrier(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UniformBarrier(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_UniformBarrier(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UniformBarrier(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_UniformResp(Bin, TrUserData) -> dfp_read_field_def_UniformResp(Bin, 0, 0, TrUserData).

dfp_read_field_def_UniformResp(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_UniformResp(Other, Z1, Z2, TrUserData) -> dg_read_field_def_UniformResp(Other, Z1, Z2, TrUserData).

dg_read_field_def_UniformResp(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_UniformResp(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_UniformResp(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_UniformResp(Rest, 0, 0, TrUserData);
        1 -> skip_64_UniformResp(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_UniformResp(Rest, 0, 0, TrUserData);
        3 -> skip_group_UniformResp(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_UniformResp(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_UniformResp(<<>>, 0, 0, _) -> #{}.

skip_varint_UniformResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_UniformResp(Rest, Z1, Z2, TrUserData);
skip_varint_UniformResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_UniformResp(Rest, Z1, Z2, TrUserData).

skip_length_delimited_UniformResp(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_UniformResp(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_UniformResp(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UniformResp(Rest2, 0, 0, TrUserData).

skip_group_UniformResp(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UniformResp(Rest, 0, Z2, TrUserData).

skip_32_UniformResp(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_UniformResp(Rest, Z1, Z2, TrUserData).

skip_64_UniformResp(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_UniformResp(Rest, Z1, Z2, TrUserData).

decode_msg_StartReq(Bin, TrUserData) -> dfp_read_field_def_StartReq(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_StartReq(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_StartReq_client_vc(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_StartReq(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_StartReq_partition(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_StartReq(<<>>, 0, 0, F@_1, F@_2, _) -> #{client_vc => F@_1, partition => F@_2};
dfp_read_field_def_StartReq(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_StartReq(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_StartReq(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_StartReq(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_StartReq(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StartReq_client_vc(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_StartReq_partition(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StartReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_StartReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_StartReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_StartReq(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_StartReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_StartReq(<<>>, 0, 0, F@_1, F@_2, _) -> #{client_vc => F@_1, partition => F@_2}.

d_field_StartReq_client_vc(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_StartReq_client_vc(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_StartReq_client_vc(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StartReq(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_StartReq_partition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_StartReq_partition(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_StartReq_partition(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StartReq(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_StartReq(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_StartReq(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_StartReq(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_StartReq(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_StartReq(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_StartReq(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_StartReq(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartReq(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_StartReq(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StartReq(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_StartReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_StartReq(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_StartReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_StartReq(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_StartReturn(Bin, TrUserData) -> dfp_read_field_def_StartReturn(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_StartReturn(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_StartReturn_snapshot_vc(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_StartReturn(<<>>, 0, 0, F@_1, _) -> #{snapshot_vc => F@_1};
dfp_read_field_def_StartReturn(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_StartReturn(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_StartReturn(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_StartReturn(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_StartReturn(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_StartReturn_snapshot_vc(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StartReturn(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_StartReturn(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_StartReturn(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_StartReturn(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_StartReturn(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_StartReturn(<<>>, 0, 0, F@_1, _) -> #{snapshot_vc => F@_1}.

d_field_StartReturn_snapshot_vc(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_StartReturn_snapshot_vc(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_StartReturn_snapshot_vc(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_StartReturn(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_StartReturn(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_StartReturn(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_StartReturn(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StartReturn(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_StartReturn(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_StartReturn(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_StartReturn(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartReturn(Rest2, 0, 0, F@_1, TrUserData).

skip_group_StartReturn(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StartReturn(Rest, 0, Z2, F@_1, TrUserData).

skip_32_StartReturn(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StartReturn(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_StartReturn(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_StartReturn(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_OpRequest(Bin, TrUserData) -> dfp_read_field_def_OpRequest(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(false, TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_OpRequest(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequest_partition(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequest(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequest_transaction_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequest(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequest_key(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequest(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequest_snapshot_vc(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequest(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequest_read_again(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequest(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequest_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequest(<<58, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequest_operation(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequest(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    S1 = #{partition => F@_1, transaction_id => F@_2, key => F@_3, snapshot_vc => F@_4, read_again => F@_5},
    if F@_6 == '$undef' -> S1;
       true -> S1#{payload => F@_6}
    end;
dfp_read_field_def_OpRequest(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_OpRequest(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_OpRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 -> dg_read_field_def_OpRequest(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_OpRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_OpRequest_partition(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        18 -> d_field_OpRequest_transaction_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        26 -> d_field_OpRequest_key(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        34 -> d_field_OpRequest_snapshot_vc(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        40 -> d_field_OpRequest_read_again(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        50 -> d_field_OpRequest_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        58 -> d_field_OpRequest_operation(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_OpRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_OpRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_OpRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_OpRequest(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_OpRequest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_OpRequest(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    S1 = #{partition => F@_1, transaction_id => F@_2, key => F@_3, snapshot_vc => F@_4, read_again => F@_5},
    if F@_6 == '$undef' -> S1;
       true -> S1#{payload => F@_6}
    end.

d_field_OpRequest_partition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequest_partition(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequest_partition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequest(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_OpRequest_transaction_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequest_transaction_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequest_transaction_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequest(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_OpRequest_key(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequest_key(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequest_key(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequest(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_OpRequest_snapshot_vc(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequest_snapshot_vc(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequest_snapshot_vc(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequest(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_OpRequest_read_again(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequest_read_again(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequest_read_again(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_OpRequest(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_OpRequest_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequest_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequest_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequest(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, id({type, NewFValue}, TrUserData), TrUserData).

d_field_OpRequest_operation(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequest_operation(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequest_operation(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequest(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, id({operation, NewFValue}, TrUserData), TrUserData).

skip_varint_OpRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_OpRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_OpRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_OpRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_OpRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> skip_length_delimited_OpRequest(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_OpRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OpRequest(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_OpRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OpRequest(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_OpRequest(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_OpRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_OpRequest(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_OpRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_OpReturn(Bin, TrUserData) -> dfp_read_field_def_OpReturn(Bin, 0, 0, id(<<>>, TrUserData), id(false, TrUserData), TrUserData).

dfp_read_field_def_OpReturn(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_OpReturn_value(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_OpReturn(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_OpReturn_transform(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_OpReturn(<<>>, 0, 0, F@_1, F@_2, _) -> #{value => F@_1, transform => F@_2};
dfp_read_field_def_OpReturn(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_OpReturn(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_OpReturn(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_OpReturn(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_OpReturn(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_OpReturn_value(Rest, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_OpReturn_transform(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_OpReturn(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_OpReturn(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_OpReturn(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_OpReturn(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_OpReturn(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_OpReturn(<<>>, 0, 0, F@_1, F@_2, _) -> #{value => F@_1, transform => F@_2}.

d_field_OpReturn_value(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_OpReturn_value(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_OpReturn_value(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpReturn(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_OpReturn_transform(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_OpReturn_transform(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_OpReturn_transform(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_OpReturn(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_OpReturn(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_OpReturn(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_OpReturn(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_OpReturn(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_OpReturn(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_OpReturn(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_OpReturn(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OpReturn(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_OpReturn(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OpReturn(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_OpReturn(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_OpReturn(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_OpReturn(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_OpReturn(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_OpRequestPartition(Bin, TrUserData) -> dfp_read_field_def_OpRequestPartition(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(false, TrUserData), id(false, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_OpRequestPartition(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequestPartition_partition(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequestPartition(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequestPartition_transaction_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequestPartition(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequestPartition_snapshot_vc(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequestPartition(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequestPartition_is_read(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequestPartition(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequestPartition_read_again(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequestPartition(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_OpRequestPartition_ops(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_OpRequestPartition(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #{partition => F@_1, transaction_id => F@_2, snapshot_vc => F@_3, is_read => F@_4, read_again => F@_5, ops => F@_6};
dfp_read_field_def_OpRequestPartition(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_OpRequestPartition(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_OpRequestPartition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_OpRequestPartition(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_OpRequestPartition(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_OpRequestPartition_partition(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        18 -> d_field_OpRequestPartition_transaction_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        26 -> d_field_OpRequestPartition_snapshot_vc(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        32 -> d_field_OpRequestPartition_is_read(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        40 -> d_field_OpRequestPartition_read_again(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        50 -> d_field_OpRequestPartition_ops(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_OpRequestPartition(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_OpRequestPartition(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_OpRequestPartition(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_OpRequestPartition(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_OpRequestPartition(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_OpRequestPartition(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #{partition => F@_1, transaction_id => F@_2, snapshot_vc => F@_3, is_read => F@_4, read_again => F@_5, ops => F@_6}.

d_field_OpRequestPartition_partition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequestPartition_partition(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequestPartition_partition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequestPartition(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_OpRequestPartition_transaction_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_OpRequestPartition_transaction_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequestPartition_transaction_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequestPartition(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_OpRequestPartition_snapshot_vc(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_OpRequestPartition_snapshot_vc(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequestPartition_snapshot_vc(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequestPartition(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_OpRequestPartition_is_read(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequestPartition_is_read(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequestPartition_is_read(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_OpRequestPartition(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_OpRequestPartition_read_again(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequestPartition_read_again(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequestPartition_read_again(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_OpRequestPartition(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_OpRequestPartition_ops(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_OpRequestPartition_ops(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_OpRequestPartition_ops(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpRequestPartition(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_OpRequestPartition(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_OpRequestPartition(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_OpRequestPartition(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_OpRequestPartition(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_OpRequestPartition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    skip_length_delimited_OpRequestPartition(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_OpRequestPartition(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OpRequestPartition(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_OpRequestPartition(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OpRequestPartition(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_OpRequestPartition(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_OpRequestPartition(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_OpRequestPartition(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_OpRequestPartition(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_OpReturnPartition(Bin, TrUserData) -> dfp_read_field_def_OpReturnPartition(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_OpReturnPartition(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_OpReturnPartition_payload(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_OpReturnPartition(<<>>, 0, 0, F@_1, _) -> #{payload => F@_1};
dfp_read_field_def_OpReturnPartition(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_OpReturnPartition(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_OpReturnPartition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_OpReturnPartition(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OpReturnPartition(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_OpReturnPartition_payload(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_OpReturnPartition(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_OpReturnPartition(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_OpReturnPartition(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_OpReturnPartition(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_OpReturnPartition(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_OpReturnPartition(<<>>, 0, 0, F@_1, _) -> #{payload => F@_1}.

d_field_OpReturnPartition_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_OpReturnPartition_payload(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_OpReturnPartition_payload(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_OpReturnPartition(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_OpReturnPartition(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_OpReturnPartition(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_OpReturnPartition(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_OpReturnPartition(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_OpReturnPartition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_OpReturnPartition(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OpReturnPartition(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OpReturnPartition(Rest2, 0, 0, F@_1, TrUserData).

skip_group_OpReturnPartition(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OpReturnPartition(Rest, 0, Z2, F@_1, TrUserData).

skip_32_OpReturnPartition(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_OpReturnPartition(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_OpReturnPartition(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_OpReturnPartition(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_PrepareBlueNode(Bin, TrUserData) -> dfp_read_field_def_PrepareBlueNode(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_PrepareBlueNode(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_PrepareBlueNode_transaction_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PrepareBlueNode(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_PrepareBlueNode_snapshot_vc(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PrepareBlueNode(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_PrepareBlueNode_partitions(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PrepareBlueNode(<<>>, 0, 0, F@_1, F@_2, R1, TrUserData) -> #{transaction_id => F@_1, snapshot_vc => F@_2, partitions => lists_reverse(R1, TrUserData)};
dfp_read_field_def_PrepareBlueNode(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_PrepareBlueNode(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_PrepareBlueNode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_PrepareBlueNode(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_PrepareBlueNode(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PrepareBlueNode_transaction_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_PrepareBlueNode_snapshot_vc(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_PrepareBlueNode_partitions(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PrepareBlueNode(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_PrepareBlueNode(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_PrepareBlueNode(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_PrepareBlueNode(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_PrepareBlueNode(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_PrepareBlueNode(<<>>, 0, 0, F@_1, F@_2, R1, TrUserData) -> #{transaction_id => F@_1, snapshot_vc => F@_2, partitions => lists_reverse(R1, TrUserData)}.

d_field_PrepareBlueNode_transaction_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PrepareBlueNode_transaction_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_PrepareBlueNode_transaction_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PrepareBlueNode(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_PrepareBlueNode_snapshot_vc(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PrepareBlueNode_snapshot_vc(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_PrepareBlueNode_snapshot_vc(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PrepareBlueNode(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_PrepareBlueNode_partitions(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PrepareBlueNode_partitions(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_PrepareBlueNode_partitions(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_PrepareBlueNode(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_PrepareBlueNode(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_PrepareBlueNode(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_PrepareBlueNode(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PrepareBlueNode(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_PrepareBlueNode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_PrepareBlueNode(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_PrepareBlueNode(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PrepareBlueNode(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_PrepareBlueNode(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PrepareBlueNode(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_PrepareBlueNode(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PrepareBlueNode(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_PrepareBlueNode(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PrepareBlueNode(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_BlueVoteBatch.BlueVote'(Bin, TrUserData) -> 'dfp_read_field_def_BlueVoteBatch.BlueVote'(Bin, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

'dfp_read_field_def_BlueVoteBatch.BlueVote'(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_BlueVoteBatch.BlueVote_partition'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_BlueVoteBatch.BlueVote'(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'd_field_BlueVoteBatch.BlueVote_prepare_time'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_BlueVoteBatch.BlueVote'(<<>>, 0, 0, F@_1, F@_2, _) -> #{partition => F@_1, prepare_time => F@_2};
'dfp_read_field_def_BlueVoteBatch.BlueVote'(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_BlueVoteBatch.BlueVote'(Other, Z1, Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_BlueVoteBatch.BlueVote'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_BlueVoteBatch.BlueVote'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_BlueVoteBatch.BlueVote'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_BlueVoteBatch.BlueVote_partition'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_BlueVoteBatch.BlueVote_prepare_time'(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_BlueVoteBatch.BlueVote'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_BlueVoteBatch.BlueVote'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_BlueVoteBatch.BlueVote'(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_BlueVoteBatch.BlueVote'(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_BlueVoteBatch.BlueVote'(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_BlueVoteBatch.BlueVote'(<<>>, 0, 0, F@_1, F@_2, _) -> #{partition => F@_1, prepare_time => F@_2}.

'd_field_BlueVoteBatch.BlueVote_partition'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_BlueVoteBatch.BlueVote_partition'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_BlueVoteBatch.BlueVote_partition'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    'dfp_read_field_def_BlueVoteBatch.BlueVote'(RestF, 0, 0, NewFValue, F@_2, TrUserData).

'd_field_BlueVoteBatch.BlueVote_prepare_time'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_BlueVoteBatch.BlueVote_prepare_time'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_BlueVoteBatch.BlueVote_prepare_time'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_BlueVoteBatch.BlueVote'(RestF, 0, 0, F@_1, NewFValue, TrUserData).

'skip_varint_BlueVoteBatch.BlueVote'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'skip_varint_BlueVoteBatch.BlueVote'(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
'skip_varint_BlueVoteBatch.BlueVote'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_BlueVoteBatch.BlueVote'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_BlueVoteBatch.BlueVote'(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_BlueVoteBatch.BlueVote'(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
'skip_length_delimited_BlueVoteBatch.BlueVote'(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_BlueVoteBatch.BlueVote'(Rest2, 0, 0, F@_1, F@_2, TrUserData).

'skip_group_BlueVoteBatch.BlueVote'(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_BlueVoteBatch.BlueVote'(Rest, 0, Z2, F@_1, F@_2, TrUserData).

'skip_32_BlueVoteBatch.BlueVote'(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_BlueVoteBatch.BlueVote'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'skip_64_BlueVoteBatch.BlueVote'(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_BlueVoteBatch.BlueVote'(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_BlueVoteBatch(Bin, TrUserData) -> dfp_read_field_def_BlueVoteBatch(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_BlueVoteBatch(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_BlueVoteBatch_votes(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_BlueVoteBatch(<<>>, 0, 0, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{votes => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_BlueVoteBatch(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_BlueVoteBatch(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_BlueVoteBatch(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_BlueVoteBatch(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_BlueVoteBatch(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_BlueVoteBatch_votes(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_BlueVoteBatch(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_BlueVoteBatch(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_BlueVoteBatch(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_BlueVoteBatch(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_BlueVoteBatch(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_BlueVoteBatch(<<>>, 0, 0, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{votes => lists_reverse(R1, TrUserData)}
    end.

d_field_BlueVoteBatch_votes(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_BlueVoteBatch_votes(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_BlueVoteBatch_votes(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_BlueVoteBatch.BlueVote'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_BlueVoteBatch(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_BlueVoteBatch(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_BlueVoteBatch(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_BlueVoteBatch(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_BlueVoteBatch(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_BlueVoteBatch(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_BlueVoteBatch(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_BlueVoteBatch(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BlueVoteBatch(Rest2, 0, 0, F@_1, TrUserData).

skip_group_BlueVoteBatch(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BlueVoteBatch(Rest, 0, Z2, F@_1, TrUserData).

skip_32_BlueVoteBatch(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_BlueVoteBatch(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_BlueVoteBatch(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_BlueVoteBatch(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_DecideBlueNode(Bin, TrUserData) -> dfp_read_field_def_DecideBlueNode(Bin, 0, 0, id(<<>>, TrUserData), id([], TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_DecideBlueNode(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_DecideBlueNode_transaction_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_DecideBlueNode(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_DecideBlueNode_partitions(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_DecideBlueNode(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_DecideBlueNode_commit_vc(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_DecideBlueNode(<<>>, 0, 0, F@_1, R1, F@_3, TrUserData) -> #{transaction_id => F@_1, partitions => lists_reverse(R1, TrUserData), commit_vc => F@_3};
dfp_read_field_def_DecideBlueNode(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_DecideBlueNode(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_DecideBlueNode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_DecideBlueNode(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_DecideBlueNode(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_DecideBlueNode_transaction_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_DecideBlueNode_partitions(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_DecideBlueNode_commit_vc(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_DecideBlueNode(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_DecideBlueNode(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_DecideBlueNode(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_DecideBlueNode(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_DecideBlueNode(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_DecideBlueNode(<<>>, 0, 0, F@_1, R1, F@_3, TrUserData) -> #{transaction_id => F@_1, partitions => lists_reverse(R1, TrUserData), commit_vc => F@_3}.

d_field_DecideBlueNode_transaction_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_DecideBlueNode_transaction_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DecideBlueNode_transaction_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_DecideBlueNode(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_DecideBlueNode_partitions(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_DecideBlueNode_partitions(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DecideBlueNode_partitions(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_DecideBlueNode(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, TrUserData).

d_field_DecideBlueNode_commit_vc(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_DecideBlueNode_commit_vc(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DecideBlueNode_commit_vc(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_DecideBlueNode(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_DecideBlueNode(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_DecideBlueNode(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_DecideBlueNode(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_DecideBlueNode(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_DecideBlueNode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_DecideBlueNode(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_DecideBlueNode(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DecideBlueNode(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_DecideBlueNode(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DecideBlueNode(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_DecideBlueNode(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_DecideBlueNode(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_DecideBlueNode(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_DecideBlueNode(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_CommitRed(Bin, TrUserData) -> dfp_read_field_def_CommitRed(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_CommitRed(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_CommitRed_partition(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_CommitRed(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_CommitRed_transaction_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_CommitRed(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_CommitRed_snapshot_vc(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_CommitRed(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_CommitRed_transaction_label(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_CommitRed(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_CommitRed_prepares(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_CommitRed(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) -> #{partition => F@_1, transaction_id => F@_2, snapshot_vc => F@_3, transaction_label => F@_4, prepares => lists_reverse(R1, TrUserData)};
dfp_read_field_def_CommitRed(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_CommitRed(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_CommitRed(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_CommitRed(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_CommitRed(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_CommitRed_partition(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_CommitRed_transaction_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_CommitRed_snapshot_vc(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_CommitRed_transaction_label(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_CommitRed_prepares(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_CommitRed(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_CommitRed(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_CommitRed(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_CommitRed(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_CommitRed(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_CommitRed(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) -> #{partition => F@_1, transaction_id => F@_2, snapshot_vc => F@_3, transaction_label => F@_4, prepares => lists_reverse(R1, TrUserData)}.

d_field_CommitRed_partition(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_CommitRed_partition(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_CommitRed_partition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_CommitRed(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_CommitRed_transaction_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_CommitRed_transaction_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_CommitRed_transaction_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_CommitRed(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_CommitRed_snapshot_vc(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_CommitRed_snapshot_vc(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_CommitRed_snapshot_vc(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_CommitRed(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_CommitRed_transaction_label(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_CommitRed_transaction_label(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_CommitRed_transaction_label(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_CommitRed(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_CommitRed_prepares(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_CommitRed_prepares(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_CommitRed_prepares(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_CommitRed(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_CommitRed(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_CommitRed(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_CommitRed(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_CommitRed(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_CommitRed(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_CommitRed(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_CommitRed(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommitRed(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_CommitRed(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CommitRed(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_CommitRed(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_CommitRed(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_CommitRed(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_CommitRed(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_CommitRedReturn(Bin, TrUserData) -> dfp_read_field_def_CommitRedReturn(Bin, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_CommitRedReturn(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_CommitRedReturn_commit_vc(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_CommitRedReturn(<<16, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_CommitRedReturn_abort_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_CommitRedReturn(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end;
dfp_read_field_def_CommitRedReturn(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_CommitRedReturn(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_CommitRedReturn(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_CommitRedReturn(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_CommitRedReturn(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_CommitRedReturn_commit_vc(Rest, 0, 0, F@_1, TrUserData);
        16 -> d_field_CommitRedReturn_abort_reason(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_CommitRedReturn(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_CommitRedReturn(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_CommitRedReturn(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_CommitRedReturn(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_CommitRedReturn(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_CommitRedReturn(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{resp => F@_1}
    end.

d_field_CommitRedReturn_commit_vc(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_CommitRedReturn_commit_vc(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_CommitRedReturn_commit_vc(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_CommitRedReturn(RestF, 0, 0, id({commit_vc, NewFValue}, TrUserData), TrUserData).

d_field_CommitRedReturn_abort_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_CommitRedReturn_abort_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_CommitRedReturn_abort_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_CommitRedReturn(RestF, 0, 0, id({abort_reason, NewFValue}, TrUserData), TrUserData).

skip_varint_CommitRedReturn(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_CommitRedReturn(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_CommitRedReturn(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_CommitRedReturn(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_CommitRedReturn(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_CommitRedReturn(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_CommitRedReturn(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommitRedReturn(Rest2, 0, 0, F@_1, TrUserData).

skip_group_CommitRedReturn(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CommitRedReturn(Rest, 0, Z2, F@_1, TrUserData).

skip_32_CommitRedReturn(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_CommitRedReturn(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_CommitRedReturn(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_CommitRedReturn(Rest, Z1, Z2, F@_1, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ConnectRequest' -> merge_msg_ConnectRequest(Prev, New, TrUserData);
        'ConnectResponse' -> merge_msg_ConnectResponse(Prev, New, TrUserData);
        'PutConflictRelations' -> merge_msg_PutConflictRelations(Prev, New, TrUserData);
        'PutConflictRelationsAck' -> merge_msg_PutConflictRelationsAck(Prev, New, TrUserData);
        'PutDirect' -> merge_msg_PutDirect(Prev, New, TrUserData);
        'PutDirectAck' -> merge_msg_PutDirectAck(Prev, New, TrUserData);
        'UniformBarrier' -> merge_msg_UniformBarrier(Prev, New, TrUserData);
        'UniformResp' -> merge_msg_UniformResp(Prev, New, TrUserData);
        'StartReq' -> merge_msg_StartReq(Prev, New, TrUserData);
        'StartReturn' -> merge_msg_StartReturn(Prev, New, TrUserData);
        'OpRequest' -> merge_msg_OpRequest(Prev, New, TrUserData);
        'OpReturn' -> merge_msg_OpReturn(Prev, New, TrUserData);
        'OpRequestPartition' -> merge_msg_OpRequestPartition(Prev, New, TrUserData);
        'OpReturnPartition' -> merge_msg_OpReturnPartition(Prev, New, TrUserData);
        'PrepareBlueNode' -> merge_msg_PrepareBlueNode(Prev, New, TrUserData);
        'BlueVoteBatch.BlueVote' -> 'merge_msg_BlueVoteBatch.BlueVote'(Prev, New, TrUserData);
        'BlueVoteBatch' -> merge_msg_BlueVoteBatch(Prev, New, TrUserData);
        'DecideBlueNode' -> merge_msg_DecideBlueNode(Prev, New, TrUserData);
        'CommitRed' -> merge_msg_CommitRed(Prev, New, TrUserData);
        'CommitRedReturn' -> merge_msg_CommitRedReturn(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_ConnectRequest/3}).
merge_msg_ConnectRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_ConnectResponse/3}).
merge_msg_ConnectResponse(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{num_partitions := NFnum_partitions}} -> S1#{num_partitions => NFnum_partitions};
             {#{num_partitions := PFnum_partitions}, _} -> S1#{num_partitions => PFnum_partitions};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{ring_payload := NFring_payload}} -> S2#{ring_payload => NFring_payload};
             {#{ring_payload := PFring_payload}, _} -> S2#{ring_payload => PFring_payload};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{replica_id := NFreplica_id}} -> S3#{replica_id => NFreplica_id};
        {#{replica_id := PFreplica_id}, _} -> S3#{replica_id => PFreplica_id};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_PutConflictRelations/3}).
merge_msg_PutConflictRelations(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{payload := NFpayload}} -> S1#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S1#{payload => PFpayload};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_PutConflictRelationsAck/3}).
merge_msg_PutConflictRelationsAck(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_PutDirect/3}).
merge_msg_PutDirect(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{partition := NFpartition}} -> S1#{partition => NFpartition};
             {#{partition := PFpartition}, _} -> S1#{partition => PFpartition};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{payload := NFpayload}} -> S2#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S2#{payload => PFpayload};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_PutDirectAck/3}).
merge_msg_PutDirectAck(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_UniformBarrier/3}).
merge_msg_UniformBarrier(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{client_vc := NFclient_vc}} -> S1#{client_vc => NFclient_vc};
             {#{client_vc := PFclient_vc}, _} -> S1#{client_vc => PFclient_vc};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{partition := NFpartition}} -> S2#{partition => NFpartition};
        {#{partition := PFpartition}, _} -> S2#{partition => PFpartition};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_UniformResp/3}).
merge_msg_UniformResp(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_StartReq/3}).
merge_msg_StartReq(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{client_vc := NFclient_vc}} -> S1#{client_vc => NFclient_vc};
             {#{client_vc := PFclient_vc}, _} -> S1#{client_vc => PFclient_vc};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{partition := NFpartition}} -> S2#{partition => NFpartition};
        {#{partition := PFpartition}, _} -> S2#{partition => PFpartition};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_StartReturn/3}).
merge_msg_StartReturn(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{snapshot_vc := NFsnapshot_vc}} -> S1#{snapshot_vc => NFsnapshot_vc};
        {#{snapshot_vc := PFsnapshot_vc}, _} -> S1#{snapshot_vc => PFsnapshot_vc};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_OpRequest/3}).
merge_msg_OpRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{partition := NFpartition}} -> S1#{partition => NFpartition};
             {#{partition := PFpartition}, _} -> S1#{partition => PFpartition};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{transaction_id := NFtransaction_id}} -> S2#{transaction_id => NFtransaction_id};
             {#{transaction_id := PFtransaction_id}, _} -> S2#{transaction_id => PFtransaction_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{key := NFkey}} -> S3#{key => NFkey};
             {#{key := PFkey}, _} -> S3#{key => PFkey};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{snapshot_vc := NFsnapshot_vc}} -> S4#{snapshot_vc => NFsnapshot_vc};
             {#{snapshot_vc := PFsnapshot_vc}, _} -> S4#{snapshot_vc => PFsnapshot_vc};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{read_again := NFread_again}} -> S5#{read_again => NFread_again};
             {#{read_again := PFread_again}, _} -> S5#{read_again => PFread_again};
             _ -> S5
         end,
    case {PMsg, NMsg} of
        {_, #{payload := NFpayload}} -> S6#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S6#{payload => PFpayload};
        _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_OpReturn/3}).
merge_msg_OpReturn(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{value := NFvalue}} -> S1#{value => NFvalue};
             {#{value := PFvalue}, _} -> S1#{value => PFvalue};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{transform := NFtransform}} -> S2#{transform => NFtransform};
        {#{transform := PFtransform}, _} -> S2#{transform => PFtransform};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_OpRequestPartition/3}).
merge_msg_OpRequestPartition(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{partition := NFpartition}} -> S1#{partition => NFpartition};
             {#{partition := PFpartition}, _} -> S1#{partition => PFpartition};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{transaction_id := NFtransaction_id}} -> S2#{transaction_id => NFtransaction_id};
             {#{transaction_id := PFtransaction_id}, _} -> S2#{transaction_id => PFtransaction_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{snapshot_vc := NFsnapshot_vc}} -> S3#{snapshot_vc => NFsnapshot_vc};
             {#{snapshot_vc := PFsnapshot_vc}, _} -> S3#{snapshot_vc => PFsnapshot_vc};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{is_read := NFis_read}} -> S4#{is_read => NFis_read};
             {#{is_read := PFis_read}, _} -> S4#{is_read => PFis_read};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{read_again := NFread_again}} -> S5#{read_again => NFread_again};
             {#{read_again := PFread_again}, _} -> S5#{read_again => PFread_again};
             _ -> S5
         end,
    case {PMsg, NMsg} of
        {_, #{ops := NFops}} -> S6#{ops => NFops};
        {#{ops := PFops}, _} -> S6#{ops => PFops};
        _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_OpReturnPartition/3}).
merge_msg_OpReturnPartition(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{payload := NFpayload}} -> S1#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S1#{payload => PFpayload};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_PrepareBlueNode/3}).
merge_msg_PrepareBlueNode(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{transaction_id := NFtransaction_id}} -> S1#{transaction_id => NFtransaction_id};
             {#{transaction_id := PFtransaction_id}, _} -> S1#{transaction_id => PFtransaction_id};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{snapshot_vc := NFsnapshot_vc}} -> S2#{snapshot_vc => NFsnapshot_vc};
             {#{snapshot_vc := PFsnapshot_vc}, _} -> S2#{snapshot_vc => PFsnapshot_vc};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{partitions := PFpartitions}, #{partitions := NFpartitions}} -> S3#{partitions => 'erlang_++'(PFpartitions, NFpartitions, TrUserData)};
        {_, #{partitions := NFpartitions}} -> S3#{partitions => NFpartitions};
        {#{partitions := PFpartitions}, _} -> S3#{partitions => PFpartitions};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,'merge_msg_BlueVoteBatch.BlueVote'/3}).
'merge_msg_BlueVoteBatch.BlueVote'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{partition := NFpartition}} -> S1#{partition => NFpartition};
             {#{partition := PFpartition}, _} -> S1#{partition => PFpartition};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{prepare_time := NFprepare_time}} -> S2#{prepare_time => NFprepare_time};
        {#{prepare_time := PFprepare_time}, _} -> S2#{prepare_time => PFprepare_time};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_BlueVoteBatch/3}).
merge_msg_BlueVoteBatch(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{votes := PFvotes}, #{votes := NFvotes}} -> S1#{votes => 'erlang_++'(PFvotes, NFvotes, TrUserData)};
        {_, #{votes := NFvotes}} -> S1#{votes => NFvotes};
        {#{votes := PFvotes}, _} -> S1#{votes => PFvotes};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_DecideBlueNode/3}).
merge_msg_DecideBlueNode(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{transaction_id := NFtransaction_id}} -> S1#{transaction_id => NFtransaction_id};
             {#{transaction_id := PFtransaction_id}, _} -> S1#{transaction_id => PFtransaction_id};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{partitions := PFpartitions}, #{partitions := NFpartitions}} -> S2#{partitions => 'erlang_++'(PFpartitions, NFpartitions, TrUserData)};
             {_, #{partitions := NFpartitions}} -> S2#{partitions => NFpartitions};
             {#{partitions := PFpartitions}, _} -> S2#{partitions => PFpartitions};
             {_, _} -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{commit_vc := NFcommit_vc}} -> S3#{commit_vc => NFcommit_vc};
        {#{commit_vc := PFcommit_vc}, _} -> S3#{commit_vc => PFcommit_vc};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_CommitRed/3}).
merge_msg_CommitRed(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{partition := NFpartition}} -> S1#{partition => NFpartition};
             {#{partition := PFpartition}, _} -> S1#{partition => PFpartition};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{transaction_id := NFtransaction_id}} -> S2#{transaction_id => NFtransaction_id};
             {#{transaction_id := PFtransaction_id}, _} -> S2#{transaction_id => PFtransaction_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{snapshot_vc := NFsnapshot_vc}} -> S3#{snapshot_vc => NFsnapshot_vc};
             {#{snapshot_vc := PFsnapshot_vc}, _} -> S3#{snapshot_vc => PFsnapshot_vc};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{transaction_label := NFtransaction_label}} -> S4#{transaction_label => NFtransaction_label};
             {#{transaction_label := PFtransaction_label}, _} -> S4#{transaction_label => PFtransaction_label};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {#{prepares := PFprepares}, #{prepares := NFprepares}} -> S5#{prepares => 'erlang_++'(PFprepares, NFprepares, TrUserData)};
        {_, #{prepares := NFprepares}} -> S5#{prepares => NFprepares};
        {#{prepares := PFprepares}, _} -> S5#{prepares => PFprepares};
        {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_CommitRedReturn/3}).
merge_msg_CommitRedReturn(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{resp := NFresp}} -> S1#{resp => NFresp};
        {#{resp := PFresp}, _} -> S1#{resp => PFresp};
        _ -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ConnectRequest' -> v_msg_ConnectRequest(Msg, [MsgName], TrUserData);
        'ConnectResponse' -> v_msg_ConnectResponse(Msg, [MsgName], TrUserData);
        'PutConflictRelations' -> v_msg_PutConflictRelations(Msg, [MsgName], TrUserData);
        'PutConflictRelationsAck' -> v_msg_PutConflictRelationsAck(Msg, [MsgName], TrUserData);
        'PutDirect' -> v_msg_PutDirect(Msg, [MsgName], TrUserData);
        'PutDirectAck' -> v_msg_PutDirectAck(Msg, [MsgName], TrUserData);
        'UniformBarrier' -> v_msg_UniformBarrier(Msg, [MsgName], TrUserData);
        'UniformResp' -> v_msg_UniformResp(Msg, [MsgName], TrUserData);
        'StartReq' -> v_msg_StartReq(Msg, [MsgName], TrUserData);
        'StartReturn' -> v_msg_StartReturn(Msg, [MsgName], TrUserData);
        'OpRequest' -> v_msg_OpRequest(Msg, [MsgName], TrUserData);
        'OpReturn' -> v_msg_OpReturn(Msg, [MsgName], TrUserData);
        'OpRequestPartition' -> v_msg_OpRequestPartition(Msg, [MsgName], TrUserData);
        'OpReturnPartition' -> v_msg_OpReturnPartition(Msg, [MsgName], TrUserData);
        'PrepareBlueNode' -> v_msg_PrepareBlueNode(Msg, [MsgName], TrUserData);
        'BlueVoteBatch.BlueVote' -> 'v_msg_BlueVoteBatch.BlueVote'(Msg, [MsgName], TrUserData);
        'BlueVoteBatch' -> v_msg_BlueVoteBatch(Msg, [MsgName], TrUserData);
        'DecideBlueNode' -> v_msg_DecideBlueNode(Msg, [MsgName], TrUserData);
        'CommitRed' -> v_msg_CommitRed(Msg, [MsgName], TrUserData);
        'CommitRedReturn' -> v_msg_CommitRedReturn(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_ConnectRequest/3}).
-dialyzer({nowarn_function,v_msg_ConnectRequest/3}).
v_msg_ConnectRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_ConnectRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ConnectRequest'}, M, Path);
v_msg_ConnectRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ConnectRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_ConnectResponse/3}).
-dialyzer({nowarn_function,v_msg_ConnectResponse/3}).
v_msg_ConnectResponse(#{} = M, Path, TrUserData) ->
    case M of
        #{num_partitions := F1} -> v_type_uint32(F1, [num_partitions | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{ring_payload := F2} -> v_type_bytes(F2, [ring_payload | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{replica_id := F3} -> v_type_bytes(F3, [replica_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (num_partitions) -> ok;
                      (ring_payload) -> ok;
                      (replica_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ConnectResponse(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ConnectResponse'}, M, Path);
v_msg_ConnectResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ConnectResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutConflictRelations/3}).
-dialyzer({nowarn_function,v_msg_PutConflictRelations/3}).
v_msg_PutConflictRelations(#{} = M, Path, TrUserData) ->
    case M of
        #{payload := F1} -> v_type_bytes(F1, [payload | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PutConflictRelations(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PutConflictRelations'}, M, Path);
v_msg_PutConflictRelations(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutConflictRelations'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutConflictRelationsAck/3}).
-dialyzer({nowarn_function,v_msg_PutConflictRelationsAck/3}).
v_msg_PutConflictRelationsAck(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_PutConflictRelationsAck(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PutConflictRelationsAck'}, M, Path);
v_msg_PutConflictRelationsAck(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutConflictRelationsAck'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutDirect/3}).
-dialyzer({nowarn_function,v_msg_PutDirect/3}).
v_msg_PutDirect(#{} = M, Path, TrUserData) ->
    case M of
        #{partition := F1} -> v_type_bytes(F1, [partition | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := F2} -> v_type_bytes(F2, [payload | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
                      (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PutDirect(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PutDirect'}, M, Path);
v_msg_PutDirect(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutDirect'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutDirectAck/3}).
-dialyzer({nowarn_function,v_msg_PutDirectAck/3}).
v_msg_PutDirectAck(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_PutDirectAck(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PutDirectAck'}, M, Path);
v_msg_PutDirectAck(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutDirectAck'}, X, Path).

-compile({nowarn_unused_function,v_msg_UniformBarrier/3}).
-dialyzer({nowarn_function,v_msg_UniformBarrier/3}).
v_msg_UniformBarrier(#{} = M, Path, TrUserData) ->
    case M of
        #{client_vc := F1} -> v_type_bytes(F1, [client_vc | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{partition := F2} -> v_type_bytes(F2, [partition | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (client_vc) -> ok;
                      (partition) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_UniformBarrier(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'UniformBarrier'}, M, Path);
v_msg_UniformBarrier(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UniformBarrier'}, X, Path).

-compile({nowarn_unused_function,v_msg_UniformResp/3}).
-dialyzer({nowarn_function,v_msg_UniformResp/3}).
v_msg_UniformResp(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_UniformResp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'UniformResp'}, M, Path);
v_msg_UniformResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UniformResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_StartReq/3}).
-dialyzer({nowarn_function,v_msg_StartReq/3}).
v_msg_StartReq(#{} = M, Path, TrUserData) ->
    case M of
        #{client_vc := F1} -> v_type_bytes(F1, [client_vc | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{partition := F2} -> v_type_bytes(F2, [partition | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (client_vc) -> ok;
                      (partition) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StartReq(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StartReq'}, M, Path);
v_msg_StartReq(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StartReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_StartReturn/3}).
-dialyzer({nowarn_function,v_msg_StartReturn/3}).
v_msg_StartReturn(#{} = M, Path, TrUserData) ->
    case M of
        #{snapshot_vc := F1} -> v_type_bytes(F1, [snapshot_vc | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (snapshot_vc) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StartReturn(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StartReturn'}, M, Path);
v_msg_StartReturn(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StartReturn'}, X, Path).

-compile({nowarn_unused_function,v_msg_OpRequest/3}).
-dialyzer({nowarn_function,v_msg_OpRequest/3}).
v_msg_OpRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{partition := F1} -> v_type_bytes(F1, [partition | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{transaction_id := F2} -> v_type_bytes(F2, [transaction_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{key := F3} -> v_type_bytes(F3, [key | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{snapshot_vc := F4} -> v_type_bytes(F4, [snapshot_vc | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{read_again := F5} -> v_type_bool(F5, [read_again | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := {type, OF6}} -> v_type_bytes(OF6, [type, payload | Path], TrUserData);
        #{payload := {operation, OF6}} -> v_type_bytes(OF6, [operation, payload | Path], TrUserData);
        #{payload := F6} -> mk_type_error(invalid_oneof, F6, [payload | Path]);
        _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
                      (transaction_id) -> ok;
                      (key) -> ok;
                      (snapshot_vc) -> ok;
                      (read_again) -> ok;
                      (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_OpRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'OpRequest'}, M, Path);
v_msg_OpRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'OpRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_OpReturn/3}).
-dialyzer({nowarn_function,v_msg_OpReturn/3}).
v_msg_OpReturn(#{} = M, Path, TrUserData) ->
    case M of
        #{value := F1} -> v_type_bytes(F1, [value | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{transform := F2} -> v_type_bool(F2, [transform | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
                      (transform) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_OpReturn(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'OpReturn'}, M, Path);
v_msg_OpReturn(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'OpReturn'}, X, Path).

-compile({nowarn_unused_function,v_msg_OpRequestPartition/3}).
-dialyzer({nowarn_function,v_msg_OpRequestPartition/3}).
v_msg_OpRequestPartition(#{} = M, Path, TrUserData) ->
    case M of
        #{partition := F1} -> v_type_bytes(F1, [partition | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{transaction_id := F2} -> v_type_bytes(F2, [transaction_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{snapshot_vc := F3} -> v_type_bytes(F3, [snapshot_vc | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{is_read := F4} -> v_type_bool(F4, [is_read | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{read_again := F5} -> v_type_bool(F5, [read_again | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{ops := F6} -> v_type_bytes(F6, [ops | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
                      (transaction_id) -> ok;
                      (snapshot_vc) -> ok;
                      (is_read) -> ok;
                      (read_again) -> ok;
                      (ops) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_OpRequestPartition(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'OpRequestPartition'}, M, Path);
v_msg_OpRequestPartition(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'OpRequestPartition'}, X, Path).

-compile({nowarn_unused_function,v_msg_OpReturnPartition/3}).
-dialyzer({nowarn_function,v_msg_OpReturnPartition/3}).
v_msg_OpReturnPartition(#{} = M, Path, TrUserData) ->
    case M of
        #{payload := F1} -> v_type_bytes(F1, [payload | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_OpReturnPartition(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'OpReturnPartition'}, M, Path);
v_msg_OpReturnPartition(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'OpReturnPartition'}, X, Path).

-compile({nowarn_unused_function,v_msg_PrepareBlueNode/3}).
-dialyzer({nowarn_function,v_msg_PrepareBlueNode/3}).
v_msg_PrepareBlueNode(#{} = M, Path, TrUserData) ->
    case M of
        #{transaction_id := F1} -> v_type_bytes(F1, [transaction_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{snapshot_vc := F2} -> v_type_bytes(F2, [snapshot_vc | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{partitions := F3} ->
            if is_list(F3) ->
                   _ = [v_type_bytes(Elem, [partitions | Path], TrUserData) || Elem <- F3],
                   ok;
               true -> mk_type_error({invalid_list_of, bytes}, F3, [partitions | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (transaction_id) -> ok;
                      (snapshot_vc) -> ok;
                      (partitions) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PrepareBlueNode(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PrepareBlueNode'}, M, Path);
v_msg_PrepareBlueNode(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PrepareBlueNode'}, X, Path).

-compile({nowarn_unused_function,'v_msg_BlueVoteBatch.BlueVote'/3}).
-dialyzer({nowarn_function,'v_msg_BlueVoteBatch.BlueVote'/3}).
'v_msg_BlueVoteBatch.BlueVote'(#{} = M, Path, TrUserData) ->
    case M of
        #{partition := F1} -> v_type_bytes(F1, [partition | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{prepare_time := F2} -> v_type_uint64(F2, [prepare_time | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
                      (prepare_time) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
'v_msg_BlueVoteBatch.BlueVote'(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'BlueVoteBatch.BlueVote'}, M, Path);
'v_msg_BlueVoteBatch.BlueVote'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BlueVoteBatch.BlueVote'}, X, Path).

-compile({nowarn_unused_function,v_msg_BlueVoteBatch/3}).
-dialyzer({nowarn_function,v_msg_BlueVoteBatch/3}).
v_msg_BlueVoteBatch(#{} = M, Path, TrUserData) ->
    case M of
        #{votes := F1} ->
            if is_list(F1) ->
                   _ = ['v_msg_BlueVoteBatch.BlueVote'(Elem, [votes | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, 'BlueVoteBatch.BlueVote'}}, F1, [votes | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (votes) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_BlueVoteBatch(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'BlueVoteBatch'}, M, Path);
v_msg_BlueVoteBatch(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BlueVoteBatch'}, X, Path).

-compile({nowarn_unused_function,v_msg_DecideBlueNode/3}).
-dialyzer({nowarn_function,v_msg_DecideBlueNode/3}).
v_msg_DecideBlueNode(#{} = M, Path, TrUserData) ->
    case M of
        #{transaction_id := F1} -> v_type_bytes(F1, [transaction_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{partitions := F2} ->
            if is_list(F2) ->
                   _ = [v_type_bytes(Elem, [partitions | Path], TrUserData) || Elem <- F2],
                   ok;
               true -> mk_type_error({invalid_list_of, bytes}, F2, [partitions | Path])
            end;
        _ -> ok
    end,
    case M of
        #{commit_vc := F3} -> v_type_bytes(F3, [commit_vc | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (transaction_id) -> ok;
                      (partitions) -> ok;
                      (commit_vc) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_DecideBlueNode(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'DecideBlueNode'}, M, Path);
v_msg_DecideBlueNode(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'DecideBlueNode'}, X, Path).

-compile({nowarn_unused_function,v_msg_CommitRed/3}).
-dialyzer({nowarn_function,v_msg_CommitRed/3}).
v_msg_CommitRed(#{} = M, Path, TrUserData) ->
    case M of
        #{partition := F1} -> v_type_bytes(F1, [partition | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{transaction_id := F2} -> v_type_bytes(F2, [transaction_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{snapshot_vc := F3} -> v_type_bytes(F3, [snapshot_vc | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{transaction_label := F4} -> v_type_bytes(F4, [transaction_label | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{prepares := F5} ->
            if is_list(F5) ->
                   _ = [v_type_bytes(Elem, [prepares | Path], TrUserData) || Elem <- F5],
                   ok;
               true -> mk_type_error({invalid_list_of, bytes}, F5, [prepares | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (partition) -> ok;
                      (transaction_id) -> ok;
                      (snapshot_vc) -> ok;
                      (transaction_label) -> ok;
                      (prepares) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_CommitRed(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'CommitRed'}, M, Path);
v_msg_CommitRed(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CommitRed'}, X, Path).

-compile({nowarn_unused_function,v_msg_CommitRedReturn/3}).
-dialyzer({nowarn_function,v_msg_CommitRedReturn/3}).
v_msg_CommitRedReturn(#{} = M, Path, TrUserData) ->
    case M of
        #{resp := {commit_vc, OF1}} -> v_type_bytes(OF1, [commit_vc, resp | Path], TrUserData);
        #{resp := {abort_reason, OF1}} -> v_type_uint32(OF1, [abort_reason, resp | Path], TrUserData);
        #{resp := F1} -> mk_type_error(invalid_oneof, F1, [resp | Path]);
        _ -> ok
    end,
    lists:foreach(fun (resp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_CommitRedReturn(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'CommitRedReturn'}, M, Path);
v_msg_CommitRedReturn(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CommitRedReturn'}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'ConnectRequest'}, []},
     {{msg, 'ConnectResponse'},
      [#{name => num_partitions, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
       #{name => ring_payload, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => replica_id, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'PutConflictRelations'}, [#{name => payload, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'PutConflictRelationsAck'}, []},
     {{msg, 'PutDirect'}, [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => payload, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'PutDirectAck'}, []},
     {{msg, 'UniformBarrier'}, [#{name => client_vc, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => partition, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'UniformResp'}, []},
     {{msg, 'StartReq'}, [#{name => client_vc, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => partition, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'StartReturn'}, [#{name => snapshot_vc, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'OpRequest'},
      [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => transaction_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => key, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []},
       #{name => snapshot_vc, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []},
       #{name => read_again, fnum => 5, rnum => 6, type => bool, occurrence => optional, opts => []},
       #{name => payload, rnum => 7, fields => [#{name => type, fnum => 6, rnum => 7, type => bytes, occurrence => optional, opts => []}, #{name => operation, fnum => 7, rnum => 7, type => bytes, occurrence => optional, opts => []}]}]},
     {{msg, 'OpReturn'}, [#{name => value, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => transform, fnum => 2, rnum => 3, type => bool, occurrence => optional, opts => []}]},
     {{msg, 'OpRequestPartition'},
      [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => transaction_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => snapshot_vc, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []},
       #{name => is_read, fnum => 4, rnum => 5, type => bool, occurrence => optional, opts => []},
       #{name => read_again, fnum => 5, rnum => 6, type => bool, occurrence => optional, opts => []},
       #{name => ops, fnum => 6, rnum => 7, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'OpReturnPartition'}, [#{name => payload, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'PrepareBlueNode'},
      [#{name => transaction_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => snapshot_vc, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => partitions, fnum => 3, rnum => 4, type => bytes, occurrence => repeated, opts => []}]},
     {{msg, 'BlueVoteBatch.BlueVote'}, [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => prepare_time, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'BlueVoteBatch'}, [#{name => votes, fnum => 1, rnum => 2, type => {msg, 'BlueVoteBatch.BlueVote'}, occurrence => repeated, opts => []}]},
     {{msg, 'DecideBlueNode'},
      [#{name => transaction_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => partitions, fnum => 2, rnum => 3, type => bytes, occurrence => repeated, opts => []},
       #{name => commit_vc, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []}]},
     {{msg, 'CommitRed'},
      [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
       #{name => transaction_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
       #{name => snapshot_vc, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []},
       #{name => transaction_label, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []},
       #{name => prepares, fnum => 5, rnum => 6, type => bytes, occurrence => repeated, opts => []}]},
     {{msg, 'CommitRedReturn'},
      [#{name => resp, rnum => 2, fields => [#{name => commit_vc, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => abort_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}]}].


get_msg_names() ->
    ['ConnectRequest',
     'ConnectResponse',
     'PutConflictRelations',
     'PutConflictRelationsAck',
     'PutDirect',
     'PutDirectAck',
     'UniformBarrier',
     'UniformResp',
     'StartReq',
     'StartReturn',
     'OpRequest',
     'OpReturn',
     'OpRequestPartition',
     'OpReturnPartition',
     'PrepareBlueNode',
     'BlueVoteBatch.BlueVote',
     'BlueVoteBatch',
     'DecideBlueNode',
     'CommitRed',
     'CommitRedReturn'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ConnectRequest',
     'ConnectResponse',
     'PutConflictRelations',
     'PutConflictRelationsAck',
     'PutDirect',
     'PutDirectAck',
     'UniformBarrier',
     'UniformResp',
     'StartReq',
     'StartReturn',
     'OpRequest',
     'OpReturn',
     'OpRequestPartition',
     'OpReturnPartition',
     'PrepareBlueNode',
     'BlueVoteBatch.BlueVote',
     'BlueVoteBatch',
     'DecideBlueNode',
     'CommitRed',
     'CommitRedReturn'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def('ConnectRequest') -> [];
find_msg_def('ConnectResponse') ->
    [#{name => num_partitions, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
     #{name => ring_payload, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => replica_id, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []}];
find_msg_def('PutConflictRelations') -> [#{name => payload, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('PutConflictRelationsAck') -> [];
find_msg_def('PutDirect') -> [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => payload, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}];
find_msg_def('PutDirectAck') -> [];
find_msg_def('UniformBarrier') -> [#{name => client_vc, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => partition, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}];
find_msg_def('UniformResp') -> [];
find_msg_def('StartReq') -> [#{name => client_vc, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => partition, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}];
find_msg_def('StartReturn') -> [#{name => snapshot_vc, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('OpRequest') ->
    [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => transaction_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => key, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []},
     #{name => snapshot_vc, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []},
     #{name => read_again, fnum => 5, rnum => 6, type => bool, occurrence => optional, opts => []},
     #{name => payload, rnum => 7, fields => [#{name => type, fnum => 6, rnum => 7, type => bytes, occurrence => optional, opts => []}, #{name => operation, fnum => 7, rnum => 7, type => bytes, occurrence => optional, opts => []}]}];
find_msg_def('OpReturn') -> [#{name => value, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => transform, fnum => 2, rnum => 3, type => bool, occurrence => optional, opts => []}];
find_msg_def('OpRequestPartition') ->
    [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => transaction_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => snapshot_vc, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []},
     #{name => is_read, fnum => 4, rnum => 5, type => bool, occurrence => optional, opts => []},
     #{name => read_again, fnum => 5, rnum => 6, type => bool, occurrence => optional, opts => []},
     #{name => ops, fnum => 6, rnum => 7, type => bytes, occurrence => optional, opts => []}];
find_msg_def('OpReturnPartition') -> [#{name => payload, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def('PrepareBlueNode') ->
    [#{name => transaction_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => snapshot_vc, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => partitions, fnum => 3, rnum => 4, type => bytes, occurrence => repeated, opts => []}];
find_msg_def('BlueVoteBatch.BlueVote') -> [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => prepare_time, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []}];
find_msg_def('BlueVoteBatch') -> [#{name => votes, fnum => 1, rnum => 2, type => {msg, 'BlueVoteBatch.BlueVote'}, occurrence => repeated, opts => []}];
find_msg_def('DecideBlueNode') ->
    [#{name => transaction_id, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => partitions, fnum => 2, rnum => 3, type => bytes, occurrence => repeated, opts => []},
     #{name => commit_vc, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []}];
find_msg_def('CommitRed') ->
    [#{name => partition, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []},
     #{name => transaction_id, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
     #{name => snapshot_vc, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []},
     #{name => transaction_label, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []},
     #{name => prepares, fnum => 5, rnum => 6, type => bytes, occurrence => repeated, opts => []}];
find_msg_def('CommitRedReturn') ->
    [#{name => resp, rnum => 2, fields => [#{name => commit_vc, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => abort_reason, fnum => 2, rnum => 2, type => uint32, occurrence => optional, opts => []}]}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ConnectRequest">>) -> 'ConnectRequest';
fqbin_to_msg_name(<<"ConnectResponse">>) -> 'ConnectResponse';
fqbin_to_msg_name(<<"PutConflictRelations">>) -> 'PutConflictRelations';
fqbin_to_msg_name(<<"PutConflictRelationsAck">>) -> 'PutConflictRelationsAck';
fqbin_to_msg_name(<<"PutDirect">>) -> 'PutDirect';
fqbin_to_msg_name(<<"PutDirectAck">>) -> 'PutDirectAck';
fqbin_to_msg_name(<<"UniformBarrier">>) -> 'UniformBarrier';
fqbin_to_msg_name(<<"UniformResp">>) -> 'UniformResp';
fqbin_to_msg_name(<<"StartReq">>) -> 'StartReq';
fqbin_to_msg_name(<<"StartReturn">>) -> 'StartReturn';
fqbin_to_msg_name(<<"OpRequest">>) -> 'OpRequest';
fqbin_to_msg_name(<<"OpReturn">>) -> 'OpReturn';
fqbin_to_msg_name(<<"OpRequestPartition">>) -> 'OpRequestPartition';
fqbin_to_msg_name(<<"OpReturnPartition">>) -> 'OpReturnPartition';
fqbin_to_msg_name(<<"PrepareBlueNode">>) -> 'PrepareBlueNode';
fqbin_to_msg_name(<<"BlueVoteBatch.BlueVote">>) -> 'BlueVoteBatch.BlueVote';
fqbin_to_msg_name(<<"BlueVoteBatch">>) -> 'BlueVoteBatch';
fqbin_to_msg_name(<<"DecideBlueNode">>) -> 'DecideBlueNode';
fqbin_to_msg_name(<<"CommitRed">>) -> 'CommitRed';
fqbin_to_msg_name(<<"CommitRedReturn">>) -> 'CommitRedReturn';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('ConnectRequest') -> <<"ConnectRequest">>;
msg_name_to_fqbin('ConnectResponse') -> <<"ConnectResponse">>;
msg_name_to_fqbin('PutConflictRelations') -> <<"PutConflictRelations">>;
msg_name_to_fqbin('PutConflictRelationsAck') -> <<"PutConflictRelationsAck">>;
msg_name_to_fqbin('PutDirect') -> <<"PutDirect">>;
msg_name_to_fqbin('PutDirectAck') -> <<"PutDirectAck">>;
msg_name_to_fqbin('UniformBarrier') -> <<"UniformBarrier">>;
msg_name_to_fqbin('UniformResp') -> <<"UniformResp">>;
msg_name_to_fqbin('StartReq') -> <<"StartReq">>;
msg_name_to_fqbin('StartReturn') -> <<"StartReturn">>;
msg_name_to_fqbin('OpRequest') -> <<"OpRequest">>;
msg_name_to_fqbin('OpReturn') -> <<"OpReturn">>;
msg_name_to_fqbin('OpRequestPartition') -> <<"OpRequestPartition">>;
msg_name_to_fqbin('OpReturnPartition') -> <<"OpReturnPartition">>;
msg_name_to_fqbin('PrepareBlueNode') -> <<"PrepareBlueNode">>;
msg_name_to_fqbin('BlueVoteBatch.BlueVote') -> <<"BlueVoteBatch.BlueVote">>;
msg_name_to_fqbin('BlueVoteBatch') -> <<"BlueVoteBatch">>;
msg_name_to_fqbin('DecideBlueNode') -> <<"DecideBlueNode">>;
msg_name_to_fqbin('CommitRed') -> <<"CommitRed">>;
msg_name_to_fqbin('CommitRedReturn') -> <<"CommitRedReturn">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "grb_msgs.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["grb_msgs.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["grb_msgs"].


get_msg_containment("grb_msgs") ->
    ['BlueVoteBatch',
     'BlueVoteBatch.BlueVote',
     'CommitRed',
     'CommitRedReturn',
     'ConnectRequest',
     'ConnectResponse',
     'DecideBlueNode',
     'OpRequest',
     'OpRequestPartition',
     'OpReturn',
     'OpReturnPartition',
     'PrepareBlueNode',
     'PutConflictRelations',
     'PutConflictRelationsAck',
     'PutDirect',
     'PutDirectAck',
     'StartReq',
     'StartReturn',
     'UniformBarrier',
     'UniformResp'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("grb_msgs") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("grb_msgs") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("grb_msgs") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("grb_msgs") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"UniformResp">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"StartReq">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"UniformBarrier">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"PutConflictRelations">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"PutDirect">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"OpRequest">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"ConnectRequest">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"CommitRed">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"PrepareBlueNode">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"DecideBlueNode">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"ConnectResponse">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"BlueVoteBatch.BlueVote">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"BlueVoteBatch">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"PutDirectAck">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"PutConflictRelationsAck">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"StartReturn">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"OpReturnPartition">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"OpReturn">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"OpRequestPartition">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(<<"CommitRedReturn">>) -> "grb_msgs";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.12.0".

gpb_version_as_list() ->
    [4,12,0].
